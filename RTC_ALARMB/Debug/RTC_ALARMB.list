
RTC_ALARMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800344c  0800344c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003454  08003454  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800345c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  080034cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080034cc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a36  00000000  00000000  0002ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001665e  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad09  00000000  00000000  00043d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b20d  00000000  00000000  0004ea67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  000d9cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003370 	.word	0x08003370

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003370 	.word	0x08003370

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SysTick_Handler>:
 *      Author: Mustafa
 */
#include "main.h"
extern RTC_HandleTypeDef *hrtc;
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
   HAL_IncTick();
 8000598:	f000 faec 	bl	8000b74 <HAL_IncTick>
   HAL_SYSTICK_IRQHandler();
 800059c:	f000 fc1b 	bl	8000dd6 <HAL_SYSTICK_IRQHandler>

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005ac:	f000 fda4 	bl	80010f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

	HAL_RTC_AlarmIRQHandler(hrtc);
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <RTC_Alarm_IRQHandler+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fd5f 	bl	8002080 <HAL_RTC_AlarmIRQHandler>

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d0 	.word	0x200000d0

080005cc <printmsg>:
void RTC_AlarmConfig();
UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;

void printmsg(char *format,...)
 {
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b096      	sub	sp, #88	; 0x58
 80005d2:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fa6c 	bl	8002ac0 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 0108 	add.w	r1, r7, #8
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <printmsg+0x48>)
 8000600:	f001 fea2 	bl	8002348 <HAL_UART_Transmit>
	va_end(args);

 }
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	; 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060e:	b004      	add	sp, #16
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <main>:
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_Init(); // It must be the first function to initialize
 800061c:	f000 fa58 	bl	8000ad0 <HAL_Init>

	GPIO_Init();
 8000620:	f000 f80a 	bl	8000638 <GPIO_Init>

	UART2_Init();
 8000624:	f000 f886 	bl	8000734 <UART2_Init>

	printmsg("RTC TESTING\r\n");
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <main+0x1c>)
 800062a:	f7ff ffcf 	bl	80005cc <printmsg>
    RTC_Init();
 800062e:	f000 f8ab 	bl	8000788 <RTC_Init>



    while(1);
 8000632:	e7fe      	b.n	8000632 <main+0x1a>
 8000634:	08003388 	.word	0x08003388

08000638 <GPIO_Init>:

  return 0;
}

void GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
     __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <GPIO_Init+0x8c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <GPIO_Init+0x8c>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <GPIO_Init+0x8c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <GPIO_Init+0x8c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <GPIO_Init+0x8c>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <GPIO_Init+0x8c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

     GPIO_InitTypeDef GPIO_InitStruct;

     GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000676:	2320      	movs	r3, #32
 8000678:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <GPIO_Init+0x90>)
 800068a:	f000 fbb1 	bl	8000df0 <HAL_GPIO_Init>

 	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800068e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000692:	60fb      	str	r3, [r7, #12]
 	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // USING USER BUTTER AS INTERRUPT START
 8000694:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000698:	613b      	str	r3, [r7, #16]
 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 	HAL_GPIO_Init(GPIOC,&GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <GPIO_Init+0x94>)
 80006a6:	f000 fba3 	bl	8000df0 <HAL_GPIO_Init>

 	HAL_NVIC_SetPriority(EXTI15_10_IRQn,14, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210e      	movs	r1, #14
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f000 fb5b 	bl	8000d6a <HAL_NVIC_SetPriority>
 	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f000 fb74 	bl	8000da2 <HAL_NVIC_EnableIRQ>




}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020800 	.word	0x40020800

080006d0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
	RTC_TimeTypeDef rTime;
	RTC_DateTypeDef rDate;

    RTC_CalendarConfig();
 80006da:	f000 f87b 	bl	80007d4 <RTC_CalendarConfig>

	HAL_RTC_GetTime(&hrtc,&rTime,RTC_FORMAT_BIN);
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <HAL_GPIO_EXTI_Callback+0x58>)
 80006e8:	f001 f9c8 	bl	8001a7c <HAL_RTC_GetTime>

	HAL_RTC_GetDate(&hrtc, &rDate, RTC_FORMAT_BIN);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <HAL_GPIO_EXTI_Callback+0x58>)
 80006f6:	f001 faa3 	bl	8001c40 <HAL_RTC_GetDate>

	printmsg("Current time is: %02d:%02d:%02d\r\n",rTime.Hours,rTime.Minutes,rTime.Seconds);
 80006fa:	7b3b      	ldrb	r3, [r7, #12]
 80006fc:	4619      	mov	r1, r3
 80006fe:	7b7b      	ldrb	r3, [r7, #13]
 8000700:	461a      	mov	r2, r3
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000706:	f7ff ff61 	bl	80005cc <printmsg>

	printmsg("Current Date is: %02d-%2d-%2d\r\n",rDate.Month,rDate.Date,rDate.Year);
 800070a:	7a7b      	ldrb	r3, [r7, #9]
 800070c:	4619      	mov	r1, r3
 800070e:	7abb      	ldrb	r3, [r7, #10]
 8000710:	461a      	mov	r2, r3
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <HAL_GPIO_EXTI_Callback+0x60>)
 8000716:	f7ff ff59 	bl	80005cc <printmsg>

	RTC_AlarmConfig();
 800071a:	f000 f88b 	bl	8000834 <RTC_AlarmConfig>


}
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d0 	.word	0x200000d0
 800072c:	08003398 	.word	0x08003398
 8000730:	080033bc 	.word	0x080033bc

08000734 <UART2_Init>:
void UART2_Init(void)  // High Level Init
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   huart2.Instance = USART2; //Linking handle with usart2
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <UART2_Init+0x44>)
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <UART2_Init+0x48>)
 800073c:	601a      	str	r2, [r3, #0]
   huart2.Init.BaudRate =  115200;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <UART2_Init+0x44>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <UART2_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
   huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <UART2_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
   huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <UART2_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <UART2_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
   huart2.Init.Mode = UART_MODE_TX_RX;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <UART2_Init+0x44>)
 8000760:	220c      	movs	r2, #12
 8000762:	615a      	str	r2, [r3, #20]

   if(HAL_UART_Init(&huart2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <UART2_Init+0x44>)
 8000766:	f001 fda2 	bl	80022ae <HAL_UART_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <UART2_Init+0x40>
   {
	     // There is a problem
	      Error_Handler();
 8000770:	f000 f806 	bl	8000780 <Error_Handler>
   }


}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000008c 	.word	0x2000008c
 800077c:	40004400 	.word	0x40004400

08000780 <Error_Handler>:

void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
   while(1);
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x4>
	...

08000788 <RTC_Init>:
}


void RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <RTC_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <RTC_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <RTC_Init+0x44>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 0x7F;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <RTC_Init+0x44>)
 800079a:	227f      	movs	r2, #127	; 0x7f
 800079c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 0xFF;  // SEND 255 TO MAKE IT 256
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <RTC_Init+0x44>)
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <RTC_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <RTC_Init+0x44>)
 80007ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <RTC_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

    if( HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <RTC_Init+0x44>)
 80007ba:	f001 f84f 	bl	800185c <HAL_RTC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <RTC_Init+0x40>
    {
    	Error_Handler();
 80007c4:	f7ff ffdc 	bl	8000780 <Error_Handler>

    }

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000d0 	.word	0x200000d0
 80007d0:	40002800 	.word	0x40002800

080007d4 <RTC_CalendarConfig>:
void RTC_CalendarConfig(void)  // Configures the calendar as 12:11:10 PM : 23 April 2023 Sunday
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    sTime.Hours =   12;
 80007da:	230c      	movs	r3, #12
 80007dc:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 11;
 80007de:	230b      	movs	r3, #11
 80007e0:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	71bb      	strb	r3, [r7, #6]
    sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80007e6:	2301      	movs	r3, #1
 80007e8:	71fb      	strb	r3, [r7, #7]

    if( HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <RTC_CalendarConfig+0x5c>)
 80007f2:	f001 f8a9 	bl	8001948 <HAL_RTC_SetTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <RTC_CalendarConfig+0x2c>
       {
       	Error_Handler();
 80007fc:	f7ff ffc0 	bl	8000780 <Error_Handler>

       }


	sDate.Date = 23;
 8000800:	2317      	movs	r3, #23
 8000802:	70bb      	strb	r3, [r7, #2]
	sDate.Month = RTC_MONTH_APRIL;
 8000804:	2304      	movs	r3, #4
 8000806:	707b      	strb	r3, [r7, #1]
	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000808:	2307      	movs	r3, #7
 800080a:	703b      	strb	r3, [r7, #0]
	sDate.Year = 23;
 800080c:	2317      	movs	r3, #23
 800080e:	70fb      	strb	r3, [r7, #3]

	 if( HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <RTC_CalendarConfig+0x5c>)
 8000818:	f001 f98e 	bl	8001b38 <HAL_RTC_SetDate>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <RTC_CalendarConfig+0x52>
	   {
	     Error_Handler();
 8000822:	f7ff ffad 	bl	8000780 <Error_Handler>

	   }

}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000d0 	.word	0x200000d0

08000834 <RTC_AlarmConfig>:
void RTC_AlarmConfig()  // xx:30:09
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
	   RTC_AlarmTypeDef sAlarm;

	   memset(&sAlarm,0,sizeof(sAlarm));
 800083a:	463b      	mov	r3, r7
 800083c:	2228      	movs	r2, #40	; 0x28
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f002 f91f 	bl	8002a84 <memset>

	   HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);
 8000846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <RTC_AlarmConfig+0x64>)
 800084c:	f001 fb8a 	bl	8001f64 <HAL_RTC_DeactivateAlarm>

	   sAlarm.Alarm = RTC_ALARM_B;
 8000850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	   sAlarm.AlarmTime.Hours = 12;
 8000856:	230c      	movs	r3, #12
 8000858:	703b      	strb	r3, [r7, #0]
	   sAlarm.AlarmTime.Minutes = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	707b      	strb	r3, [r7, #1]
	   sAlarm.AlarmTime.Seconds = 9;
 800085e:	2309      	movs	r3, #9
 8000860:	70bb      	strb	r3, [r7, #2]
	   sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000862:	2301      	movs	r3, #1
 8000864:	70fb      	strb	r3, [r7, #3]
	   sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY ;
 8000866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800086a:	617b      	str	r3, [r7, #20]
	   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800086c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000870:	61bb      	str	r3, [r7, #24]

	   if(HAL_RTC_SetAlarm_IT(&hrtc,&sAlarm,RTC_FORMAT_BIN)!= HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <RTC_AlarmConfig+0x64>)
 800087a:	f001 fa31 	bl	8001ce0 <HAL_RTC_SetAlarm_IT>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <RTC_AlarmConfig+0x54>
	   {
		    Error_Handler();
 8000884:	f7ff ff7c 	bl	8000780 <Error_Handler>

	   }
	   printmsg("ALARM SUCCESFULLY CONFIGURED\r\n");
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <RTC_AlarmConfig+0x68>)
 800088a:	f7ff fe9f 	bl	80005cc <printmsg>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000d0 	.word	0x200000d0
 800089c:	080033dc 	.word	0x080033dc

080008a0 <HAL_MspInit>:
#include "main.h"
#include "string.h"
#include "stdio.h"
extern void Error_Handler(void);
void HAL_MspInit(void)  // Low Level Processor Specific Inits
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

	//1-Setup the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 fa55 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>
	//2- Enable the required system exceptions of the arm cortex mx processor refer to cortex m user manuel
    SCB->SHCSR |= 0x7 << 16; // MEMFAULT BUSFAULT USG FAULT ENABLED
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x40>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <HAL_MspInit+0x40>)
 80008b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80008b4:	6253      	str	r3, [r2, #36]	; 0x24
	//3-Configure the priority for the system exceptions
    HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	f06f 000b 	mvn.w	r0, #11
 80008be:	f000 fa54 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	f06f 000a 	mvn.w	r0, #10
 80008ca:	f000 fa4e 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	f06f 0009 	mvn.w	r0, #9
 80008d6:	f000 fa48 	bl	8000d6a <HAL_NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart) // Low-Level Inits of the USART2 Peripheral
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
   	//1.Enable the clock for the USART2 peripheral
    __HAL_RCC_USART2_CLK_ENABLE(); // enabled the clock for USART2
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <HAL_UART_MspInit+0x88>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_UART_MspInit+0x88>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <HAL_UART_MspInit+0x88>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
     __HAL_RCC_GPIOA_CLK_ENABLE(); // enabled the clock for GPIOA
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0x88>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_UART_MspInit+0x88>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_UART_MspInit+0x88>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    //2.Do the pin muxing config
     GPIO_InitTypeDef GPIOInitStruct;
     GPIOInitStruct.Pin = GPIO_PIN_2;
 8000924:	2304      	movs	r3, #4
 8000926:	617b      	str	r3, [r7, #20]
     GPIOInitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
     GPIOInitStruct.Pull = GPIO_PULLUP; // Line must be up while communication is off
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
     GPIOInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
     GPIOInitStruct.Alternate = GPIO_AF7_USART2; //UART TX
 8000934:	2307      	movs	r3, #7
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(GPIOA,&GPIOInitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <HAL_UART_MspInit+0x8c>)
 8000940:	f000 fa56 	bl	8000df0 <HAL_GPIO_Init>

     GPIOInitStruct.Pin = GPIO_PIN_3; //UART RX
 8000944:	2308      	movs	r3, #8
 8000946:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOA,&GPIOInitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <HAL_UART_MspInit+0x8c>)
 8000950:	f000 fa4e 	bl	8000df0 <HAL_GPIO_Init>


	//3.Enable the IRQ and set up the priority (NVIC Settings)

     HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000954:	2026      	movs	r0, #38	; 0x26
 8000956:	f000 fa24 	bl	8000da2 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f000 fa03 	bl	8000d6a <HAL_NVIC_SetPriority>

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_RTC_MspInit>:
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct;      // OPEN LSE CLOCK
	memset(&RCC_OscInitStruct,0,sizeof(RCC_OscInitStruct));
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	2230      	movs	r2, #48	; 0x30
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 f87d 	bl	8002a84 <memset>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800098a:	2304      	movs	r3, #4
 800098c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800098e:	2301      	movs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct)!=HAL_OK)
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fbc4 	bl	8001128 <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_RTC_MspInit+0x36>
	  {

		  Error_Handler();
 80009a6:	f7ff feeb 	bl	8000780 <Error_Handler>
	  }

	 // SELECT LSE AS RTC CLOCK
	 RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

	 RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
	 RCC_PeriphCLKInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b2:	61bb      	str	r3, [r7, #24]
	 if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fe61 	bl	8001680 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_RTC_MspInit+0x54>
	 	  {

	 		  Error_Handler();
 80009c4:	f7ff fedc 	bl	8000780 <Error_Handler>
	 	  }

    // ENABLE THE RTC CLOCK
	 __HAL_RCC_RTC_ENABLE();
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_RTC_MspInit+0x74>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]

	 // ENABLE THE IRQ AND SET PRIORITY
     HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009ce:	2029      	movs	r0, #41	; 0x29
 80009d0:	f000 f9e7 	bl	8000da2 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority(RTC_Alarm_IRQn,13,0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	210d      	movs	r1, #13
 80009d8:	2029      	movs	r0, #41	; 0x29
 80009da:	f000 f9c6 	bl	8000d6a <HAL_NVIC_SetPriority>



}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	42470e3c 	.word	0x42470e3c

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 f808 	bl	8002a30 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20018000 	.word	0x20018000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200000f0 	.word	0x200000f0
 8000a54:	20000108 	.word	0x20000108

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a98:	4c0b      	ldr	r4, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa6:	f7ff ffd7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f001 ffc7 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fdb3 	bl	8000618 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ac0:	0800345c 	.word	0x0800345c
  ldr r2, =_sbss
 8000ac4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac8:	20000108 	.word	0x20000108

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f92b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fecc 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f943 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f90b 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	200000f4 	.word	0x200000f4

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000f4 	.word	0x200000f4

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff3e 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff31 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000dda:	f000 f802 	bl	8000de2 <HAL_SYSTICK_Callback>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e159      	b.n	80010c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8148 	bne.w	80010ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80a2 	beq.w	80010ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f92:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_GPIO_Init+0x2ec>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x2f0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x202>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2f4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x1fe>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_GPIO_Init+0x2f8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_GPIO_Init+0x2fc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x1f6>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a45      	ldr	r2, [pc, #276]	; (80010f0 <HAL_GPIO_Init+0x300>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x1f2>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x204>
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x204>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x204>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x204>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x204>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x2ec>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x304>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108a:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x304>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_GPIO_Init+0x304>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	f67f aea2 	bls.w	8000e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fada 	bl	80006d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40013c00 	.word	0x40013c00

08001128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e267      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d075      	beq.n	8001232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00c      	beq.n	800116c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001152:	4b85      	ldr	r3, [pc, #532]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d112      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116a:	d10b      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d05b      	beq.n	8001230 <HAL_RCC_OscConfig+0x108>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d157      	bne.n	8001230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e242      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x74>
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a75      	ldr	r2, [pc, #468]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e01d      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6f      	ldr	r2, [pc, #444]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6c      	ldr	r2, [pc, #432]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 80011c0:	4b69      	ldr	r3, [pc, #420]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a68      	ldr	r2, [pc, #416]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a65      	ldr	r2, [pc, #404]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcdc 	bl	8000b9c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fcd8 	bl	8000b9c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e207      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0xc0>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fcc8 	bl	8000b9c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fcc4 	bl	8000b9c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1f3      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0xe8>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d063      	beq.n	8001306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124a:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d11c      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b44      	ldr	r3, [pc, #272]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e1c7      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4937      	ldr	r1, [pc, #220]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	e03a      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x244>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fc7d 	bl	8000b9c <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc79 	bl	8000b9c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1a8      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4925      	ldr	r1, [pc, #148]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x244>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc5c 	bl	8000b9c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc58 	bl	8000b9c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e187      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d036      	beq.n	8001380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d016      	beq.n	8001348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_RCC_OscConfig+0x248>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fc3c 	bl	8000b9c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fc38 	bl	8000b9c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e167      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x240>)
 800133c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x200>
 8001346:	e01b      	b.n	8001380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_OscConfig+0x248>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fc25 	bl	8000b9c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	e00e      	b.n	8001374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fc21 	bl	8000b9c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d907      	bls.n	8001374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e150      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
 8001368:	40023800 	.word	0x40023800
 800136c:	42470000 	.word	0x42470000
 8001370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ea      	bne.n	8001356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8097 	beq.w	80014bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b81      	ldr	r3, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b7d      	ldr	r3, [pc, #500]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a7c      	ldr	r2, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b77      	ldr	r3, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x474>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <HAL_RCC_OscConfig+0x474>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a73      	ldr	r2, [pc, #460]	; (800159c <HAL_RCC_OscConfig+0x474>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbe1 	bl	8000b9c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fbdd 	bl	8000b9c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e10c      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <HAL_RCC_OscConfig+0x474>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x2ea>
 8001404:	4b64      	ldr	r3, [pc, #400]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a63      	ldr	r2, [pc, #396]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	e01c      	b.n	800144c <HAL_RCC_OscConfig+0x324>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x30c>
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	4a5e      	ldr	r2, [pc, #376]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6713      	str	r3, [r2, #112]	; 0x70
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6713      	str	r3, [r2, #112]	; 0x70
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0x324>
 8001434:	4b58      	ldr	r3, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a57      	ldr	r2, [pc, #348]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d015      	beq.n	8001480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fba2 	bl	8000b9c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb9e 	bl	8000b9c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0cb      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001472:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0ee      	beq.n	800145c <HAL_RCC_OscConfig+0x334>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fb8c 	bl	8000b9c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001486:	e00a      	b.n	800149e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff fb88 	bl	8000b9c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0b5      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ee      	bne.n	8001488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d105      	bne.n	80014bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80014b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a1 	beq.w	8001608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d05c      	beq.n	800158c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d141      	bne.n	800155e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb5c 	bl	8000b9c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fb58 	bl	8000b9c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e087      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	491b      	ldr	r1, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x478>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb31 	bl	8000b9c <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb2d 	bl	8000b9c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e05c      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x416>
 800155c:	e054      	b.n	8001608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x478>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fb1a 	bl	8000b9c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fb16 	bl	8000b9c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e045      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_RCC_OscConfig+0x470>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
 800158a:	e03d      	b.n	8001608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e038      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000
 80015a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x4ec>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d028      	beq.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d121      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d11a      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d4:	4013      	ands	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015dc:	4293      	cmp	r3, r2
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08003410 	.word	0x08003410

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffdc 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0b5b      	lsrs	r3, r3, #13
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	08003410 	.word	0x08003410

08001680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d035      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80016a8:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80016ae:	f7ff fa75 	bl	8000b9c <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80016b6:	f7ff fa71 	bl	8000b9c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0ba      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016c8:	4b60      	ldr	r3, [pc, #384]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	019a      	lsls	r2, r3, #6
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	071b      	lsls	r3, r3, #28
 80016e0:	495a      	ldr	r1, [pc, #360]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80016e8:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80016ee:	f7ff fa55 	bl	8000b9c <HAL_GetTick>
 80016f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80016f6:	f7ff fa51 	bl	8000b9c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e09a      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8083 	beq.w	8001828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a48      	ldr	r2, [pc, #288]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a43      	ldr	r2, [pc, #268]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800174a:	f7ff fa27 	bl	8000b9c <HAL_GetTick>
 800174e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff fa23 	bl	8000b9c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e06c      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d02f      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	429a      	cmp	r2, r3
 800178c:	d028      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d114      	bne.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f9f1 	bl	8000b9c <HAL_GetTick>
 80017ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9ed 	bl	8000b9c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e034      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017ec:	d10d      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001802:	4912      	ldr	r1, [pc, #72]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e005      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001810:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001814:	6093      	str	r3, [r2, #8]
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7c1a      	ldrb	r2, [r3, #16]
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800183a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	42470068 	.word	0x42470068
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000
 8001854:	42470e40 	.word	0x42470e40
 8001858:	424711e0 	.word	0x424711e0

0800185c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e066      	b.n	8001940 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f5b      	ldrb	r3, [r3, #29]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff f876 	bl	8000974 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22ca      	movs	r2, #202	; 0xca
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2253      	movs	r2, #83	; 0x53
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fc66 	bl	8002170 <RTC_EnterInitMode>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d12c      	bne.n	8001908 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80018bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68d2      	ldr	r2, [r2, #12]
 80018e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fc6d 	bl	80021de <RTC_ExitInitMode>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d113      	bne.n	8001936 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	22ff      	movs	r2, #255	; 0xff
 800193c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	7f1b      	ldrb	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_RTC_SetTime+0x1c>
 8001960:	2302      	movs	r3, #2
 8001962:	e087      	b.n	8001a74 <HAL_RTC_SetTime+0x12c>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d126      	bne.n	80019c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fc4a 	bl	8002228 <RTC_ByteToBcd2>
 8001994:	4603      	mov	r3, r0
 8001996:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fc43 	bl	8002228 <RTC_ByteToBcd2>
 80019a2:	4603      	mov	r3, r0
 80019a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80019a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fc3b 	bl	8002228 <RTC_ByteToBcd2>
 80019b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80019b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	78db      	ldrb	r3, [r3, #3]
 80019bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e018      	b.n	80019f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80019ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	22ca      	movs	r2, #202	; 0xca
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2253      	movs	r2, #83	; 0x53
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fbb2 	bl	8002170 <RTC_EnterInitMode>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001a10:	7cfb      	ldrb	r3, [r7, #19]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d120      	bne.n	8001a58 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001a20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001a24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fbc5 	bl	80021de <RTC_ExitInitMode>
 8001a54:	4603      	mov	r3, r0
 8001a56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001a58:	7cfb      	ldrb	r3, [r7, #19]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	22ff      	movs	r2, #255	; 0xff
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	771a      	strb	r2, [r3, #28]

  return status;
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001aae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	0d9b      	lsrs	r3, r3, #22
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fbb0 	bl	8002262 <RTC_Bcd2ToByte>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fba7 	bl	8002262 <RTC_Bcd2ToByte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	789b      	ldrb	r3, [r3, #2]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fb9e 	bl	8002262 <RTC_Bcd2ToByte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	7f1b      	ldrb	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_RTC_SetDate+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e071      	b.n	8001c38 <HAL_RTC_SetDate+0x100>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <HAL_RTC_SetDate+0x4c>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	f023 0310 	bic.w	r3, r3, #16
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	330a      	adds	r3, #10
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fb4a 	bl	8002228 <RTC_ByteToBcd2>
 8001b94:	4603      	mov	r3, r0
 8001b96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fb43 	bl	8002228 <RTC_ByteToBcd2>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001ba6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fb3b 	bl	8002228 <RTC_ByteToBcd2>
 8001bb2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001bb4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e00e      	b.n	8001be2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	78db      	ldrb	r3, [r3, #3]
 8001bc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	785b      	ldrb	r3, [r3, #1]
 8001bce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bd0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001bd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	22ca      	movs	r2, #202	; 0xca
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2253      	movs	r2, #83	; 0x53
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fabc 	bl	8002170 <RTC_EnterInitMode>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fae3 	bl	80021de <RTC_ExitInitMode>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001c1c:	7cfb      	ldrb	r3, [r7, #19]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	771a      	strb	r2, [r3, #28]

  return status;
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	78db      	ldrb	r3, [r3, #3]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fadd 	bl	8002262 <RTC_Bcd2ToByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fad4 	bl	8002262 <RTC_Bcd2ToByte>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	789b      	ldrb	r3, [r3, #2]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 facb 	bl	8002262 <RTC_Bcd2ToByte>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001cec:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <HAL_RTC_SetAlarm_IT+0x278>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9a      	ldr	r2, [pc, #616]	; (8001f5c <HAL_RTC_SetAlarm_IT+0x27c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_RTC_SetAlarm_IT+0x36>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e11c      	b.n	8001f50 <HAL_RTC_SetAlarm_IT+0x270>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d137      	bne.n	8001d98 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fa71 	bl	8002228 <RTC_ByteToBcd2>
 8001d46:	4603      	mov	r3, r0
 8001d48:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fa6a 	bl	8002228 <RTC_ByteToBcd2>
 8001d54:	4603      	mov	r3, r0
 8001d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d58:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	789b      	ldrb	r3, [r3, #2]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fa62 	bl	8002228 <RTC_ByteToBcd2>
 8001d64:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001d66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001d70:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fa54 	bl	8002228 <RTC_ByteToBcd2>
 8001d80:	4603      	mov	r3, r0
 8001d82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001d84:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001d8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e023      	b.n	8001de0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001db8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001dbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	78db      	ldrb	r3, [r3, #3]
 8001dc4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001dc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8001dd0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001dd6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	22ca      	movs	r2, #202	; 0xca
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2253      	movs	r2, #83	; 0x53
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e04:	d141      	bne.n	8001e8a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e14:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001e26:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	617a      	str	r2, [r7, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ff      	movs	r2, #255	; 0xff
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e082      	b.n	8001f50 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0e7      	beq.n	8001e28 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e04b      	b.n	8001f22 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e98:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001eaa:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RTC_SetAlarm_IT+0x278>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <HAL_RTC_SetAlarm_IT+0x27c>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0adb      	lsrs	r3, r3, #11
 8001eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	617a      	str	r2, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	22ff      	movs	r2, #255	; 0xff
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e035      	b.n	8001f50 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0e7      	beq.n	8001ec2 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f10:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f20:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_RTC_SetAlarm_IT+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_RTC_SetAlarm_IT+0x280>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RTC_SetAlarm_IT+0x280>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_RTC_SetAlarm_IT+0x280>)
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3724      	adds	r7, #36	; 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	10624dd3 	.word	0x10624dd3
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7f1b      	ldrb	r3, [r3, #28]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_RTC_DeactivateAlarm+0x1a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e07b      	b.n	8002076 <HAL_RTC_DeactivateAlarm+0x112>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22ca      	movs	r2, #202	; 0xca
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2253      	movs	r2, #83	; 0x53
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa0:	d12f      	bne.n	8002002 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc2:	f7fe fdeb 	bl	8000b9c <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001fc8:	e013      	b.n	8001ff2 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fca:	f7fe fde7 	bl	8000b9c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd8:	d90b      	bls.n	8001ff2 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e041      	b.n	8002076 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0e4      	beq.n	8001fca <HAL_RTC_DeactivateAlarm+0x66>
 8002000:	e02e      	b.n	8002060 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002010:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002020:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002022:	f7fe fdbb 	bl	8000b9c <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002028:	e013      	b.n	8002052 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800202a:	f7fe fdb7 	bl	8000b9c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002038:	d90b      	bls.n	8002052 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	22ff      	movs	r2, #255	; 0xff
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e011      	b.n	8002076 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0e4      	beq.n	800202a <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	22ff      	movs	r2, #255	; 0xff
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d012      	beq.n	80020bc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f831 	bl	800210c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80020ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8de 	bl	800229a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80020ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RTC_AlarmIRQHandler+0x88>)
 80020f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	775a      	strb	r2, [r3, #29]
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800213a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213c:	f7fe fd2e 	bl	8000b9c <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002142:	e009      	b.n	8002158 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002144:	f7fe fd2a 	bl	8000b9c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002152:	d901      	bls.n	8002158 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e007      	b.n	8002168 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d122      	bne.n	80021d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800219e:	f7fe fcfd 	bl	8000b9c <HAL_GetTick>
 80021a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021a4:	e00c      	b.n	80021c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021a6:	f7fe fcf9 	bl	8000b9c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b4:	d904      	bls.n	80021c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <RTC_EnterInitMode+0x64>
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d1e8      	bne.n	80021a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff89 	bl	8002120 <HAL_RTC_WaitForSynchro>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002236:	e005      	b.n	8002244 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3301      	adds	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	3b0a      	subs	r3, #10
 8002242:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d8f6      	bhi.n	8002238 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	b2da      	uxtb	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4313      	orrs	r3, r2
 8002254:	b2db      	uxtb	r3, r3
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	b2da      	uxtb	r2, r3
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	4413      	add	r3, r2
 800228c:	b2db      	uxtb	r3, r3
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e03f      	b.n	8002340 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fb05 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2224      	movs	r2, #36	; 0x24
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f928 	bl	8002548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002316:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002326:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b20      	cmp	r3, #32
 8002366:	d17c      	bne.n	8002462 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_UART_Transmit+0x2c>
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e075      	b.n	8002464 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_UART_Transmit+0x3e>
 8002382:	2302      	movs	r3, #2
 8002384:	e06e      	b.n	8002464 <HAL_UART_Transmit+0x11c>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800239c:	f7fe fbfe 	bl	8000b9c <HAL_GetTick>
 80023a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d108      	bne.n	80023ca <HAL_UART_Transmit+0x82>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e003      	b.n	80023d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023da:	e02a      	b.n	8002432 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f840 	bl	800246c <UART_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e036      	b.n	8002464 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	3302      	adds	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e007      	b.n	8002424 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1cf      	bne.n	80023dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f810 	bl	800246c <UART_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e006      	b.n	8002464 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b090      	sub	sp, #64	; 0x40
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247c:	e050      	b.n	8002520 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d04c      	beq.n	8002520 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <UART_WaitOnFlagUntilTimeout+0x30>
 800248c:	f7fe fb86 	bl	8000b9c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002498:	429a      	cmp	r2, r3
 800249a:	d241      	bcs.n	8002520 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	e853 3f00 	ldrex	r3, [r3]
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024bc:	637a      	str	r2, [r7, #52]	; 0x34
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e5      	bne.n	800249c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3314      	adds	r3, #20
 80024d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	e853 3f00 	ldrex	r3, [r3]
 80024de:	613b      	str	r3, [r7, #16]
   return(result);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f0:	623a      	str	r2, [r7, #32]
 80024f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	69f9      	ldr	r1, [r7, #28]
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e5      	bne.n	80024d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e00f      	b.n	8002540 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	429a      	cmp	r2, r3
 800253c:	d09f      	beq.n	800247e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3740      	adds	r7, #64	; 0x40
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b0c0      	sub	sp, #256	; 0x100
 800254e:	af00      	add	r7, sp, #0
 8002550:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	ea40 0301 	orr.w	r3, r0, r1
 8002570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a0:	f021 010c 	bic.w	r1, r1, #12
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ae:	430b      	orrs	r3, r1
 80025b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	6999      	ldr	r1, [r3, #24]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	ea40 0301 	orr.w	r3, r0, r1
 80025ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <UART_SetConfig+0x2cc>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d005      	beq.n	80025e8 <UART_SetConfig+0xa0>
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <UART_SetConfig+0x2d0>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d104      	bne.n	80025f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e8:	f7ff f836 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 80025ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025f0:	e003      	b.n	80025fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f2:	f7ff f81d 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 80025f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002604:	f040 810c 	bne.w	8002820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002612:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	1891      	adds	r1, r2, r2
 8002620:	65b9      	str	r1, [r7, #88]	; 0x58
 8002622:	415b      	adcs	r3, r3
 8002624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800262a:	4621      	mov	r1, r4
 800262c:	eb12 0801 	adds.w	r8, r2, r1
 8002630:	4629      	mov	r1, r5
 8002632:	eb43 0901 	adc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002658:	462b      	mov	r3, r5
 800265a:	eb49 0303 	adc.w	r3, r9, r3
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800266e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002676:	460b      	mov	r3, r1
 8002678:	18db      	adds	r3, r3, r3
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
 800267c:	4613      	mov	r3, r2
 800267e:	eb42 0303 	adc.w	r3, r2, r3
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
 8002684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800268c:	f7fd fe00 	bl	8000290 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <UART_SetConfig+0x2d4>)
 8002696:	fba3 2302 	umull	r2, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	011c      	lsls	r4, r3, #4
 800269e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	1891      	adds	r1, r2, r2
 80026b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80026b8:	415b      	adcs	r3, r3
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c0:	4641      	mov	r1, r8
 80026c2:	eb12 0a01 	adds.w	sl, r2, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	eb43 0b01 	adc.w	fp, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e0:	4692      	mov	sl, r2
 80026e2:	469b      	mov	fp, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	eb1a 0303 	adds.w	r3, sl, r3
 80026ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb4b 0303 	adc.w	r3, fp, r3
 80026f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002704:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800270c:	460b      	mov	r3, r1
 800270e:	18db      	adds	r3, r3, r3
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
 8002712:	4613      	mov	r3, r2
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
 800271a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800271e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002722:	f7fd fdb5 	bl	8000290 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4611      	mov	r1, r2
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <UART_SetConfig+0x2d4>)
 800272e:	fba3 2301 	umull	r2, r3, r3, r1
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2264      	movs	r2, #100	; 0x64
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	1acb      	subs	r3, r1, r3
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <UART_SetConfig+0x2d4>)
 8002744:	fba3 2302 	umull	r2, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002750:	441c      	add	r4, r3
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800275c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	63b9      	str	r1, [r7, #56]	; 0x38
 800276c:	415b      	adcs	r3, r3
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6339      	str	r1, [r7, #48]	; 0x30
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027c8:	460b      	mov	r3, r1
 80027ca:	18db      	adds	r3, r3, r3
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	4613      	mov	r3, r2
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027de:	f7fd fd57 	bl	8000290 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <UART_SetConfig+0x2d4>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	3332      	adds	r3, #50	; 0x32
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <UART_SetConfig+0x2d4>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4422      	add	r2, r4
 800280e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002810:	e105      	b.n	8002a1e <UART_SetConfig+0x4d6>
 8002812:	bf00      	nop
 8002814:	40011000 	.word	0x40011000
 8002818:	40011400 	.word	0x40011400
 800281c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002824:	2200      	movs	r2, #0
 8002826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800282a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800282e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	1891      	adds	r1, r2, r2
 8002838:	6239      	str	r1, [r7, #32]
 800283a:	415b      	adcs	r3, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002842:	4641      	mov	r1, r8
 8002844:	1854      	adds	r4, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb43 0501 	adc.w	r5, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	00eb      	lsls	r3, r5, #3
 8002856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285a:	00e2      	lsls	r2, r4, #3
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	4643      	mov	r3, r8
 8002862:	18e3      	adds	r3, r4, r3
 8002864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002868:	464b      	mov	r3, r9
 800286a:	eb45 0303 	adc.w	r3, r5, r3
 800286e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800287e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800288e:	4629      	mov	r1, r5
 8002890:	008b      	lsls	r3, r1, #2
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002898:	4621      	mov	r1, r4
 800289a:	008a      	lsls	r2, r1, #2
 800289c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028a0:	f7fd fcf6 	bl	8000290 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <UART_SetConfig+0x4e4>)
 80028aa:	fba3 2302 	umull	r2, r3, r3, r2
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	011c      	lsls	r4, r3, #4
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	61b9      	str	r1, [r7, #24]
 80028cc:	415b      	adcs	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	4641      	mov	r1, r8
 80028d6:	1851      	adds	r1, r2, r1
 80028d8:	6139      	str	r1, [r7, #16]
 80028da:	4649      	mov	r1, r9
 80028dc:	414b      	adcs	r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	00cb      	lsls	r3, r1, #3
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f6:	4651      	mov	r1, sl
 80028f8:	00ca      	lsls	r2, r1, #3
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	4642      	mov	r2, r8
 8002902:	189b      	adds	r3, r3, r2
 8002904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002908:	464b      	mov	r3, r9
 800290a:	460a      	mov	r2, r1
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
 800291e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800292c:	4649      	mov	r1, r9
 800292e:	008b      	lsls	r3, r1, #2
 8002930:	4641      	mov	r1, r8
 8002932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002936:	4641      	mov	r1, r8
 8002938:	008a      	lsls	r2, r1, #2
 800293a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800293e:	f7fd fca7 	bl	8000290 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <UART_SetConfig+0x4e4>)
 8002948:	fba3 1302 	umull	r1, r3, r3, r2
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	2164      	movs	r1, #100	; 0x64
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	3332      	adds	r3, #50	; 0x32
 800295a:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <UART_SetConfig+0x4e4>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002966:	441c      	add	r4, r3
 8002968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296c:	2200      	movs	r2, #0
 800296e:	673b      	str	r3, [r7, #112]	; 0x70
 8002970:	677a      	str	r2, [r7, #116]	; 0x74
 8002972:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002976:	4642      	mov	r2, r8
 8002978:	464b      	mov	r3, r9
 800297a:	1891      	adds	r1, r2, r2
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	415b      	adcs	r3, r3
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002986:	4641      	mov	r1, r8
 8002988:	1851      	adds	r1, r2, r1
 800298a:	6039      	str	r1, [r7, #0]
 800298c:	4649      	mov	r1, r9
 800298e:	414b      	adcs	r3, r1
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800299e:	4659      	mov	r1, fp
 80029a0:	00cb      	lsls	r3, r1, #3
 80029a2:	4651      	mov	r1, sl
 80029a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a8:	4651      	mov	r1, sl
 80029aa:	00ca      	lsls	r2, r1, #3
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	4642      	mov	r2, r8
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b8:	464b      	mov	r3, r9
 80029ba:	460a      	mov	r2, r1
 80029bc:	eb42 0303 	adc.w	r3, r2, r3
 80029c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	663b      	str	r3, [r7, #96]	; 0x60
 80029cc:	667a      	str	r2, [r7, #100]	; 0x64
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029da:	4649      	mov	r1, r9
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	4641      	mov	r1, r8
 80029e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e4:	4641      	mov	r1, r8
 80029e6:	008a      	lsls	r2, r1, #2
 80029e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029ec:	f7fd fc50 	bl	8000290 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <UART_SetConfig+0x4e4>)
 80029f6:	fba3 1302 	umull	r1, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	3332      	adds	r3, #50	; 0x32
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <UART_SetConfig+0x4e4>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4422      	add	r2, r4
 8002a1c:	609a      	str	r2, [r3, #8]
}
 8002a1e:	bf00      	nop
 8002a20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <__errno>:
 8002a30:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <__errno+0x8>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	4d0d      	ldr	r5, [pc, #52]	; (8002a74 <__libc_init_array+0x38>)
 8002a40:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a42:	1b64      	subs	r4, r4, r5
 8002a44:	10a4      	asrs	r4, r4, #2
 8002a46:	2600      	movs	r6, #0
 8002a48:	42a6      	cmp	r6, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	4d0b      	ldr	r5, [pc, #44]	; (8002a7c <__libc_init_array+0x40>)
 8002a4e:	4c0c      	ldr	r4, [pc, #48]	; (8002a80 <__libc_init_array+0x44>)
 8002a50:	f000 fc8e 	bl	8003370 <_init>
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	2600      	movs	r6, #0
 8002a5a:	42a6      	cmp	r6, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a64:	4798      	blx	r3
 8002a66:	3601      	adds	r6, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6e:	4798      	blx	r3
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08003454 	.word	0x08003454
 8002a78:	08003454 	.word	0x08003454
 8002a7c:	08003454 	.word	0x08003454
 8002a80:	08003458 	.word	0x08003458

08002a84 <memset>:
 8002a84:	4402      	add	r2, r0
 8002a86:	4603      	mov	r3, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <_vsiprintf_r>:
 8002a94:	b500      	push	{lr}
 8002a96:	b09b      	sub	sp, #108	; 0x6c
 8002a98:	9100      	str	r1, [sp, #0]
 8002a9a:	9104      	str	r1, [sp, #16]
 8002a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aa0:	9105      	str	r1, [sp, #20]
 8002aa2:	9102      	str	r1, [sp, #8]
 8002aa4:	4905      	ldr	r1, [pc, #20]	; (8002abc <_vsiprintf_r+0x28>)
 8002aa6:	9103      	str	r1, [sp, #12]
 8002aa8:	4669      	mov	r1, sp
 8002aaa:	f000 f86f 	bl	8002b8c <_svfiprintf_r>
 8002aae:	9b00      	ldr	r3, [sp, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	b01b      	add	sp, #108	; 0x6c
 8002ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aba:	bf00      	nop
 8002abc:	ffff0208 	.word	0xffff0208

08002ac0 <vsiprintf>:
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <vsiprintf+0x10>)
 8002ac8:	6800      	ldr	r0, [r0, #0]
 8002aca:	f7ff bfe3 	b.w	8002a94 <_vsiprintf_r>
 8002ace:	bf00      	nop
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <__ssputs_r>:
 8002ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	688e      	ldr	r6, [r1, #8]
 8002ada:	429e      	cmp	r6, r3
 8002adc:	4682      	mov	sl, r0
 8002ade:	460c      	mov	r4, r1
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	461f      	mov	r7, r3
 8002ae4:	d838      	bhi.n	8002b58 <__ssputs_r+0x84>
 8002ae6:	898a      	ldrh	r2, [r1, #12]
 8002ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002aec:	d032      	beq.n	8002b54 <__ssputs_r+0x80>
 8002aee:	6825      	ldr	r5, [r4, #0]
 8002af0:	6909      	ldr	r1, [r1, #16]
 8002af2:	eba5 0901 	sub.w	r9, r5, r1
 8002af6:	6965      	ldr	r5, [r4, #20]
 8002af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002afc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b00:	3301      	adds	r3, #1
 8002b02:	444b      	add	r3, r9
 8002b04:	106d      	asrs	r5, r5, #1
 8002b06:	429d      	cmp	r5, r3
 8002b08:	bf38      	it	cc
 8002b0a:	461d      	movcc	r5, r3
 8002b0c:	0553      	lsls	r3, r2, #21
 8002b0e:	d531      	bpl.n	8002b74 <__ssputs_r+0xa0>
 8002b10:	4629      	mov	r1, r5
 8002b12:	f000 fb63 	bl	80031dc <_malloc_r>
 8002b16:	4606      	mov	r6, r0
 8002b18:	b950      	cbnz	r0, 8002b30 <__ssputs_r+0x5c>
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	f8ca 3000 	str.w	r3, [sl]
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	6921      	ldr	r1, [r4, #16]
 8002b32:	464a      	mov	r2, r9
 8002b34:	f000 fabe 	bl	80030b4 <memcpy>
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b42:	81a3      	strh	r3, [r4, #12]
 8002b44:	6126      	str	r6, [r4, #16]
 8002b46:	6165      	str	r5, [r4, #20]
 8002b48:	444e      	add	r6, r9
 8002b4a:	eba5 0509 	sub.w	r5, r5, r9
 8002b4e:	6026      	str	r6, [r4, #0]
 8002b50:	60a5      	str	r5, [r4, #8]
 8002b52:	463e      	mov	r6, r7
 8002b54:	42be      	cmp	r6, r7
 8002b56:	d900      	bls.n	8002b5a <__ssputs_r+0x86>
 8002b58:	463e      	mov	r6, r7
 8002b5a:	6820      	ldr	r0, [r4, #0]
 8002b5c:	4632      	mov	r2, r6
 8002b5e:	4641      	mov	r1, r8
 8002b60:	f000 fab6 	bl	80030d0 <memmove>
 8002b64:	68a3      	ldr	r3, [r4, #8]
 8002b66:	1b9b      	subs	r3, r3, r6
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	4433      	add	r3, r6
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	2000      	movs	r0, #0
 8002b72:	e7db      	b.n	8002b2c <__ssputs_r+0x58>
 8002b74:	462a      	mov	r2, r5
 8002b76:	f000 fba5 	bl	80032c4 <_realloc_r>
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1e1      	bne.n	8002b44 <__ssputs_r+0x70>
 8002b80:	6921      	ldr	r1, [r4, #16]
 8002b82:	4650      	mov	r0, sl
 8002b84:	f000 fabe 	bl	8003104 <_free_r>
 8002b88:	e7c7      	b.n	8002b1a <__ssputs_r+0x46>
	...

08002b8c <_svfiprintf_r>:
 8002b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b90:	4698      	mov	r8, r3
 8002b92:	898b      	ldrh	r3, [r1, #12]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	b09d      	sub	sp, #116	; 0x74
 8002b98:	4607      	mov	r7, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	d50e      	bpl.n	8002bbe <_svfiprintf_r+0x32>
 8002ba0:	690b      	ldr	r3, [r1, #16]
 8002ba2:	b963      	cbnz	r3, 8002bbe <_svfiprintf_r+0x32>
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	f000 fb19 	bl	80031dc <_malloc_r>
 8002baa:	6028      	str	r0, [r5, #0]
 8002bac:	6128      	str	r0, [r5, #16]
 8002bae:	b920      	cbnz	r0, 8002bba <_svfiprintf_r+0x2e>
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	e0d1      	b.n	8002d5e <_svfiprintf_r+0x1d2>
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	616b      	str	r3, [r5, #20]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bcc:	2330      	movs	r3, #48	; 0x30
 8002bce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002d78 <_svfiprintf_r+0x1ec>
 8002bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bd6:	f04f 0901 	mov.w	r9, #1
 8002bda:	4623      	mov	r3, r4
 8002bdc:	469a      	mov	sl, r3
 8002bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002be2:	b10a      	cbz	r2, 8002be8 <_svfiprintf_r+0x5c>
 8002be4:	2a25      	cmp	r2, #37	; 0x25
 8002be6:	d1f9      	bne.n	8002bdc <_svfiprintf_r+0x50>
 8002be8:	ebba 0b04 	subs.w	fp, sl, r4
 8002bec:	d00b      	beq.n	8002c06 <_svfiprintf_r+0x7a>
 8002bee:	465b      	mov	r3, fp
 8002bf0:	4622      	mov	r2, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	4638      	mov	r0, r7
 8002bf6:	f7ff ff6d 	bl	8002ad4 <__ssputs_r>
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	f000 80aa 	beq.w	8002d54 <_svfiprintf_r+0x1c8>
 8002c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c02:	445a      	add	r2, fp
 8002c04:	9209      	str	r2, [sp, #36]	; 0x24
 8002c06:	f89a 3000 	ldrb.w	r3, [sl]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80a2 	beq.w	8002d54 <_svfiprintf_r+0x1c8>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f04f 32ff 	mov.w	r2, #4294967295
 8002c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c1a:	f10a 0a01 	add.w	sl, sl, #1
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	9307      	str	r3, [sp, #28]
 8002c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c26:	931a      	str	r3, [sp, #104]	; 0x68
 8002c28:	4654      	mov	r4, sl
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c30:	4851      	ldr	r0, [pc, #324]	; (8002d78 <_svfiprintf_r+0x1ec>)
 8002c32:	f7fd fadd 	bl	80001f0 <memchr>
 8002c36:	9a04      	ldr	r2, [sp, #16]
 8002c38:	b9d8      	cbnz	r0, 8002c72 <_svfiprintf_r+0xe6>
 8002c3a:	06d0      	lsls	r0, r2, #27
 8002c3c:	bf44      	itt	mi
 8002c3e:	2320      	movmi	r3, #32
 8002c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c44:	0711      	lsls	r1, r2, #28
 8002c46:	bf44      	itt	mi
 8002c48:	232b      	movmi	r3, #43	; 0x2b
 8002c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c52:	2b2a      	cmp	r3, #42	; 0x2a
 8002c54:	d015      	beq.n	8002c82 <_svfiprintf_r+0xf6>
 8002c56:	9a07      	ldr	r2, [sp, #28]
 8002c58:	4654      	mov	r4, sl
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f04f 0c0a 	mov.w	ip, #10
 8002c60:	4621      	mov	r1, r4
 8002c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c66:	3b30      	subs	r3, #48	; 0x30
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d94e      	bls.n	8002d0a <_svfiprintf_r+0x17e>
 8002c6c:	b1b0      	cbz	r0, 8002c9c <_svfiprintf_r+0x110>
 8002c6e:	9207      	str	r2, [sp, #28]
 8002c70:	e014      	b.n	8002c9c <_svfiprintf_r+0x110>
 8002c72:	eba0 0308 	sub.w	r3, r0, r8
 8002c76:	fa09 f303 	lsl.w	r3, r9, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	9304      	str	r3, [sp, #16]
 8002c7e:	46a2      	mov	sl, r4
 8002c80:	e7d2      	b.n	8002c28 <_svfiprintf_r+0x9c>
 8002c82:	9b03      	ldr	r3, [sp, #12]
 8002c84:	1d19      	adds	r1, r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	9103      	str	r1, [sp, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfbb      	ittet	lt
 8002c8e:	425b      	neglt	r3, r3
 8002c90:	f042 0202 	orrlt.w	r2, r2, #2
 8002c94:	9307      	strge	r3, [sp, #28]
 8002c96:	9307      	strlt	r3, [sp, #28]
 8002c98:	bfb8      	it	lt
 8002c9a:	9204      	strlt	r2, [sp, #16]
 8002c9c:	7823      	ldrb	r3, [r4, #0]
 8002c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca0:	d10c      	bne.n	8002cbc <_svfiprintf_r+0x130>
 8002ca2:	7863      	ldrb	r3, [r4, #1]
 8002ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca6:	d135      	bne.n	8002d14 <_svfiprintf_r+0x188>
 8002ca8:	9b03      	ldr	r3, [sp, #12]
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	9203      	str	r2, [sp, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb8      	it	lt
 8002cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cb8:	3402      	adds	r4, #2
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d88 <_svfiprintf_r+0x1fc>
 8002cc0:	7821      	ldrb	r1, [r4, #0]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4650      	mov	r0, sl
 8002cc6:	f7fd fa93 	bl	80001f0 <memchr>
 8002cca:	b140      	cbz	r0, 8002cde <_svfiprintf_r+0x152>
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	eba0 000a 	sub.w	r0, r0, sl
 8002cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8002cd6:	9b04      	ldr	r3, [sp, #16]
 8002cd8:	4303      	orrs	r3, r0
 8002cda:	3401      	adds	r4, #1
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce2:	4826      	ldr	r0, [pc, #152]	; (8002d7c <_svfiprintf_r+0x1f0>)
 8002ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ce8:	2206      	movs	r2, #6
 8002cea:	f7fd fa81 	bl	80001f0 <memchr>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d038      	beq.n	8002d64 <_svfiprintf_r+0x1d8>
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <_svfiprintf_r+0x1f4>)
 8002cf4:	bb1b      	cbnz	r3, 8002d3e <_svfiprintf_r+0x1b2>
 8002cf6:	9b03      	ldr	r3, [sp, #12]
 8002cf8:	3307      	adds	r3, #7
 8002cfa:	f023 0307 	bic.w	r3, r3, #7
 8002cfe:	3308      	adds	r3, #8
 8002d00:	9303      	str	r3, [sp, #12]
 8002d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d04:	4433      	add	r3, r6
 8002d06:	9309      	str	r3, [sp, #36]	; 0x24
 8002d08:	e767      	b.n	8002bda <_svfiprintf_r+0x4e>
 8002d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d0e:	460c      	mov	r4, r1
 8002d10:	2001      	movs	r0, #1
 8002d12:	e7a5      	b.n	8002c60 <_svfiprintf_r+0xd4>
 8002d14:	2300      	movs	r3, #0
 8002d16:	3401      	adds	r4, #1
 8002d18:	9305      	str	r3, [sp, #20]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f04f 0c0a 	mov.w	ip, #10
 8002d20:	4620      	mov	r0, r4
 8002d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d26:	3a30      	subs	r2, #48	; 0x30
 8002d28:	2a09      	cmp	r2, #9
 8002d2a:	d903      	bls.n	8002d34 <_svfiprintf_r+0x1a8>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0c5      	beq.n	8002cbc <_svfiprintf_r+0x130>
 8002d30:	9105      	str	r1, [sp, #20]
 8002d32:	e7c3      	b.n	8002cbc <_svfiprintf_r+0x130>
 8002d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d38:	4604      	mov	r4, r0
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e7f0      	b.n	8002d20 <_svfiprintf_r+0x194>
 8002d3e:	ab03      	add	r3, sp, #12
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	462a      	mov	r2, r5
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <_svfiprintf_r+0x1f8>)
 8002d46:	a904      	add	r1, sp, #16
 8002d48:	4638      	mov	r0, r7
 8002d4a:	f3af 8000 	nop.w
 8002d4e:	1c42      	adds	r2, r0, #1
 8002d50:	4606      	mov	r6, r0
 8002d52:	d1d6      	bne.n	8002d02 <_svfiprintf_r+0x176>
 8002d54:	89ab      	ldrh	r3, [r5, #12]
 8002d56:	065b      	lsls	r3, r3, #25
 8002d58:	f53f af2c 	bmi.w	8002bb4 <_svfiprintf_r+0x28>
 8002d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d5e:	b01d      	add	sp, #116	; 0x74
 8002d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d64:	ab03      	add	r3, sp, #12
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	462a      	mov	r2, r5
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <_svfiprintf_r+0x1f8>)
 8002d6c:	a904      	add	r1, sp, #16
 8002d6e:	4638      	mov	r0, r7
 8002d70:	f000 f87a 	bl	8002e68 <_printf_i>
 8002d74:	e7eb      	b.n	8002d4e <_svfiprintf_r+0x1c2>
 8002d76:	bf00      	nop
 8002d78:	08003418 	.word	0x08003418
 8002d7c:	08003422 	.word	0x08003422
 8002d80:	00000000 	.word	0x00000000
 8002d84:	08002ad5 	.word	0x08002ad5
 8002d88:	0800341e 	.word	0x0800341e

08002d8c <_printf_common>:
 8002d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	4616      	mov	r6, r2
 8002d92:	4699      	mov	r9, r3
 8002d94:	688a      	ldr	r2, [r1, #8]
 8002d96:	690b      	ldr	r3, [r1, #16]
 8002d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bfb8      	it	lt
 8002da0:	4613      	movlt	r3, r2
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002da8:	4607      	mov	r7, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	b10a      	cbz	r2, 8002db2 <_printf_common+0x26>
 8002dae:	3301      	adds	r3, #1
 8002db0:	6033      	str	r3, [r6, #0]
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	0699      	lsls	r1, r3, #26
 8002db6:	bf42      	ittt	mi
 8002db8:	6833      	ldrmi	r3, [r6, #0]
 8002dba:	3302      	addmi	r3, #2
 8002dbc:	6033      	strmi	r3, [r6, #0]
 8002dbe:	6825      	ldr	r5, [r4, #0]
 8002dc0:	f015 0506 	ands.w	r5, r5, #6
 8002dc4:	d106      	bne.n	8002dd4 <_printf_common+0x48>
 8002dc6:	f104 0a19 	add.w	sl, r4, #25
 8002dca:	68e3      	ldr	r3, [r4, #12]
 8002dcc:	6832      	ldr	r2, [r6, #0]
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	42ab      	cmp	r3, r5
 8002dd2:	dc26      	bgt.n	8002e22 <_printf_common+0x96>
 8002dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dd8:	1e13      	subs	r3, r2, #0
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	bf18      	it	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	0692      	lsls	r2, r2, #26
 8002de2:	d42b      	bmi.n	8002e3c <_printf_common+0xb0>
 8002de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002de8:	4649      	mov	r1, r9
 8002dea:	4638      	mov	r0, r7
 8002dec:	47c0      	blx	r8
 8002dee:	3001      	adds	r0, #1
 8002df0:	d01e      	beq.n	8002e30 <_printf_common+0xa4>
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	68e5      	ldr	r5, [r4, #12]
 8002df6:	6832      	ldr	r2, [r6, #0]
 8002df8:	f003 0306 	and.w	r3, r3, #6
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	bf08      	it	eq
 8002e00:	1aad      	subeq	r5, r5, r2
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	6922      	ldr	r2, [r4, #16]
 8002e06:	bf0c      	ite	eq
 8002e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e0c:	2500      	movne	r5, #0
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	bfc4      	itt	gt
 8002e12:	1a9b      	subgt	r3, r3, r2
 8002e14:	18ed      	addgt	r5, r5, r3
 8002e16:	2600      	movs	r6, #0
 8002e18:	341a      	adds	r4, #26
 8002e1a:	42b5      	cmp	r5, r6
 8002e1c:	d11a      	bne.n	8002e54 <_printf_common+0xc8>
 8002e1e:	2000      	movs	r0, #0
 8002e20:	e008      	b.n	8002e34 <_printf_common+0xa8>
 8002e22:	2301      	movs	r3, #1
 8002e24:	4652      	mov	r2, sl
 8002e26:	4649      	mov	r1, r9
 8002e28:	4638      	mov	r0, r7
 8002e2a:	47c0      	blx	r8
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d103      	bne.n	8002e38 <_printf_common+0xac>
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e38:	3501      	adds	r5, #1
 8002e3a:	e7c6      	b.n	8002dca <_printf_common+0x3e>
 8002e3c:	18e1      	adds	r1, r4, r3
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	2030      	movs	r0, #48	; 0x30
 8002e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e46:	4422      	add	r2, r4
 8002e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e50:	3302      	adds	r3, #2
 8002e52:	e7c7      	b.n	8002de4 <_printf_common+0x58>
 8002e54:	2301      	movs	r3, #1
 8002e56:	4622      	mov	r2, r4
 8002e58:	4649      	mov	r1, r9
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	47c0      	blx	r8
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d0e6      	beq.n	8002e30 <_printf_common+0xa4>
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7d9      	b.n	8002e1a <_printf_common+0x8e>
	...

08002e68 <_printf_i>:
 8002e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	7e0f      	ldrb	r7, [r1, #24]
 8002e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e70:	2f78      	cmp	r7, #120	; 0x78
 8002e72:	4691      	mov	r9, r2
 8002e74:	4680      	mov	r8, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	469a      	mov	sl, r3
 8002e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e7e:	d807      	bhi.n	8002e90 <_printf_i+0x28>
 8002e80:	2f62      	cmp	r7, #98	; 0x62
 8002e82:	d80a      	bhi.n	8002e9a <_printf_i+0x32>
 8002e84:	2f00      	cmp	r7, #0
 8002e86:	f000 80d8 	beq.w	800303a <_printf_i+0x1d2>
 8002e8a:	2f58      	cmp	r7, #88	; 0x58
 8002e8c:	f000 80a3 	beq.w	8002fd6 <_printf_i+0x16e>
 8002e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e98:	e03a      	b.n	8002f10 <_printf_i+0xa8>
 8002e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e9e:	2b15      	cmp	r3, #21
 8002ea0:	d8f6      	bhi.n	8002e90 <_printf_i+0x28>
 8002ea2:	a101      	add	r1, pc, #4	; (adr r1, 8002ea8 <_printf_i+0x40>)
 8002ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ea8:	08002f01 	.word	0x08002f01
 8002eac:	08002f15 	.word	0x08002f15
 8002eb0:	08002e91 	.word	0x08002e91
 8002eb4:	08002e91 	.word	0x08002e91
 8002eb8:	08002e91 	.word	0x08002e91
 8002ebc:	08002e91 	.word	0x08002e91
 8002ec0:	08002f15 	.word	0x08002f15
 8002ec4:	08002e91 	.word	0x08002e91
 8002ec8:	08002e91 	.word	0x08002e91
 8002ecc:	08002e91 	.word	0x08002e91
 8002ed0:	08002e91 	.word	0x08002e91
 8002ed4:	08003021 	.word	0x08003021
 8002ed8:	08002f45 	.word	0x08002f45
 8002edc:	08003003 	.word	0x08003003
 8002ee0:	08002e91 	.word	0x08002e91
 8002ee4:	08002e91 	.word	0x08002e91
 8002ee8:	08003043 	.word	0x08003043
 8002eec:	08002e91 	.word	0x08002e91
 8002ef0:	08002f45 	.word	0x08002f45
 8002ef4:	08002e91 	.word	0x08002e91
 8002ef8:	08002e91 	.word	0x08002e91
 8002efc:	0800300b 	.word	0x0800300b
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	1d1a      	adds	r2, r3, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	602a      	str	r2, [r5, #0]
 8002f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0a3      	b.n	800305c <_printf_i+0x1f4>
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	6829      	ldr	r1, [r5, #0]
 8002f18:	0606      	lsls	r6, r0, #24
 8002f1a:	f101 0304 	add.w	r3, r1, #4
 8002f1e:	d50a      	bpl.n	8002f36 <_printf_i+0xce>
 8002f20:	680e      	ldr	r6, [r1, #0]
 8002f22:	602b      	str	r3, [r5, #0]
 8002f24:	2e00      	cmp	r6, #0
 8002f26:	da03      	bge.n	8002f30 <_printf_i+0xc8>
 8002f28:	232d      	movs	r3, #45	; 0x2d
 8002f2a:	4276      	negs	r6, r6
 8002f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f30:	485e      	ldr	r0, [pc, #376]	; (80030ac <_printf_i+0x244>)
 8002f32:	230a      	movs	r3, #10
 8002f34:	e019      	b.n	8002f6a <_printf_i+0x102>
 8002f36:	680e      	ldr	r6, [r1, #0]
 8002f38:	602b      	str	r3, [r5, #0]
 8002f3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f3e:	bf18      	it	ne
 8002f40:	b236      	sxthne	r6, r6
 8002f42:	e7ef      	b.n	8002f24 <_printf_i+0xbc>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	6820      	ldr	r0, [r4, #0]
 8002f48:	1d19      	adds	r1, r3, #4
 8002f4a:	6029      	str	r1, [r5, #0]
 8002f4c:	0601      	lsls	r1, r0, #24
 8002f4e:	d501      	bpl.n	8002f54 <_printf_i+0xec>
 8002f50:	681e      	ldr	r6, [r3, #0]
 8002f52:	e002      	b.n	8002f5a <_printf_i+0xf2>
 8002f54:	0646      	lsls	r6, r0, #25
 8002f56:	d5fb      	bpl.n	8002f50 <_printf_i+0xe8>
 8002f58:	881e      	ldrh	r6, [r3, #0]
 8002f5a:	4854      	ldr	r0, [pc, #336]	; (80030ac <_printf_i+0x244>)
 8002f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f5e:	bf0c      	ite	eq
 8002f60:	2308      	moveq	r3, #8
 8002f62:	230a      	movne	r3, #10
 8002f64:	2100      	movs	r1, #0
 8002f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f6a:	6865      	ldr	r5, [r4, #4]
 8002f6c:	60a5      	str	r5, [r4, #8]
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	bfa2      	ittt	ge
 8002f72:	6821      	ldrge	r1, [r4, #0]
 8002f74:	f021 0104 	bicge.w	r1, r1, #4
 8002f78:	6021      	strge	r1, [r4, #0]
 8002f7a:	b90e      	cbnz	r6, 8002f80 <_printf_i+0x118>
 8002f7c:	2d00      	cmp	r5, #0
 8002f7e:	d04d      	beq.n	800301c <_printf_i+0x1b4>
 8002f80:	4615      	mov	r5, r2
 8002f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f86:	fb03 6711 	mls	r7, r3, r1, r6
 8002f8a:	5dc7      	ldrb	r7, [r0, r7]
 8002f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f90:	4637      	mov	r7, r6
 8002f92:	42bb      	cmp	r3, r7
 8002f94:	460e      	mov	r6, r1
 8002f96:	d9f4      	bls.n	8002f82 <_printf_i+0x11a>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d10b      	bne.n	8002fb4 <_printf_i+0x14c>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	07de      	lsls	r6, r3, #31
 8002fa0:	d508      	bpl.n	8002fb4 <_printf_i+0x14c>
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	6861      	ldr	r1, [r4, #4]
 8002fa6:	4299      	cmp	r1, r3
 8002fa8:	bfde      	ittt	le
 8002faa:	2330      	movle	r3, #48	; 0x30
 8002fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fb4:	1b52      	subs	r2, r2, r5
 8002fb6:	6122      	str	r2, [r4, #16]
 8002fb8:	f8cd a000 	str.w	sl, [sp]
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	aa03      	add	r2, sp, #12
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f7ff fee2 	bl	8002d8c <_printf_common>
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d14c      	bne.n	8003066 <_printf_i+0x1fe>
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b004      	add	sp, #16
 8002fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd6:	4835      	ldr	r0, [pc, #212]	; (80030ac <_printf_i+0x244>)
 8002fd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fdc:	6829      	ldr	r1, [r5, #0]
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fe4:	6029      	str	r1, [r5, #0]
 8002fe6:	061d      	lsls	r5, r3, #24
 8002fe8:	d514      	bpl.n	8003014 <_printf_i+0x1ac>
 8002fea:	07df      	lsls	r7, r3, #31
 8002fec:	bf44      	itt	mi
 8002fee:	f043 0320 	orrmi.w	r3, r3, #32
 8002ff2:	6023      	strmi	r3, [r4, #0]
 8002ff4:	b91e      	cbnz	r6, 8002ffe <_printf_i+0x196>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	f023 0320 	bic.w	r3, r3, #32
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	2310      	movs	r3, #16
 8003000:	e7b0      	b.n	8002f64 <_printf_i+0xfc>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	f043 0320 	orr.w	r3, r3, #32
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	2378      	movs	r3, #120	; 0x78
 800300c:	4828      	ldr	r0, [pc, #160]	; (80030b0 <_printf_i+0x248>)
 800300e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003012:	e7e3      	b.n	8002fdc <_printf_i+0x174>
 8003014:	0659      	lsls	r1, r3, #25
 8003016:	bf48      	it	mi
 8003018:	b2b6      	uxthmi	r6, r6
 800301a:	e7e6      	b.n	8002fea <_printf_i+0x182>
 800301c:	4615      	mov	r5, r2
 800301e:	e7bb      	b.n	8002f98 <_printf_i+0x130>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	6826      	ldr	r6, [r4, #0]
 8003024:	6961      	ldr	r1, [r4, #20]
 8003026:	1d18      	adds	r0, r3, #4
 8003028:	6028      	str	r0, [r5, #0]
 800302a:	0635      	lsls	r5, r6, #24
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	d501      	bpl.n	8003034 <_printf_i+0x1cc>
 8003030:	6019      	str	r1, [r3, #0]
 8003032:	e002      	b.n	800303a <_printf_i+0x1d2>
 8003034:	0670      	lsls	r0, r6, #25
 8003036:	d5fb      	bpl.n	8003030 <_printf_i+0x1c8>
 8003038:	8019      	strh	r1, [r3, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	6123      	str	r3, [r4, #16]
 800303e:	4615      	mov	r5, r2
 8003040:	e7ba      	b.n	8002fb8 <_printf_i+0x150>
 8003042:	682b      	ldr	r3, [r5, #0]
 8003044:	1d1a      	adds	r2, r3, #4
 8003046:	602a      	str	r2, [r5, #0]
 8003048:	681d      	ldr	r5, [r3, #0]
 800304a:	6862      	ldr	r2, [r4, #4]
 800304c:	2100      	movs	r1, #0
 800304e:	4628      	mov	r0, r5
 8003050:	f7fd f8ce 	bl	80001f0 <memchr>
 8003054:	b108      	cbz	r0, 800305a <_printf_i+0x1f2>
 8003056:	1b40      	subs	r0, r0, r5
 8003058:	6060      	str	r0, [r4, #4]
 800305a:	6863      	ldr	r3, [r4, #4]
 800305c:	6123      	str	r3, [r4, #16]
 800305e:	2300      	movs	r3, #0
 8003060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003064:	e7a8      	b.n	8002fb8 <_printf_i+0x150>
 8003066:	6923      	ldr	r3, [r4, #16]
 8003068:	462a      	mov	r2, r5
 800306a:	4649      	mov	r1, r9
 800306c:	4640      	mov	r0, r8
 800306e:	47d0      	blx	sl
 8003070:	3001      	adds	r0, #1
 8003072:	d0ab      	beq.n	8002fcc <_printf_i+0x164>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	079b      	lsls	r3, r3, #30
 8003078:	d413      	bmi.n	80030a2 <_printf_i+0x23a>
 800307a:	68e0      	ldr	r0, [r4, #12]
 800307c:	9b03      	ldr	r3, [sp, #12]
 800307e:	4298      	cmp	r0, r3
 8003080:	bfb8      	it	lt
 8003082:	4618      	movlt	r0, r3
 8003084:	e7a4      	b.n	8002fd0 <_printf_i+0x168>
 8003086:	2301      	movs	r3, #1
 8003088:	4632      	mov	r2, r6
 800308a:	4649      	mov	r1, r9
 800308c:	4640      	mov	r0, r8
 800308e:	47d0      	blx	sl
 8003090:	3001      	adds	r0, #1
 8003092:	d09b      	beq.n	8002fcc <_printf_i+0x164>
 8003094:	3501      	adds	r5, #1
 8003096:	68e3      	ldr	r3, [r4, #12]
 8003098:	9903      	ldr	r1, [sp, #12]
 800309a:	1a5b      	subs	r3, r3, r1
 800309c:	42ab      	cmp	r3, r5
 800309e:	dcf2      	bgt.n	8003086 <_printf_i+0x21e>
 80030a0:	e7eb      	b.n	800307a <_printf_i+0x212>
 80030a2:	2500      	movs	r5, #0
 80030a4:	f104 0619 	add.w	r6, r4, #25
 80030a8:	e7f5      	b.n	8003096 <_printf_i+0x22e>
 80030aa:	bf00      	nop
 80030ac:	08003429 	.word	0x08003429
 80030b0:	0800343a 	.word	0x0800343a

080030b4 <memcpy>:
 80030b4:	440a      	add	r2, r1
 80030b6:	4291      	cmp	r1, r2
 80030b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80030bc:	d100      	bne.n	80030c0 <memcpy+0xc>
 80030be:	4770      	bx	lr
 80030c0:	b510      	push	{r4, lr}
 80030c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030ca:	4291      	cmp	r1, r2
 80030cc:	d1f9      	bne.n	80030c2 <memcpy+0xe>
 80030ce:	bd10      	pop	{r4, pc}

080030d0 <memmove>:
 80030d0:	4288      	cmp	r0, r1
 80030d2:	b510      	push	{r4, lr}
 80030d4:	eb01 0402 	add.w	r4, r1, r2
 80030d8:	d902      	bls.n	80030e0 <memmove+0x10>
 80030da:	4284      	cmp	r4, r0
 80030dc:	4623      	mov	r3, r4
 80030de:	d807      	bhi.n	80030f0 <memmove+0x20>
 80030e0:	1e43      	subs	r3, r0, #1
 80030e2:	42a1      	cmp	r1, r4
 80030e4:	d008      	beq.n	80030f8 <memmove+0x28>
 80030e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030ee:	e7f8      	b.n	80030e2 <memmove+0x12>
 80030f0:	4402      	add	r2, r0
 80030f2:	4601      	mov	r1, r0
 80030f4:	428a      	cmp	r2, r1
 80030f6:	d100      	bne.n	80030fa <memmove+0x2a>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003102:	e7f7      	b.n	80030f4 <memmove+0x24>

08003104 <_free_r>:
 8003104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003106:	2900      	cmp	r1, #0
 8003108:	d044      	beq.n	8003194 <_free_r+0x90>
 800310a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800310e:	9001      	str	r0, [sp, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f1a1 0404 	sub.w	r4, r1, #4
 8003116:	bfb8      	it	lt
 8003118:	18e4      	addlt	r4, r4, r3
 800311a:	f000 f913 	bl	8003344 <__malloc_lock>
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <_free_r+0x94>)
 8003120:	9801      	ldr	r0, [sp, #4]
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	b933      	cbnz	r3, 8003134 <_free_r+0x30>
 8003126:	6063      	str	r3, [r4, #4]
 8003128:	6014      	str	r4, [r2, #0]
 800312a:	b003      	add	sp, #12
 800312c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003130:	f000 b90e 	b.w	8003350 <__malloc_unlock>
 8003134:	42a3      	cmp	r3, r4
 8003136:	d908      	bls.n	800314a <_free_r+0x46>
 8003138:	6825      	ldr	r5, [r4, #0]
 800313a:	1961      	adds	r1, r4, r5
 800313c:	428b      	cmp	r3, r1
 800313e:	bf01      	itttt	eq
 8003140:	6819      	ldreq	r1, [r3, #0]
 8003142:	685b      	ldreq	r3, [r3, #4]
 8003144:	1949      	addeq	r1, r1, r5
 8003146:	6021      	streq	r1, [r4, #0]
 8003148:	e7ed      	b.n	8003126 <_free_r+0x22>
 800314a:	461a      	mov	r2, r3
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b10b      	cbz	r3, 8003154 <_free_r+0x50>
 8003150:	42a3      	cmp	r3, r4
 8003152:	d9fa      	bls.n	800314a <_free_r+0x46>
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	1855      	adds	r5, r2, r1
 8003158:	42a5      	cmp	r5, r4
 800315a:	d10b      	bne.n	8003174 <_free_r+0x70>
 800315c:	6824      	ldr	r4, [r4, #0]
 800315e:	4421      	add	r1, r4
 8003160:	1854      	adds	r4, r2, r1
 8003162:	42a3      	cmp	r3, r4
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	d1e0      	bne.n	800312a <_free_r+0x26>
 8003168:	681c      	ldr	r4, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	6053      	str	r3, [r2, #4]
 800316e:	4421      	add	r1, r4
 8003170:	6011      	str	r1, [r2, #0]
 8003172:	e7da      	b.n	800312a <_free_r+0x26>
 8003174:	d902      	bls.n	800317c <_free_r+0x78>
 8003176:	230c      	movs	r3, #12
 8003178:	6003      	str	r3, [r0, #0]
 800317a:	e7d6      	b.n	800312a <_free_r+0x26>
 800317c:	6825      	ldr	r5, [r4, #0]
 800317e:	1961      	adds	r1, r4, r5
 8003180:	428b      	cmp	r3, r1
 8003182:	bf04      	itt	eq
 8003184:	6819      	ldreq	r1, [r3, #0]
 8003186:	685b      	ldreq	r3, [r3, #4]
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	bf04      	itt	eq
 800318c:	1949      	addeq	r1, r1, r5
 800318e:	6021      	streq	r1, [r4, #0]
 8003190:	6054      	str	r4, [r2, #4]
 8003192:	e7ca      	b.n	800312a <_free_r+0x26>
 8003194:	b003      	add	sp, #12
 8003196:	bd30      	pop	{r4, r5, pc}
 8003198:	200000f8 	.word	0x200000f8

0800319c <sbrk_aligned>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4e0e      	ldr	r6, [pc, #56]	; (80031d8 <sbrk_aligned+0x3c>)
 80031a0:	460c      	mov	r4, r1
 80031a2:	6831      	ldr	r1, [r6, #0]
 80031a4:	4605      	mov	r5, r0
 80031a6:	b911      	cbnz	r1, 80031ae <sbrk_aligned+0x12>
 80031a8:	f000 f8bc 	bl	8003324 <_sbrk_r>
 80031ac:	6030      	str	r0, [r6, #0]
 80031ae:	4621      	mov	r1, r4
 80031b0:	4628      	mov	r0, r5
 80031b2:	f000 f8b7 	bl	8003324 <_sbrk_r>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	d00a      	beq.n	80031d0 <sbrk_aligned+0x34>
 80031ba:	1cc4      	adds	r4, r0, #3
 80031bc:	f024 0403 	bic.w	r4, r4, #3
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d007      	beq.n	80031d4 <sbrk_aligned+0x38>
 80031c4:	1a21      	subs	r1, r4, r0
 80031c6:	4628      	mov	r0, r5
 80031c8:	f000 f8ac 	bl	8003324 <_sbrk_r>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d101      	bne.n	80031d4 <sbrk_aligned+0x38>
 80031d0:	f04f 34ff 	mov.w	r4, #4294967295
 80031d4:	4620      	mov	r0, r4
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	200000fc 	.word	0x200000fc

080031dc <_malloc_r>:
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e0:	1ccd      	adds	r5, r1, #3
 80031e2:	f025 0503 	bic.w	r5, r5, #3
 80031e6:	3508      	adds	r5, #8
 80031e8:	2d0c      	cmp	r5, #12
 80031ea:	bf38      	it	cc
 80031ec:	250c      	movcc	r5, #12
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	4607      	mov	r7, r0
 80031f2:	db01      	blt.n	80031f8 <_malloc_r+0x1c>
 80031f4:	42a9      	cmp	r1, r5
 80031f6:	d905      	bls.n	8003204 <_malloc_r+0x28>
 80031f8:	230c      	movs	r3, #12
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	2600      	movs	r6, #0
 80031fe:	4630      	mov	r0, r6
 8003200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003204:	4e2e      	ldr	r6, [pc, #184]	; (80032c0 <_malloc_r+0xe4>)
 8003206:	f000 f89d 	bl	8003344 <__malloc_lock>
 800320a:	6833      	ldr	r3, [r6, #0]
 800320c:	461c      	mov	r4, r3
 800320e:	bb34      	cbnz	r4, 800325e <_malloc_r+0x82>
 8003210:	4629      	mov	r1, r5
 8003212:	4638      	mov	r0, r7
 8003214:	f7ff ffc2 	bl	800319c <sbrk_aligned>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	4604      	mov	r4, r0
 800321c:	d14d      	bne.n	80032ba <_malloc_r+0xde>
 800321e:	6834      	ldr	r4, [r6, #0]
 8003220:	4626      	mov	r6, r4
 8003222:	2e00      	cmp	r6, #0
 8003224:	d140      	bne.n	80032a8 <_malloc_r+0xcc>
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	4631      	mov	r1, r6
 800322a:	4638      	mov	r0, r7
 800322c:	eb04 0803 	add.w	r8, r4, r3
 8003230:	f000 f878 	bl	8003324 <_sbrk_r>
 8003234:	4580      	cmp	r8, r0
 8003236:	d13a      	bne.n	80032ae <_malloc_r+0xd2>
 8003238:	6821      	ldr	r1, [r4, #0]
 800323a:	3503      	adds	r5, #3
 800323c:	1a6d      	subs	r5, r5, r1
 800323e:	f025 0503 	bic.w	r5, r5, #3
 8003242:	3508      	adds	r5, #8
 8003244:	2d0c      	cmp	r5, #12
 8003246:	bf38      	it	cc
 8003248:	250c      	movcc	r5, #12
 800324a:	4629      	mov	r1, r5
 800324c:	4638      	mov	r0, r7
 800324e:	f7ff ffa5 	bl	800319c <sbrk_aligned>
 8003252:	3001      	adds	r0, #1
 8003254:	d02b      	beq.n	80032ae <_malloc_r+0xd2>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	442b      	add	r3, r5
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	e00e      	b.n	800327c <_malloc_r+0xa0>
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	1b52      	subs	r2, r2, r5
 8003262:	d41e      	bmi.n	80032a2 <_malloc_r+0xc6>
 8003264:	2a0b      	cmp	r2, #11
 8003266:	d916      	bls.n	8003296 <_malloc_r+0xba>
 8003268:	1961      	adds	r1, r4, r5
 800326a:	42a3      	cmp	r3, r4
 800326c:	6025      	str	r5, [r4, #0]
 800326e:	bf18      	it	ne
 8003270:	6059      	strne	r1, [r3, #4]
 8003272:	6863      	ldr	r3, [r4, #4]
 8003274:	bf08      	it	eq
 8003276:	6031      	streq	r1, [r6, #0]
 8003278:	5162      	str	r2, [r4, r5]
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	4638      	mov	r0, r7
 800327e:	f104 060b 	add.w	r6, r4, #11
 8003282:	f000 f865 	bl	8003350 <__malloc_unlock>
 8003286:	f026 0607 	bic.w	r6, r6, #7
 800328a:	1d23      	adds	r3, r4, #4
 800328c:	1af2      	subs	r2, r6, r3
 800328e:	d0b6      	beq.n	80031fe <_malloc_r+0x22>
 8003290:	1b9b      	subs	r3, r3, r6
 8003292:	50a3      	str	r3, [r4, r2]
 8003294:	e7b3      	b.n	80031fe <_malloc_r+0x22>
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	42a3      	cmp	r3, r4
 800329a:	bf0c      	ite	eq
 800329c:	6032      	streq	r2, [r6, #0]
 800329e:	605a      	strne	r2, [r3, #4]
 80032a0:	e7ec      	b.n	800327c <_malloc_r+0xa0>
 80032a2:	4623      	mov	r3, r4
 80032a4:	6864      	ldr	r4, [r4, #4]
 80032a6:	e7b2      	b.n	800320e <_malloc_r+0x32>
 80032a8:	4634      	mov	r4, r6
 80032aa:	6876      	ldr	r6, [r6, #4]
 80032ac:	e7b9      	b.n	8003222 <_malloc_r+0x46>
 80032ae:	230c      	movs	r3, #12
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4638      	mov	r0, r7
 80032b4:	f000 f84c 	bl	8003350 <__malloc_unlock>
 80032b8:	e7a1      	b.n	80031fe <_malloc_r+0x22>
 80032ba:	6025      	str	r5, [r4, #0]
 80032bc:	e7de      	b.n	800327c <_malloc_r+0xa0>
 80032be:	bf00      	nop
 80032c0:	200000f8 	.word	0x200000f8

080032c4 <_realloc_r>:
 80032c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c8:	4680      	mov	r8, r0
 80032ca:	4614      	mov	r4, r2
 80032cc:	460e      	mov	r6, r1
 80032ce:	b921      	cbnz	r1, 80032da <_realloc_r+0x16>
 80032d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d4:	4611      	mov	r1, r2
 80032d6:	f7ff bf81 	b.w	80031dc <_malloc_r>
 80032da:	b92a      	cbnz	r2, 80032e8 <_realloc_r+0x24>
 80032dc:	f7ff ff12 	bl	8003104 <_free_r>
 80032e0:	4625      	mov	r5, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	f000 f838 	bl	800335c <_malloc_usable_size_r>
 80032ec:	4284      	cmp	r4, r0
 80032ee:	4607      	mov	r7, r0
 80032f0:	d802      	bhi.n	80032f8 <_realloc_r+0x34>
 80032f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032f6:	d812      	bhi.n	800331e <_realloc_r+0x5a>
 80032f8:	4621      	mov	r1, r4
 80032fa:	4640      	mov	r0, r8
 80032fc:	f7ff ff6e 	bl	80031dc <_malloc_r>
 8003300:	4605      	mov	r5, r0
 8003302:	2800      	cmp	r0, #0
 8003304:	d0ed      	beq.n	80032e2 <_realloc_r+0x1e>
 8003306:	42bc      	cmp	r4, r7
 8003308:	4622      	mov	r2, r4
 800330a:	4631      	mov	r1, r6
 800330c:	bf28      	it	cs
 800330e:	463a      	movcs	r2, r7
 8003310:	f7ff fed0 	bl	80030b4 <memcpy>
 8003314:	4631      	mov	r1, r6
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff fef4 	bl	8003104 <_free_r>
 800331c:	e7e1      	b.n	80032e2 <_realloc_r+0x1e>
 800331e:	4635      	mov	r5, r6
 8003320:	e7df      	b.n	80032e2 <_realloc_r+0x1e>
	...

08003324 <_sbrk_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4d06      	ldr	r5, [pc, #24]	; (8003340 <_sbrk_r+0x1c>)
 8003328:	2300      	movs	r3, #0
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	f7fd fb5c 	bl	80009ec <_sbrk>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_sbrk_r+0x1a>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_sbrk_r+0x1a>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	20000100 	.word	0x20000100

08003344 <__malloc_lock>:
 8003344:	4801      	ldr	r0, [pc, #4]	; (800334c <__malloc_lock+0x8>)
 8003346:	f000 b811 	b.w	800336c <__retarget_lock_acquire_recursive>
 800334a:	bf00      	nop
 800334c:	20000104 	.word	0x20000104

08003350 <__malloc_unlock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_unlock+0x8>)
 8003352:	f000 b80c 	b.w	800336e <__retarget_lock_release_recursive>
 8003356:	bf00      	nop
 8003358:	20000104 	.word	0x20000104

0800335c <_malloc_usable_size_r>:
 800335c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003360:	1f18      	subs	r0, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	bfbc      	itt	lt
 8003366:	580b      	ldrlt	r3, [r1, r0]
 8003368:	18c0      	addlt	r0, r0, r3
 800336a:	4770      	bx	lr

0800336c <__retarget_lock_acquire_recursive>:
 800336c:	4770      	bx	lr

0800336e <__retarget_lock_release_recursive>:
 800336e:	4770      	bx	lr

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
