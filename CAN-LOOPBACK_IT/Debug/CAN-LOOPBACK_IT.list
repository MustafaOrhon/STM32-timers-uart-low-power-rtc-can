
CAN-LOOPBACK_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003814  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a7c  08003a7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a84  08003a84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000168  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c5d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000169a  00000000  00000000  00029cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000708  00000000  00000000  0002bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023089  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e34  00000000  00000000  0004f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4221  00000000  00000000  000580ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c30e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002274  00000000  00000000  0012c360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080039ac 	.word	0x080039ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080039ac 	.word	0x080039ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SysTick_Handler>:
 */
#include "stm32f4xx_hal.h"

extern CAN_HandleTypeDef hcan1;
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
   HAL_IncTick();
 80005a8:	f000 fbc4 	bl	8000d34 <HAL_IncTick>
   HAL_SYSTICK_IRQHandler();
 80005ac:	f001 fb4a 	bl	8001c44 <HAL_SYSTICK_IRQHandler>

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <CAN1_TX_IRQHandler+0x10>)
 80005ba:	f001 f80e 	bl	80015da <HAL_CAN_IRQHandler>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000d0 	.word	0x200000d0

080005c8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <CAN1_RX0_IRQHandler+0x10>)
 80005ce:	f001 f804 	bl	80015da <HAL_CAN_IRQHandler>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d0 	.word	0x200000d0

080005dc <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <CAN1_RX1_IRQHandler+0x10>)
 80005e2:	f000 fffa 	bl	80015da <HAL_CAN_IRQHandler>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000d0 	.word	0x200000d0

080005f0 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <CAN1_SCE_IRQHandler+0x10>)
 80005f6:	f000 fff0 	bl	80015da <HAL_CAN_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000d0 	.word	0x200000d0

08000604 <main>:
CAN_HandleTypeDef hcan1;
char buff[100];
char rx_buffer[100];

int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	HAL_Init();
 8000608:	f000 fb42 	bl	8000c90 <HAL_Init>

	SystemClockConfig();
 800060c:	f000 f844 	bl	8000698 <SystemClockConfig>

	GPIO_Init();
 8000610:	f000 f81e 	bl	8000650 <GPIO_Init>

	UART2_Init();
 8000614:	f000 f898 	bl	8000748 <UART2_Init>

    CAN1_Init();
 8000618:	f000 f8bc 	bl	8000794 <CAN1_Init>

    CAN1_Filter_Config();
 800061c:	f000 f91e 	bl	800085c <CAN1_Filter_Config>

    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY
 8000620:	f240 4103 	movw	r1, #1027	; 0x403
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <main+0x48>)
 8000626:	f000 ffb2 	bl	800158e <HAL_CAN_ActivateNotification>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x30>
    		                               |CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_BUSOFF) !=HAL_OK)
    {
    	Error_Handler();
 8000630:	f000 f886 	bl	8000740 <Error_Handler>

    }


    if(HAL_CAN_Start(&hcan1)!= HAL_OK) // Move Can from Init -> Normal Mode
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x48>)
 8000636:	f000 fd79 	bl	800112c <HAL_CAN_Start>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x40>
    {
    	Error_Handler();
 8000640:	f000 f87e 	bl	8000740 <Error_Handler>



	while(1)
	{
		CAN1_TX();
 8000644:	f000 f8de 	bl	8000804 <CAN1_TX>
 8000648:	e7fc      	b.n	8000644 <main+0x40>
 800064a:	bf00      	nop
 800064c:	200000d0 	.word	0x200000d0

08000650 <GPIO_Init>:

	return 0;
}

void GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <GPIO_Init+0x40>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <GPIO_Init+0x40>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <GPIO_Init+0x40>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000672:	2320      	movs	r3, #32
 8000674:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <GPIO_Init+0x44>)
 8000684:	f001 faec 	bl	8001c60 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000

08000698 <SystemClockConfig>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockConfig(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b092      	sub	sp, #72	; 0x48
 800069c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClockInitStruct;

	memset(&RCC_OscInitStruct,0,sizeof(RCC_OscInitStruct));
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fd0a 	bl	80030c0 <memset>
	memset(&RCC_ClockInitStruct,0,sizeof(RCC_ClockInitStruct));
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2214      	movs	r2, #20
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd04 	bl	80030c0 <memset>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = 16; //Default
 80006c0:	2310      	movs	r3, #16
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 16; // 16/16 1Mhz
 80006cc:	2310      	movs	r3, #16
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	; 0x44

	if(HAL_RCC_OscConfig(&RCC_OscInitStruct)!=HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fc69 	bl	8001fb8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClockConfig+0x58>
	{
		Error_Handler();
 80006ec:	f000 f828 	bl	8000740 <Error_Handler>
	}

	RCC_ClockInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
			                        RCC_CLOCKTYPE_PCLK1  |RCC_CLOCKTYPE_PCLK2;
	RCC_ClockInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
	RCC_ClockInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	RCC_ClockInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	613b      	str	r3, [r7, #16]
	RCC_ClockInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

	if(HAL_RCC_ClockConfig(&RCC_ClockInitStruct, FLASH_ACR_LATENCY_2WS)!=HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fecc 	bl	80024a8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClockConfig+0x82>
	{
		Error_Handler();
 8000716:	f000 f813 	bl	8000740 <Error_Handler>
	}

	// Systick config
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800071a:	f002 f8b1 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 800071e:	4603      	mov	r3, r0
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <SystemClockConfig+0xa4>)
 8000722:	fba2 2303 	umull	r2, r3, r2, r3
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fa62 	bl	8001bf2 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800072e:	2004      	movs	r0, #4
 8000730:	f001 fa6c 	bl	8001c0c <HAL_SYSTICK_CLKSourceConfig>
}
 8000734:	bf00      	nop
 8000736:	3748      	adds	r7, #72	; 0x48
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	10624dd3 	.word	0x10624dd3

08000740 <Error_Handler>:

void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  while(1);
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x4>
	...

08000748 <UART2_Init>:
}


void UART2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <UART2_Init+0x44>)
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <UART2_Init+0x48>)
 8000750:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <UART2_Init+0x44>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <UART2_Init+0x44>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <UART2_Init+0x44>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <UART2_Init+0x44>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <UART2_Init+0x44>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <UART2_Init+0x44>)
 8000774:	220c      	movs	r2, #12
 8000776:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <UART2_Init+0x44>)
 800077a:	f002 f8b5 	bl	80028e8 <HAL_UART_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <UART2_Init+0x40>
	{
		//There is a problem
		Error_Handler();
 8000784:	f7ff ffdc 	bl	8000740 <Error_Handler>
	}


}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008c 	.word	0x2000008c
 8000790:	40004400 	.word	0x40004400

08000794 <CAN1_Init>:
void CAN1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
     hcan1.Instance = CAN1;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <CAN1_Init+0x68>)
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <CAN1_Init+0x6c>)
 800079c:	601a      	str	r2, [r3, #0]
     hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <CAN1_Init+0x68>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	609a      	str	r2, [r3, #8]
     hcan1.Init.AutoBusOff = DISABLE;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <CAN1_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	765a      	strb	r2, [r3, #25]
     hcan1.Init.AutoRetransmission = ENABLE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <CAN1_Init+0x68>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	76da      	strb	r2, [r3, #27]
     hcan1.Init.AutoWakeUp = DISABLE;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <CAN1_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	769a      	strb	r2, [r3, #26]
     hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <CAN1_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	771a      	strb	r2, [r3, #28]
     hcan1.Init.TimeTriggeredMode = DISABLE;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <CAN1_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	761a      	strb	r2, [r3, #24]
     hcan1.Init.TransmitFifoPriority = DISABLE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <CAN1_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	775a      	strb	r2, [r3, #29]

     // Time-Settings  125 kbps bitrate
     hcan1.Init.Prescaler = 21;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <CAN1_Init+0x68>)
 80007cc:	2215      	movs	r2, #21
 80007ce:	605a      	str	r2, [r3, #4]
     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <CAN1_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
     hcan1.Init.TimeSeg1 = CAN_BS1_13TQ	;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <CAN1_Init+0x68>)
 80007d8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80007dc:	611a      	str	r2, [r3, #16]
     hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <CAN1_Init+0x68>)
 80007e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007e4:	615a      	str	r2, [r3, #20]

     if(HAL_CAN_Init(&hcan1)!= HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <CAN1_Init+0x68>)
 80007e8:	f000 fac4 	bl	8000d74 <HAL_CAN_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <CAN1_Init+0x62>
    	 {
    	   Error_Handler();
 80007f2:	f7ff ffa5 	bl	8000740 <Error_Handler>

    	 }

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000d0 	.word	0x200000d0
 8000800:	40006400 	.word	0x40006400

08000804 <CAN1_TX>:
void CAN1_TX(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
   CAN_TxHeaderTypeDef htxcan1;
   uint32_t TxMailBox;

   char msg[7] = "MUSTAFA";
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <CAN1_TX+0x50>)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	3304      	adds	r3, #4
 8000816:	8019      	strh	r1, [r3, #0]
 8000818:	3302      	adds	r3, #2
 800081a:	0c0a      	lsrs	r2, r1, #16
 800081c:	701a      	strb	r2, [r3, #0]
   htxcan1.DLC = 7;
 800081e:	2307      	movs	r3, #7
 8000820:	623b      	str	r3, [r7, #32]
   htxcan1.StdId = 0x65D;
 8000822:	f240 635d 	movw	r3, #1629	; 0x65d
 8000826:	613b      	str	r3, [r7, #16]
   htxcan1.IDE = CAN_ID_STD;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
   htxcan1.RTR = CAN_RTR_DATA;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

   if(HAL_CAN_AddTxMessage(&hcan1, &htxcan1, (uint8_t *)msg, &TxMailBox)!= HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	1d3a      	adds	r2, r7, #4
 8000836:	f107 0110 	add.w	r1, r7, #16
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <CAN1_TX+0x54>)
 800083c:	f000 fcba 	bl	80011b4 <HAL_CAN_AddTxMessage>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <CAN1_TX+0x46>
   {
	   Error_Handler();
 8000846:	f7ff ff7b 	bl	8000740 <Error_Handler>
   }


}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	080039c4 	.word	0x080039c4
 8000858:	200000d0 	.word	0x200000d0

0800085c <CAN1_Filter_Config>:


void CAN1_Filter_Config()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

    CAN_FilterTypeDef CAN_FilterInitStruct;

    CAN_FilterInitStruct.FilterActivation = ENABLE;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
    CAN_FilterInitStruct.FilterBank = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
    CAN_FilterInitStruct.FilterFIFOAssignment = CAN_RX_FIFO0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
    CAN_FilterInitStruct.FilterIdHigh = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
    CAN_FilterInitStruct.FilterIdLow = 0x0000;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
    CAN_FilterInitStruct.FilterMaskIdHigh = 0x0000;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
    CAN_FilterInitStruct.FilterMaskIdLow = 0x0000;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
    CAN_FilterInitStruct.FilterMode = CAN_FILTERMODE_IDMASK;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
    CAN_FilterInitStruct.FilterScale = CAN_FILTERSCALE_32BIT;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]

    if(HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterInitStruct)!= HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <CAN1_Filter_Config+0x48>)
 800088c:	f000 fb6e 	bl	8000f6c <HAL_CAN_ConfigFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <CAN1_Filter_Config+0x3e>
  	     {
  	       	   Error_Handler();
 8000896:	f7ff ff53 	bl	8000740 <Error_Handler>
  	     }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000d0 	.word	0x200000d0

080008a8 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted : M0\r\n");
 80008b0:	490b      	ldr	r1, [pc, #44]	; (80008e0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80008b4:	f002 fc0c 	bl	80030d0 <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 80008b8:	480a      	ldr	r0, [pc, #40]	; (80008e4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80008ba:	f7ff fc99 	bl	80001f0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80008ca:	f002 f85a 	bl	8002982 <HAL_UART_Transmit>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 80008d4:	f7ff ff34 	bl	8000740 <Error_Handler>
	     	 }

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	080039cc 	.word	0x080039cc
 80008e4:	200000f8 	.word	0x200000f8
 80008e8:	2000008c 	.word	0x2000008c

080008ec <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted M1\r\n");
 80008f4:	490b      	ldr	r1, [pc, #44]	; (8000924 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 80008f8:	f002 fbea 	bl	80030d0 <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 80008fe:	f7ff fc77 	bl	80001f0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	4907      	ldr	r1, [pc, #28]	; (8000928 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 800090e:	f002 f838 	bl	8002982 <HAL_UART_Transmit>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 8000918:	f7ff ff12 	bl	8000740 <Error_Handler>
	     	 }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	080039e8 	.word	0x080039e8
 8000928:	200000f8 	.word	0x200000f8
 800092c:	2000008c 	.word	0x2000008c

08000930 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted M1\r\n");
 8000938:	490b      	ldr	r1, [pc, #44]	; (8000968 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 800093c:	f002 fbc8 	bl	80030d0 <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000942:	f7ff fc55 	bl	80001f0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4907      	ldr	r1, [pc, #28]	; (800096c <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 8000952:	f002 f816 	bl	8002982 <HAL_UART_Transmit>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 800095c:	f7ff fef0 	bl	8000740 <Error_Handler>
	     	 }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	080039e8 	.word	0x080039e8
 800096c:	200000f8 	.word	0x200000f8
 8000970:	2000008c 	.word	0x2000008c

08000974 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef hrxcan1;
	uint8_t rx_buff[7];



	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&hrxcan1,rx_buff)!= HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	f107 0214 	add.w	r2, r7, #20
 8000984:	2100      	movs	r1, #0
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000988:	f000 fcef 	bl	800136a <HAL_CAN_GetRxMessage>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8000992:	f7ff fed5 	bl	8000740 <Error_Handler>
	}

	  sprintf(rx_buffer,"Message Recieved : %s\r\n",rx_buff);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	461a      	mov	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009a0:	f002 fb96 	bl	80030d0 <siprintf>
	  if(HAL_UART_Transmit(&huart2, (uint8_t *)rx_buffer , strlen(rx_buffer), HAL_MAX_DELAY))
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009a6:	f7ff fc23 	bl	80001f0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80009b6:	f001 ffe4 	bl	8002982 <HAL_UART_Transmit>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
	       	 {
	       	   Error_Handler();
 80009c0:	f7ff febe 	bl	8000740 <Error_Handler>
	     	 }

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d0 	.word	0x200000d0
 80009d0:	08003a04 	.word	0x08003a04
 80009d4:	2000015c 	.word	0x2000015c
 80009d8:	2000008c 	.word	0x2000008c

080009dc <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b090      	sub	sp, #64	; 0x40
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	   char error[50];
	   sprintf(error,"Error Detected\r\n");
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	490d      	ldr	r1, [pc, #52]	; (8000a20 <HAL_CAN_ErrorCallback+0x44>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fb70 	bl	80030d0 <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)error , strlen(error), HAL_MAX_DELAY))
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbfb 	bl	80001f0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 010c 	add.w	r1, r7, #12
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <HAL_CAN_ErrorCallback+0x48>)
 8000a08:	f001 ffbb 	bl	8002982 <HAL_UART_Transmit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_CAN_ErrorCallback+0x3a>
	       	 {
	       	   Error_Handler();
 8000a12:	f7ff fe95 	bl	8000740 <Error_Handler>
	     	 }
}
 8000a16:	bf00      	nop
 8000a18:	3740      	adds	r7, #64	; 0x40
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08003a1c 	.word	0x08003a1c
 8000a24:	2000008c 	.word	0x2000008c

08000a28 <HAL_MspInit>:
 *      Author: Mustafa
 */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f001 f8ab 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x40>)
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <HAL_MspInit+0x40>)
 8000a38:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a3c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	f06f 000b 	mvn.w	r0, #11
 8000a46:	f001 f8aa 	bl	8001b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f06f 000a 	mvn.w	r0, #10
 8000a52:	f001 f8a4 	bl	8001b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f06f 0009 	mvn.w	r0, #9
 8000a5e:	f001 f89e 	bl	8001b9e <HAL_NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000aac:	2304      	movs	r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000abc:	2307      	movs	r3, #7
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ac8:	f001 f8ca 	bl	8001c60 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000acc:	2308      	movs	r3, #8
 8000ace:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ad8:	f001 f8c2 	bl	8001c60 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	2026      	movs	r0, #38	; 0x26
 8000ade:	f001 f87a 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	2026      	movs	r0, #38	; 0x26
 8000ae8:	f001 f859 	bl	8001b9e <HAL_NVIC_SetPriority>

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	// Enable the clock
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_CAN_MspInit+0xa8>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
	// Config Pins
	GPIO_InitTypeDef GPIO_Can;
	GPIO_Can.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	617b      	str	r3, [r7, #20]
	GPIO_Can.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
	GPIO_Can.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
	GPIO_Can.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
	GPIO_Can.Alternate = GPIO_AF9_CAN1;
 8000b4c:	2309      	movs	r3, #9
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_Can);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <HAL_CAN_MspInit+0xac>)
 8000b58:	f001 f882 	bl	8001c60 <HAL_GPIO_Init>

	// ENABLE NVIC
   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b5c:	2013      	movs	r0, #19
 8000b5e:	f001 f83a 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b62:	2014      	movs	r0, #20
 8000b64:	f001 f837 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b68:	2015      	movs	r0, #21
 8000b6a:	f001 f834 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b6e:	2016      	movs	r0, #22
 8000b70:	f001 f831 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15,0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	210f      	movs	r1, #15
 8000b78:	2013      	movs	r0, #19
 8000b7a:	f001 f810 	bl	8001b9e <HAL_NVIC_SetPriority>
   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15,0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	2014      	movs	r0, #20
 8000b84:	f001 f80b 	bl	8001b9e <HAL_NVIC_SetPriority>
   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15,0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	2015      	movs	r0, #21
 8000b8e:	f001 f806 	bl	8001b9e <HAL_NVIC_SetPriority>
   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15,0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	2016      	movs	r0, #22
 8000b98:	f001 f801 	bl	8001b9e <HAL_NVIC_SetPriority>


}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 fa46 	bl	800306c <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20030000 	.word	0x20030000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200001c0 	.word	0x200001c0
 8000c14:	200001d8 	.word	0x200001d8

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ffd7 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 fa05 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fcc9 	bl	8000604 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c80:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 8000c84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c88:	200001d8 	.word	0x200001d8

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 ff65 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff feb0 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 ff7d 	bl	8001bf2 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 ff45 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200001c4 	.word	0x200001c4

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200001c4 	.word	0x200001c4

08000d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0ed      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff feb2 	bl	8000afc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0201 	orr.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da8:	f7ff ffd8 	bl	8000d5c <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dae:	e012      	b.n	8000dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db0:	f7ff ffd4 	bl	8000d5c <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b0a      	cmp	r3, #10
 8000dbc:	d90b      	bls.n	8000dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2205      	movs	r2, #5
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0c5      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0e5      	beq.n	8000db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0202 	bic.w	r2, r2, #2
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff ffb2 	bl	8000d5c <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff ffae 	bl	8000d5c <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e09f      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e5      	bne.n	8000dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e1b      	ldrb	r3, [r3, #24]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7e5b      	ldrb	r3, [r3, #25]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e9b      	ldrb	r3, [r3, #26]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0220 	bic.w	r2, r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7edb      	ldrb	r3, [r3, #27]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0210 	orr.w	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0208 	orr.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0208 	bic.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7f5b      	ldrb	r3, [r3, #29]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ea42 0103 	orr.w	r1, r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d003      	beq.n	8000f92 <HAL_CAN_ConfigFilter+0x26>
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	f040 80be 	bne.w	800110e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d123      	bne.n	800103c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001016:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3248      	adds	r2, #72	; 0x48
 800101c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001030:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001032:	6979      	ldr	r1, [r7, #20]
 8001034:	3348      	adds	r3, #72	; 0x48
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d122      	bne.n	800108a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001064:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3248      	adds	r2, #72	; 0x48
 800106a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	3348      	adds	r3, #72	; 0x48
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	401a      	ands	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001100:	f023 0201 	bic.w	r2, r3, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d12e      	bne.n	800119e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001158:	f7ff fe00 	bl	8000d5c <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115e:	e012      	b.n	8001186 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001160:	f7ff fdfc 	bl	8000d5c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b0a      	cmp	r3, #10
 800116c:	d90b      	bls.n	8001186 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2205      	movs	r2, #5
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e012      	b.n	80011ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e5      	bne.n	8001160 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e006      	b.n	80011ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
  }
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d003      	beq.n	80011e0 <HAL_CAN_AddTxMessage+0x2c>
 80011d8:	7ffb      	ldrb	r3, [r7, #31]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	f040 80b8 	bne.w	8001350 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10a      	bne.n	8001200 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80a0 	beq.w	8001340 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	0e1b      	lsrs	r3, r3, #24
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d907      	bls.n	8001220 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e09e      	b.n	800135e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001220:	2201      	movs	r2, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	409a      	lsls	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10d      	bne.n	800124e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800123c:	68f9      	ldr	r1, [r7, #12]
 800123e:	6809      	ldr	r1, [r1, #0]
 8001240:	431a      	orrs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3318      	adds	r3, #24
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	440b      	add	r3, r1
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e00f      	b.n	800126e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001258:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800125e:	68f9      	ldr	r1, [r7, #12]
 8001260:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001262:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3318      	adds	r3, #24
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	440b      	add	r3, r1
 800126c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3318      	adds	r3, #24
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	440b      	add	r3, r1
 800127e:	3304      	adds	r3, #4
 8001280:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	7d1b      	ldrb	r3, [r3, #20]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d111      	bne.n	80012ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3318      	adds	r3, #24
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	3304      	adds	r3, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6811      	ldr	r1, [r2, #0]
 800129e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3318      	adds	r3, #24
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	440b      	add	r3, r1
 80012aa:	3304      	adds	r3, #4
 80012ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3307      	adds	r3, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	061a      	lsls	r2, r3, #24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3306      	adds	r3, #6
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3305      	adds	r3, #5
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4313      	orrs	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	3204      	adds	r2, #4
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	4610      	mov	r0, r2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6811      	ldr	r1, [r2, #0]
 80012d6:	ea43 0200 	orr.w	r2, r3, r0
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	440b      	add	r3, r1
 80012e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3303      	adds	r3, #3
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	061a      	lsls	r2, r3, #24
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3302      	adds	r3, #2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4313      	orrs	r3, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	4610      	mov	r0, r2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	ea43 0200 	orr.w	r2, r3, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	440b      	add	r3, r1
 8001316:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800131a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3318      	adds	r3, #24
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6811      	ldr	r1, [r2, #0]
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3318      	adds	r3, #24
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	440b      	add	r3, r1
 800133a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e00e      	b.n	800135e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e006      	b.n	800135e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d003      	beq.n	800138e <HAL_CAN_GetRxMessage+0x24>
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b02      	cmp	r3, #2
 800138a:	f040 80f3 	bne.w	8001574 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10e      	bne.n	80013b2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0e7      	b.n	8001582 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0d8      	b.n	8001582 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	331b      	adds	r3, #27
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0204 	and.w	r2, r3, #4
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	331b      	adds	r3, #27
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0d5b      	lsrs	r3, r3, #21
 80013fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e00b      	b.n	8001420 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	331b      	adds	r3, #27
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	331b      	adds	r3, #27
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0202 	and.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	331b      	adds	r3, #27
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	4413      	add	r3, r2
 8001442:	3304      	adds	r3, #4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 020f 	and.w	r2, r3, #15
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	331b      	adds	r3, #27
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b2da      	uxtb	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	331b      	adds	r3, #27
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0c1b      	lsrs	r3, r3, #16
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0a1a      	lsrs	r2, r3, #8
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0c1a      	lsrs	r2, r3, #16
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3302      	adds	r3, #2
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0e1a      	lsrs	r2, r3, #24
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3303      	adds	r3, #3
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3304      	adds	r3, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0a1a      	lsrs	r2, r3, #8
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3305      	adds	r3, #5
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4413      	add	r3, r2
 800151e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0c1a      	lsrs	r2, r3, #16
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3306      	adds	r3, #6
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0e1a      	lsrs	r2, r3, #24
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3307      	adds	r3, #7
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	e007      	b.n	8001570 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e006      	b.n	8001582 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d002      	beq.n	80015ac <HAL_CAN_ActivateNotification+0x1e>
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d109      	bne.n	80015c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6959      	ldr	r1, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	e006      	b.n	80015ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b08a      	sub	sp, #40	; 0x28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d07c      	beq.n	800171a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f933 	bl	80008a8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001642:	e016      	b.n	8001672 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e00c      	b.n	8001672 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	e002      	b.n	8001672 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f96b 	bl	8001948 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d024      	beq.n	80016c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff f92b 	bl	80008ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001696:	e016      	b.n	80016c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	e00c      	b.n	80016c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	e002      	b.n	80016c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f94b 	bl	800195c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d024      	beq.n	800171a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff f923 	bl	8000930 <HAL_CAN_TxMailbox2CompleteCallback>
 80016ea:	e016      	b.n	800171a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	e00c      	b.n	800171a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	e002      	b.n	800171a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f92b 	bl	8001970 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2210      	movs	r2, #16
 800173c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f912 	bl	8001984 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff f8fb 	bl	8000974 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00c      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001798:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2210      	movs	r2, #16
 80017a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8f4 	bl	80019ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f8db 	bl	8001998 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2210      	movs	r2, #16
 80017fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8de 	bl	80019c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2208      	movs	r2, #8
 800181e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f8d7 	bl	80019d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d07b      	beq.n	8001928 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d072      	beq.n	8001920 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001894:	2b00      	cmp	r3, #0
 8001896:	d043      	beq.n	8001920 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03e      	beq.n	8001920 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018a8:	2b60      	cmp	r3, #96	; 0x60
 80018aa:	d02b      	beq.n	8001904 <HAL_CAN_IRQHandler+0x32a>
 80018ac:	2b60      	cmp	r3, #96	; 0x60
 80018ae:	d82e      	bhi.n	800190e <HAL_CAN_IRQHandler+0x334>
 80018b0:	2b50      	cmp	r3, #80	; 0x50
 80018b2:	d022      	beq.n	80018fa <HAL_CAN_IRQHandler+0x320>
 80018b4:	2b50      	cmp	r3, #80	; 0x50
 80018b6:	d82a      	bhi.n	800190e <HAL_CAN_IRQHandler+0x334>
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	d019      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x316>
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d826      	bhi.n	800190e <HAL_CAN_IRQHandler+0x334>
 80018c0:	2b30      	cmp	r3, #48	; 0x30
 80018c2:	d010      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x30c>
 80018c4:	2b30      	cmp	r3, #48	; 0x30
 80018c6:	d822      	bhi.n	800190e <HAL_CAN_IRQHandler+0x334>
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d002      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x2f8>
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d005      	beq.n	80018dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018d0:	e01d      	b.n	800190e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018da:	e019      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018e4:	e014      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ee:	e00f      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f8:	e00a      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001902:	e005      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190c:	e000      	b.n	8001910 <HAL_CAN_IRQHandler+0x336>
            break;
 800190e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800191e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2204      	movs	r2, #4
 8001926:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff f84e 	bl	80009dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff3e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff31 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d106      	bne.n	8001c28 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001c26:	e005      	b.n	8001c34 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c48:	f000 f802 	bl	8001c50 <HAL_SYSTICK_Callback>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e177      	b.n	8001f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8166 	bne.w	8001f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d005      	beq.n	8001cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d017      	beq.n	8001d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d123      	bne.n	8001da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80c0 	beq.w	8001f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e02:	4a61      	ldr	r2, [pc, #388]	; (8001f88 <HAL_GPIO_Init+0x328>)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_GPIO_Init+0x32c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d037      	beq.n	8001e9e <HAL_GPIO_Init+0x23e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x330>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_GPIO_Init+0x23a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_GPIO_Init+0x334>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d02b      	beq.n	8001e96 <HAL_GPIO_Init+0x236>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a55      	ldr	r2, [pc, #340]	; (8001f98 <HAL_GPIO_Init+0x338>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x232>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_GPIO_Init+0x33c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x22e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a53      	ldr	r2, [pc, #332]	; (8001fa0 <HAL_GPIO_Init+0x340>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x22a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x344>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x226>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_GPIO_Init+0x348>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x222>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_GPIO_Init+0x34c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x21e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4f      	ldr	r2, [pc, #316]	; (8001fb0 <HAL_GPIO_Init+0x350>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x21a>
 8001e76:	2309      	movs	r3, #9
 8001e78:	e012      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	e010      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00e      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x328>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae84 	bls.w	8001c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40021c00 	.word	0x40021c00
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022400 	.word	0x40022400
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e267      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x108>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e242      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x74>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fe74 	bl	8000d5c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fe70 	bl	8000d5c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e207      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xc0>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fe60 	bl	8000d5c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe fe5c 	bl	8000d5c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1f3      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0xe8>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c7      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fe15 	bl	8000d5c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fe11 	bl	8000d5c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a8      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fdf4 	bl	8000d5c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe fdf0 	bl	8000d5c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e187      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fdd4 	bl	8000d5c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fdd0 	bl	8000d5c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e167      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x200>
 80021d6:	e01b      	b.n	8002210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe fdbd 	bl	8000d5c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e00e      	b.n	8002204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe fdb9 	bl	8000d5c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d907      	bls.n	8002204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e150      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ea      	bne.n	80021e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8097 	beq.w	800234c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a7c      	ldr	r2, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe fd79 	bl	8000d5c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe fd75 	bl	8000d5c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e10c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2ea>
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x30c>
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fd3a 	bl	8000d5c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd36 	bl	8000d5c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0cb      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x334>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fd24 	bl	8000d5c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fd20 	bl	8000d5c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0b5      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a1 	beq.w	8002498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d05c      	beq.n	800241c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d141      	bne.n	80023ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fcf4 	bl	8000d5c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fcf0 	bl	8000d5c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e087      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	3b01      	subs	r3, #1
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fcc9 	bl	8000d5c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fcc5 	bl	8000d5c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e05c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x416>
 80023ec:	e054      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fcb2 	bl	8000d5c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fcae 	bl	8000d5c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e045      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
 800241a:	e03d      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e038      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d028      	beq.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d121      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11a      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fbe0 	bl	8000d5c <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fbdc 	bl	8000d5c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb40 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	08003a30 	.word	0x08003a30
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b094      	sub	sp, #80	; 0x50
 800267a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
 8002680:	2300      	movs	r3, #0
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002684:	2300      	movs	r3, #0
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d00d      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002698:	2b08      	cmp	r3, #8
 800269a:	f200 80e1 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x3a>
 80026a6:	e0db      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026ac:	e0db      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_GetSysClockFreq+0x208>)
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b2:	e0d8      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ca:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	2200      	movs	r2, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026e6:	4622      	mov	r2, r4
 80026e8:	462b      	mov	r3, r5
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	0159      	lsls	r1, r3, #5
 80026f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f8:	0150      	lsls	r0, r2, #5
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4621      	mov	r1, r4
 8002700:	1a51      	subs	r1, r2, r1
 8002702:	6139      	str	r1, [r7, #16]
 8002704:	4629      	mov	r1, r5
 8002706:	eb63 0301 	sbc.w	r3, r3, r1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002718:	4659      	mov	r1, fp
 800271a:	018b      	lsls	r3, r1, #6
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002722:	4651      	mov	r1, sl
 8002724:	018a      	lsls	r2, r1, #6
 8002726:	4651      	mov	r1, sl
 8002728:	ebb2 0801 	subs.w	r8, r2, r1
 800272c:	4659      	mov	r1, fp
 800272e:	eb63 0901 	sbc.w	r9, r3, r1
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800273e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002746:	4690      	mov	r8, r2
 8002748:	4699      	mov	r9, r3
 800274a:	4623      	mov	r3, r4
 800274c:	eb18 0303 	adds.w	r3, r8, r3
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	462b      	mov	r3, r5
 8002754:	eb49 0303 	adc.w	r3, r9, r3
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002766:	4629      	mov	r1, r5
 8002768:	024b      	lsls	r3, r1, #9
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002770:	4621      	mov	r1, r4
 8002772:	024a      	lsls	r2, r1, #9
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	2200      	movs	r2, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
 800277e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002784:	f7fd fd8c 	bl	80002a0 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	e058      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	2200      	movs	r2, #0
 800279a:	4618      	mov	r0, r3
 800279c:	4611      	mov	r1, r2
 800279e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	0159      	lsls	r1, r3, #5
 80027ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027be:	0150      	lsls	r0, r2, #5
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4641      	mov	r1, r8
 80027c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027e4:	ebb2 040a 	subs.w	r4, r2, sl
 80027e8:	eb63 050b 	sbc.w	r5, r3, fp
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	00eb      	lsls	r3, r5, #3
 80027f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fa:	00e2      	lsls	r2, r4, #3
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	4643      	mov	r3, r8
 8002802:	18e3      	adds	r3, r4, r3
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	464b      	mov	r3, r9
 8002808:	eb45 0303 	adc.w	r3, r5, r3
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4629      	mov	r1, r5
 800281c:	028b      	lsls	r3, r1, #10
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002824:	4621      	mov	r1, r4
 8002826:	028a      	lsls	r2, r1, #10
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	61fa      	str	r2, [r7, #28]
 8002834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002838:	f7fd fd32 	bl	80002a0 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002868:	4618      	mov	r0, r3
 800286a:	3750      	adds	r7, #80	; 0x50
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08003a40 	.word	0x08003a40

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08003a40 	.word	0x08003a40

080028e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e03f      	b.n	800297a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f8ac 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f929 	bl	8002b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b08a      	sub	sp, #40	; 0x28
 8002986:	af02      	add	r7, sp, #8
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d17c      	bne.n	8002a9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_UART_Transmit+0x2c>
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e075      	b.n	8002a9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Transmit+0x3e>
 80029bc:	2302      	movs	r3, #2
 80029be:	e06e      	b.n	8002a9e <HAL_UART_Transmit+0x11c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2221      	movs	r2, #33	; 0x21
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d6:	f7fe f9c1 	bl	8000d5c <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f0:	d108      	bne.n	8002a04 <HAL_UART_Transmit+0x82>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e003      	b.n	8002a0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a14:	e02a      	b.n	8002a6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f840 	bl	8002aa6 <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e036      	b.n	8002a9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	3302      	adds	r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e007      	b.n	8002a5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1cf      	bne.n	8002a16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f810 	bl	8002aa6 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e006      	b.n	8002a9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b090      	sub	sp, #64	; 0x40
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab6:	e050      	b.n	8002b5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d04c      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac6:	f7fe f949 	bl	8000d5c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d241      	bcs.n	8002b5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af6:	637a      	str	r2, [r7, #52]	; 0x34
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e5      	bne.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3314      	adds	r3, #20
 8002b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b2a:	623a      	str	r2, [r7, #32]
 8002b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	69f9      	ldr	r1, [r7, #28]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00f      	b.n	8002b7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4013      	ands	r3, r2
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d09f      	beq.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3740      	adds	r7, #64	; 0x40
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b0c0      	sub	sp, #256	; 0x100
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	68d9      	ldr	r1, [r3, #12]
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	ea40 0301 	orr.w	r3, r0, r1
 8002bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bdc:	f021 010c 	bic.w	r1, r1, #12
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bea:	430b      	orrs	r3, r1
 8002bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	6999      	ldr	r1, [r3, #24]
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	ea40 0301 	orr.w	r3, r0, r1
 8002c0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b8f      	ldr	r3, [pc, #572]	; (8002e50 <UART_SetConfig+0x2cc>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d005      	beq.n	8002c24 <UART_SetConfig+0xa0>
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <UART_SetConfig+0x2d0>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d104      	bne.n	8002c2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff fe4c 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8002c28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c2c:	e003      	b.n	8002c36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c2e:	f7ff fe33 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8002c32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	f040 810c 	bne.w	8002e5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c56:	4622      	mov	r2, r4
 8002c58:	462b      	mov	r3, r5
 8002c5a:	1891      	adds	r1, r2, r2
 8002c5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c5e:	415b      	adcs	r3, r3
 8002c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c66:	4621      	mov	r1, r4
 8002c68:	eb12 0801 	adds.w	r8, r2, r1
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb43 0901 	adc.w	r9, r3, r1
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c86:	4690      	mov	r8, r2
 8002c88:	4699      	mov	r9, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	eb18 0303 	adds.w	r3, r8, r3
 8002c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c94:	462b      	mov	r3, r5
 8002c96:	eb49 0303 	adc.w	r3, r9, r3
 8002c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002caa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	18db      	adds	r3, r3, r3
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb8:	4613      	mov	r3, r2
 8002cba:	eb42 0303 	adc.w	r3, r2, r3
 8002cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cc8:	f7fd faea 	bl	80002a0 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <UART_SetConfig+0x2d4>)
 8002cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	011c      	lsls	r4, r3, #4
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ce8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	eb12 0a01 	adds.w	sl, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb43 0b01 	adc.w	fp, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d1c:	4692      	mov	sl, r2
 8002d1e:	469b      	mov	fp, r3
 8002d20:	4643      	mov	r3, r8
 8002d22:	eb1a 0303 	adds.w	r3, sl, r3
 8002d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	18db      	adds	r3, r3, r3
 8002d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d4e:	4613      	mov	r3, r2
 8002d50:	eb42 0303 	adc.w	r3, r2, r3
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
 8002d56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d5e:	f7fd fa9f 	bl	80002a0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <UART_SetConfig+0x2d4>)
 8002d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2264      	movs	r2, #100	; 0x64
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	1acb      	subs	r3, r1, r3
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <UART_SetConfig+0x2d4>)
 8002d80:	fba3 2302 	umull	r2, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d8c:	441c      	add	r4, r3
 8002d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	1891      	adds	r1, r2, r2
 8002da6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002da8:	415b      	adcs	r3, r3
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002db0:	4641      	mov	r1, r8
 8002db2:	1851      	adds	r1, r2, r1
 8002db4:	6339      	str	r1, [r7, #48]	; 0x30
 8002db6:	4649      	mov	r1, r9
 8002db8:	414b      	adcs	r3, r1
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dc8:	4659      	mov	r1, fp
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	4651      	mov	r1, sl
 8002dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	00ca      	lsls	r2, r1, #3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4642      	mov	r2, r8
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de4:	464b      	mov	r3, r9
 8002de6:	460a      	mov	r2, r1
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e04:	460b      	mov	r3, r1
 8002e06:	18db      	adds	r3, r3, r3
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	eb42 0303 	adc.w	r3, r2, r3
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e1a:	f7fd fa41 	bl	80002a0 <__aeabi_uldivmod>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <UART_SetConfig+0x2d4>)
 8002e24:	fba3 1302 	umull	r1, r3, r3, r2
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	2164      	movs	r1, #100	; 0x64
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3332      	adds	r3, #50	; 0x32
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <UART_SetConfig+0x2d4>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4422      	add	r2, r4
 8002e4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e4c:	e105      	b.n	800305a <UART_SetConfig+0x4d6>
 8002e4e:	bf00      	nop
 8002e50:	40011000 	.word	0x40011000
 8002e54:	40011400 	.word	0x40011400
 8002e58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e6e:	4642      	mov	r2, r8
 8002e70:	464b      	mov	r3, r9
 8002e72:	1891      	adds	r1, r2, r2
 8002e74:	6239      	str	r1, [r7, #32]
 8002e76:	415b      	adcs	r3, r3
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e7e:	4641      	mov	r1, r8
 8002e80:	1854      	adds	r4, r2, r1
 8002e82:	4649      	mov	r1, r9
 8002e84:	eb43 0501 	adc.w	r5, r3, r1
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	00eb      	lsls	r3, r5, #3
 8002e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e96:	00e2      	lsls	r2, r4, #3
 8002e98:	4614      	mov	r4, r2
 8002e9a:	461d      	mov	r5, r3
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	18e3      	adds	r3, r4, r3
 8002ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	eb45 0303 	adc.w	r3, r5, r3
 8002eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eca:	4629      	mov	r1, r5
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	4621      	mov	r1, r4
 8002ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	008a      	lsls	r2, r1, #2
 8002ed8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002edc:	f7fd f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <UART_SetConfig+0x4e4>)
 8002ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	011c      	lsls	r4, r3, #4
 8002eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ef8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002efc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	61b9      	str	r1, [r7, #24]
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6139      	str	r1, [r7, #16]
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f44:	464b      	mov	r3, r9
 8002f46:	460a      	mov	r2, r1
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f68:	4649      	mov	r1, r9
 8002f6a:	008b      	lsls	r3, r1, #2
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f72:	4641      	mov	r1, r8
 8002f74:	008a      	lsls	r2, r1, #2
 8002f76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f7a:	f7fd f991 	bl	80002a0 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <UART_SetConfig+0x4e4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <UART_SetConfig+0x4e4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa2:	441c      	add	r4, r3
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	673b      	str	r3, [r7, #112]	; 0x70
 8002fac:	677a      	str	r2, [r7, #116]	; 0x74
 8002fae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	1891      	adds	r1, r2, r2
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	415b      	adcs	r3, r3
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	1851      	adds	r1, r2, r1
 8002fc6:	6039      	str	r1, [r7, #0]
 8002fc8:	4649      	mov	r1, r9
 8002fca:	414b      	adcs	r3, r1
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fda:	4659      	mov	r1, fp
 8002fdc:	00cb      	lsls	r3, r1, #3
 8002fde:	4651      	mov	r1, sl
 8002fe0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	00ca      	lsls	r2, r1, #3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	4603      	mov	r3, r0
 8002fee:	4642      	mov	r2, r8
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	663b      	str	r3, [r7, #96]	; 0x60
 8003008:	667a      	str	r2, [r7, #100]	; 0x64
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003016:	4649      	mov	r1, r9
 8003018:	008b      	lsls	r3, r1, #2
 800301a:	4641      	mov	r1, r8
 800301c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003020:	4641      	mov	r1, r8
 8003022:	008a      	lsls	r2, r1, #2
 8003024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003028:	f7fd f93a 	bl	80002a0 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <UART_SetConfig+0x4e4>)
 8003032:	fba3 1302 	umull	r1, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2164      	movs	r1, #100	; 0x64
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <UART_SetConfig+0x4e4>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4422      	add	r2, r4
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	bf00      	nop
 800305c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003060:	46bd      	mov	sp, r7
 8003062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003066:	bf00      	nop
 8003068:	51eb851f 	.word	0x51eb851f

0800306c <__errno>:
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <__errno+0x8>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	2000000c 	.word	0x2000000c

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 fc8e 	bl	80039ac <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003a84 	.word	0x08003a84
 80030b4:	08003a84 	.word	0x08003a84
 80030b8:	08003a84 	.word	0x08003a84
 80030bc:	08003a88 	.word	0x08003a88

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <siprintf>:
 80030d0:	b40e      	push	{r1, r2, r3}
 80030d2:	b500      	push	{lr}
 80030d4:	b09c      	sub	sp, #112	; 0x70
 80030d6:	ab1d      	add	r3, sp, #116	; 0x74
 80030d8:	9002      	str	r0, [sp, #8]
 80030da:	9006      	str	r0, [sp, #24]
 80030dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <siprintf+0x38>)
 80030e2:	9107      	str	r1, [sp, #28]
 80030e4:	9104      	str	r1, [sp, #16]
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <siprintf+0x3c>)
 80030e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ec:	9105      	str	r1, [sp, #20]
 80030ee:	6800      	ldr	r0, [r0, #0]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	a902      	add	r1, sp, #8
 80030f4:	f000 f868 	bl	80031c8 <_svfiprintf_r>
 80030f8:	9b02      	ldr	r3, [sp, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	b01c      	add	sp, #112	; 0x70
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
 8003104:	b003      	add	sp, #12
 8003106:	4770      	bx	lr
 8003108:	2000000c 	.word	0x2000000c
 800310c:	ffff0208 	.word	0xffff0208

08003110 <__ssputs_r>:
 8003110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003114:	688e      	ldr	r6, [r1, #8]
 8003116:	429e      	cmp	r6, r3
 8003118:	4682      	mov	sl, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4690      	mov	r8, r2
 800311e:	461f      	mov	r7, r3
 8003120:	d838      	bhi.n	8003194 <__ssputs_r+0x84>
 8003122:	898a      	ldrh	r2, [r1, #12]
 8003124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003128:	d032      	beq.n	8003190 <__ssputs_r+0x80>
 800312a:	6825      	ldr	r5, [r4, #0]
 800312c:	6909      	ldr	r1, [r1, #16]
 800312e:	eba5 0901 	sub.w	r9, r5, r1
 8003132:	6965      	ldr	r5, [r4, #20]
 8003134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800313c:	3301      	adds	r3, #1
 800313e:	444b      	add	r3, r9
 8003140:	106d      	asrs	r5, r5, #1
 8003142:	429d      	cmp	r5, r3
 8003144:	bf38      	it	cc
 8003146:	461d      	movcc	r5, r3
 8003148:	0553      	lsls	r3, r2, #21
 800314a:	d531      	bpl.n	80031b0 <__ssputs_r+0xa0>
 800314c:	4629      	mov	r1, r5
 800314e:	f000 fb63 	bl	8003818 <_malloc_r>
 8003152:	4606      	mov	r6, r0
 8003154:	b950      	cbnz	r0, 800316c <__ssputs_r+0x5c>
 8003156:	230c      	movs	r3, #12
 8003158:	f8ca 3000 	str.w	r3, [sl]
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316c:	6921      	ldr	r1, [r4, #16]
 800316e:	464a      	mov	r2, r9
 8003170:	f000 fabe 	bl	80036f0 <memcpy>
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317e:	81a3      	strh	r3, [r4, #12]
 8003180:	6126      	str	r6, [r4, #16]
 8003182:	6165      	str	r5, [r4, #20]
 8003184:	444e      	add	r6, r9
 8003186:	eba5 0509 	sub.w	r5, r5, r9
 800318a:	6026      	str	r6, [r4, #0]
 800318c:	60a5      	str	r5, [r4, #8]
 800318e:	463e      	mov	r6, r7
 8003190:	42be      	cmp	r6, r7
 8003192:	d900      	bls.n	8003196 <__ssputs_r+0x86>
 8003194:	463e      	mov	r6, r7
 8003196:	6820      	ldr	r0, [r4, #0]
 8003198:	4632      	mov	r2, r6
 800319a:	4641      	mov	r1, r8
 800319c:	f000 fab6 	bl	800370c <memmove>
 80031a0:	68a3      	ldr	r3, [r4, #8]
 80031a2:	1b9b      	subs	r3, r3, r6
 80031a4:	60a3      	str	r3, [r4, #8]
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	4433      	add	r3, r6
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	2000      	movs	r0, #0
 80031ae:	e7db      	b.n	8003168 <__ssputs_r+0x58>
 80031b0:	462a      	mov	r2, r5
 80031b2:	f000 fba5 	bl	8003900 <_realloc_r>
 80031b6:	4606      	mov	r6, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d1e1      	bne.n	8003180 <__ssputs_r+0x70>
 80031bc:	6921      	ldr	r1, [r4, #16]
 80031be:	4650      	mov	r0, sl
 80031c0:	f000 fabe 	bl	8003740 <_free_r>
 80031c4:	e7c7      	b.n	8003156 <__ssputs_r+0x46>
	...

080031c8 <_svfiprintf_r>:
 80031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031cc:	4698      	mov	r8, r3
 80031ce:	898b      	ldrh	r3, [r1, #12]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	b09d      	sub	sp, #116	; 0x74
 80031d4:	4607      	mov	r7, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4614      	mov	r4, r2
 80031da:	d50e      	bpl.n	80031fa <_svfiprintf_r+0x32>
 80031dc:	690b      	ldr	r3, [r1, #16]
 80031de:	b963      	cbnz	r3, 80031fa <_svfiprintf_r+0x32>
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	f000 fb19 	bl	8003818 <_malloc_r>
 80031e6:	6028      	str	r0, [r5, #0]
 80031e8:	6128      	str	r0, [r5, #16]
 80031ea:	b920      	cbnz	r0, 80031f6 <_svfiprintf_r+0x2e>
 80031ec:	230c      	movs	r3, #12
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	e0d1      	b.n	800339a <_svfiprintf_r+0x1d2>
 80031f6:	2340      	movs	r3, #64	; 0x40
 80031f8:	616b      	str	r3, [r5, #20]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9309      	str	r3, [sp, #36]	; 0x24
 80031fe:	2320      	movs	r3, #32
 8003200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003204:	f8cd 800c 	str.w	r8, [sp, #12]
 8003208:	2330      	movs	r3, #48	; 0x30
 800320a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80033b4 <_svfiprintf_r+0x1ec>
 800320e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003212:	f04f 0901 	mov.w	r9, #1
 8003216:	4623      	mov	r3, r4
 8003218:	469a      	mov	sl, r3
 800321a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321e:	b10a      	cbz	r2, 8003224 <_svfiprintf_r+0x5c>
 8003220:	2a25      	cmp	r2, #37	; 0x25
 8003222:	d1f9      	bne.n	8003218 <_svfiprintf_r+0x50>
 8003224:	ebba 0b04 	subs.w	fp, sl, r4
 8003228:	d00b      	beq.n	8003242 <_svfiprintf_r+0x7a>
 800322a:	465b      	mov	r3, fp
 800322c:	4622      	mov	r2, r4
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff ff6d 	bl	8003110 <__ssputs_r>
 8003236:	3001      	adds	r0, #1
 8003238:	f000 80aa 	beq.w	8003390 <_svfiprintf_r+0x1c8>
 800323c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800323e:	445a      	add	r2, fp
 8003240:	9209      	str	r2, [sp, #36]	; 0x24
 8003242:	f89a 3000 	ldrb.w	r3, [sl]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80a2 	beq.w	8003390 <_svfiprintf_r+0x1c8>
 800324c:	2300      	movs	r3, #0
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003256:	f10a 0a01 	add.w	sl, sl, #1
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	9307      	str	r3, [sp, #28]
 800325e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003262:	931a      	str	r3, [sp, #104]	; 0x68
 8003264:	4654      	mov	r4, sl
 8003266:	2205      	movs	r2, #5
 8003268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326c:	4851      	ldr	r0, [pc, #324]	; (80033b4 <_svfiprintf_r+0x1ec>)
 800326e:	f7fc ffc7 	bl	8000200 <memchr>
 8003272:	9a04      	ldr	r2, [sp, #16]
 8003274:	b9d8      	cbnz	r0, 80032ae <_svfiprintf_r+0xe6>
 8003276:	06d0      	lsls	r0, r2, #27
 8003278:	bf44      	itt	mi
 800327a:	2320      	movmi	r3, #32
 800327c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003280:	0711      	lsls	r1, r2, #28
 8003282:	bf44      	itt	mi
 8003284:	232b      	movmi	r3, #43	; 0x2b
 8003286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328a:	f89a 3000 	ldrb.w	r3, [sl]
 800328e:	2b2a      	cmp	r3, #42	; 0x2a
 8003290:	d015      	beq.n	80032be <_svfiprintf_r+0xf6>
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4654      	mov	r4, sl
 8003296:	2000      	movs	r0, #0
 8003298:	f04f 0c0a 	mov.w	ip, #10
 800329c:	4621      	mov	r1, r4
 800329e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a2:	3b30      	subs	r3, #48	; 0x30
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	d94e      	bls.n	8003346 <_svfiprintf_r+0x17e>
 80032a8:	b1b0      	cbz	r0, 80032d8 <_svfiprintf_r+0x110>
 80032aa:	9207      	str	r2, [sp, #28]
 80032ac:	e014      	b.n	80032d8 <_svfiprintf_r+0x110>
 80032ae:	eba0 0308 	sub.w	r3, r0, r8
 80032b2:	fa09 f303 	lsl.w	r3, r9, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	46a2      	mov	sl, r4
 80032bc:	e7d2      	b.n	8003264 <_svfiprintf_r+0x9c>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	1d19      	adds	r1, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9103      	str	r1, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfbb      	ittet	lt
 80032ca:	425b      	neglt	r3, r3
 80032cc:	f042 0202 	orrlt.w	r2, r2, #2
 80032d0:	9307      	strge	r3, [sp, #28]
 80032d2:	9307      	strlt	r3, [sp, #28]
 80032d4:	bfb8      	it	lt
 80032d6:	9204      	strlt	r2, [sp, #16]
 80032d8:	7823      	ldrb	r3, [r4, #0]
 80032da:	2b2e      	cmp	r3, #46	; 0x2e
 80032dc:	d10c      	bne.n	80032f8 <_svfiprintf_r+0x130>
 80032de:	7863      	ldrb	r3, [r4, #1]
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d135      	bne.n	8003350 <_svfiprintf_r+0x188>
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bfb8      	it	lt
 80032f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f4:	3402      	adds	r4, #2
 80032f6:	9305      	str	r3, [sp, #20]
 80032f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033c4 <_svfiprintf_r+0x1fc>
 80032fc:	7821      	ldrb	r1, [r4, #0]
 80032fe:	2203      	movs	r2, #3
 8003300:	4650      	mov	r0, sl
 8003302:	f7fc ff7d 	bl	8000200 <memchr>
 8003306:	b140      	cbz	r0, 800331a <_svfiprintf_r+0x152>
 8003308:	2340      	movs	r3, #64	; 0x40
 800330a:	eba0 000a 	sub.w	r0, r0, sl
 800330e:	fa03 f000 	lsl.w	r0, r3, r0
 8003312:	9b04      	ldr	r3, [sp, #16]
 8003314:	4303      	orrs	r3, r0
 8003316:	3401      	adds	r4, #1
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331e:	4826      	ldr	r0, [pc, #152]	; (80033b8 <_svfiprintf_r+0x1f0>)
 8003320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003324:	2206      	movs	r2, #6
 8003326:	f7fc ff6b 	bl	8000200 <memchr>
 800332a:	2800      	cmp	r0, #0
 800332c:	d038      	beq.n	80033a0 <_svfiprintf_r+0x1d8>
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <_svfiprintf_r+0x1f4>)
 8003330:	bb1b      	cbnz	r3, 800337a <_svfiprintf_r+0x1b2>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	3307      	adds	r3, #7
 8003336:	f023 0307 	bic.w	r3, r3, #7
 800333a:	3308      	adds	r3, #8
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003340:	4433      	add	r3, r6
 8003342:	9309      	str	r3, [sp, #36]	; 0x24
 8003344:	e767      	b.n	8003216 <_svfiprintf_r+0x4e>
 8003346:	fb0c 3202 	mla	r2, ip, r2, r3
 800334a:	460c      	mov	r4, r1
 800334c:	2001      	movs	r0, #1
 800334e:	e7a5      	b.n	800329c <_svfiprintf_r+0xd4>
 8003350:	2300      	movs	r3, #0
 8003352:	3401      	adds	r4, #1
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0c0a 	mov.w	ip, #10
 800335c:	4620      	mov	r0, r4
 800335e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003362:	3a30      	subs	r2, #48	; 0x30
 8003364:	2a09      	cmp	r2, #9
 8003366:	d903      	bls.n	8003370 <_svfiprintf_r+0x1a8>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0c5      	beq.n	80032f8 <_svfiprintf_r+0x130>
 800336c:	9105      	str	r1, [sp, #20]
 800336e:	e7c3      	b.n	80032f8 <_svfiprintf_r+0x130>
 8003370:	fb0c 2101 	mla	r1, ip, r1, r2
 8003374:	4604      	mov	r4, r0
 8003376:	2301      	movs	r3, #1
 8003378:	e7f0      	b.n	800335c <_svfiprintf_r+0x194>
 800337a:	ab03      	add	r3, sp, #12
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	462a      	mov	r2, r5
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <_svfiprintf_r+0x1f8>)
 8003382:	a904      	add	r1, sp, #16
 8003384:	4638      	mov	r0, r7
 8003386:	f3af 8000 	nop.w
 800338a:	1c42      	adds	r2, r0, #1
 800338c:	4606      	mov	r6, r0
 800338e:	d1d6      	bne.n	800333e <_svfiprintf_r+0x176>
 8003390:	89ab      	ldrh	r3, [r5, #12]
 8003392:	065b      	lsls	r3, r3, #25
 8003394:	f53f af2c 	bmi.w	80031f0 <_svfiprintf_r+0x28>
 8003398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339a:	b01d      	add	sp, #116	; 0x74
 800339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a0:	ab03      	add	r3, sp, #12
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	462a      	mov	r2, r5
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <_svfiprintf_r+0x1f8>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	4638      	mov	r0, r7
 80033ac:	f000 f87a 	bl	80034a4 <_printf_i>
 80033b0:	e7eb      	b.n	800338a <_svfiprintf_r+0x1c2>
 80033b2:	bf00      	nop
 80033b4:	08003a48 	.word	0x08003a48
 80033b8:	08003a52 	.word	0x08003a52
 80033bc:	00000000 	.word	0x00000000
 80033c0:	08003111 	.word	0x08003111
 80033c4:	08003a4e 	.word	0x08003a4e

080033c8 <_printf_common>:
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	4616      	mov	r6, r2
 80033ce:	4699      	mov	r9, r3
 80033d0:	688a      	ldr	r2, [r1, #8]
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033d8:	4293      	cmp	r3, r2
 80033da:	bfb8      	it	lt
 80033dc:	4613      	movlt	r3, r2
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033e4:	4607      	mov	r7, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	b10a      	cbz	r2, 80033ee <_printf_common+0x26>
 80033ea:	3301      	adds	r3, #1
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	0699      	lsls	r1, r3, #26
 80033f2:	bf42      	ittt	mi
 80033f4:	6833      	ldrmi	r3, [r6, #0]
 80033f6:	3302      	addmi	r3, #2
 80033f8:	6033      	strmi	r3, [r6, #0]
 80033fa:	6825      	ldr	r5, [r4, #0]
 80033fc:	f015 0506 	ands.w	r5, r5, #6
 8003400:	d106      	bne.n	8003410 <_printf_common+0x48>
 8003402:	f104 0a19 	add.w	sl, r4, #25
 8003406:	68e3      	ldr	r3, [r4, #12]
 8003408:	6832      	ldr	r2, [r6, #0]
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	42ab      	cmp	r3, r5
 800340e:	dc26      	bgt.n	800345e <_printf_common+0x96>
 8003410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003414:	1e13      	subs	r3, r2, #0
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	bf18      	it	ne
 800341a:	2301      	movne	r3, #1
 800341c:	0692      	lsls	r2, r2, #26
 800341e:	d42b      	bmi.n	8003478 <_printf_common+0xb0>
 8003420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003424:	4649      	mov	r1, r9
 8003426:	4638      	mov	r0, r7
 8003428:	47c0      	blx	r8
 800342a:	3001      	adds	r0, #1
 800342c:	d01e      	beq.n	800346c <_printf_common+0xa4>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	68e5      	ldr	r5, [r4, #12]
 8003432:	6832      	ldr	r2, [r6, #0]
 8003434:	f003 0306 	and.w	r3, r3, #6
 8003438:	2b04      	cmp	r3, #4
 800343a:	bf08      	it	eq
 800343c:	1aad      	subeq	r5, r5, r2
 800343e:	68a3      	ldr	r3, [r4, #8]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	bf0c      	ite	eq
 8003444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003448:	2500      	movne	r5, #0
 800344a:	4293      	cmp	r3, r2
 800344c:	bfc4      	itt	gt
 800344e:	1a9b      	subgt	r3, r3, r2
 8003450:	18ed      	addgt	r5, r5, r3
 8003452:	2600      	movs	r6, #0
 8003454:	341a      	adds	r4, #26
 8003456:	42b5      	cmp	r5, r6
 8003458:	d11a      	bne.n	8003490 <_printf_common+0xc8>
 800345a:	2000      	movs	r0, #0
 800345c:	e008      	b.n	8003470 <_printf_common+0xa8>
 800345e:	2301      	movs	r3, #1
 8003460:	4652      	mov	r2, sl
 8003462:	4649      	mov	r1, r9
 8003464:	4638      	mov	r0, r7
 8003466:	47c0      	blx	r8
 8003468:	3001      	adds	r0, #1
 800346a:	d103      	bne.n	8003474 <_printf_common+0xac>
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003474:	3501      	adds	r5, #1
 8003476:	e7c6      	b.n	8003406 <_printf_common+0x3e>
 8003478:	18e1      	adds	r1, r4, r3
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	2030      	movs	r0, #48	; 0x30
 800347e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003482:	4422      	add	r2, r4
 8003484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800348c:	3302      	adds	r3, #2
 800348e:	e7c7      	b.n	8003420 <_printf_common+0x58>
 8003490:	2301      	movs	r3, #1
 8003492:	4622      	mov	r2, r4
 8003494:	4649      	mov	r1, r9
 8003496:	4638      	mov	r0, r7
 8003498:	47c0      	blx	r8
 800349a:	3001      	adds	r0, #1
 800349c:	d0e6      	beq.n	800346c <_printf_common+0xa4>
 800349e:	3601      	adds	r6, #1
 80034a0:	e7d9      	b.n	8003456 <_printf_common+0x8e>
	...

080034a4 <_printf_i>:
 80034a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	7e0f      	ldrb	r7, [r1, #24]
 80034aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034ac:	2f78      	cmp	r7, #120	; 0x78
 80034ae:	4691      	mov	r9, r2
 80034b0:	4680      	mov	r8, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	469a      	mov	sl, r3
 80034b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034ba:	d807      	bhi.n	80034cc <_printf_i+0x28>
 80034bc:	2f62      	cmp	r7, #98	; 0x62
 80034be:	d80a      	bhi.n	80034d6 <_printf_i+0x32>
 80034c0:	2f00      	cmp	r7, #0
 80034c2:	f000 80d8 	beq.w	8003676 <_printf_i+0x1d2>
 80034c6:	2f58      	cmp	r7, #88	; 0x58
 80034c8:	f000 80a3 	beq.w	8003612 <_printf_i+0x16e>
 80034cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034d4:	e03a      	b.n	800354c <_printf_i+0xa8>
 80034d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034da:	2b15      	cmp	r3, #21
 80034dc:	d8f6      	bhi.n	80034cc <_printf_i+0x28>
 80034de:	a101      	add	r1, pc, #4	; (adr r1, 80034e4 <_printf_i+0x40>)
 80034e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034e4:	0800353d 	.word	0x0800353d
 80034e8:	08003551 	.word	0x08003551
 80034ec:	080034cd 	.word	0x080034cd
 80034f0:	080034cd 	.word	0x080034cd
 80034f4:	080034cd 	.word	0x080034cd
 80034f8:	080034cd 	.word	0x080034cd
 80034fc:	08003551 	.word	0x08003551
 8003500:	080034cd 	.word	0x080034cd
 8003504:	080034cd 	.word	0x080034cd
 8003508:	080034cd 	.word	0x080034cd
 800350c:	080034cd 	.word	0x080034cd
 8003510:	0800365d 	.word	0x0800365d
 8003514:	08003581 	.word	0x08003581
 8003518:	0800363f 	.word	0x0800363f
 800351c:	080034cd 	.word	0x080034cd
 8003520:	080034cd 	.word	0x080034cd
 8003524:	0800367f 	.word	0x0800367f
 8003528:	080034cd 	.word	0x080034cd
 800352c:	08003581 	.word	0x08003581
 8003530:	080034cd 	.word	0x080034cd
 8003534:	080034cd 	.word	0x080034cd
 8003538:	08003647 	.word	0x08003647
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	602a      	str	r2, [r5, #0]
 8003544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800354c:	2301      	movs	r3, #1
 800354e:	e0a3      	b.n	8003698 <_printf_i+0x1f4>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	6829      	ldr	r1, [r5, #0]
 8003554:	0606      	lsls	r6, r0, #24
 8003556:	f101 0304 	add.w	r3, r1, #4
 800355a:	d50a      	bpl.n	8003572 <_printf_i+0xce>
 800355c:	680e      	ldr	r6, [r1, #0]
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	2e00      	cmp	r6, #0
 8003562:	da03      	bge.n	800356c <_printf_i+0xc8>
 8003564:	232d      	movs	r3, #45	; 0x2d
 8003566:	4276      	negs	r6, r6
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356c:	485e      	ldr	r0, [pc, #376]	; (80036e8 <_printf_i+0x244>)
 800356e:	230a      	movs	r3, #10
 8003570:	e019      	b.n	80035a6 <_printf_i+0x102>
 8003572:	680e      	ldr	r6, [r1, #0]
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800357a:	bf18      	it	ne
 800357c:	b236      	sxthne	r6, r6
 800357e:	e7ef      	b.n	8003560 <_printf_i+0xbc>
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	1d19      	adds	r1, r3, #4
 8003586:	6029      	str	r1, [r5, #0]
 8003588:	0601      	lsls	r1, r0, #24
 800358a:	d501      	bpl.n	8003590 <_printf_i+0xec>
 800358c:	681e      	ldr	r6, [r3, #0]
 800358e:	e002      	b.n	8003596 <_printf_i+0xf2>
 8003590:	0646      	lsls	r6, r0, #25
 8003592:	d5fb      	bpl.n	800358c <_printf_i+0xe8>
 8003594:	881e      	ldrh	r6, [r3, #0]
 8003596:	4854      	ldr	r0, [pc, #336]	; (80036e8 <_printf_i+0x244>)
 8003598:	2f6f      	cmp	r7, #111	; 0x6f
 800359a:	bf0c      	ite	eq
 800359c:	2308      	moveq	r3, #8
 800359e:	230a      	movne	r3, #10
 80035a0:	2100      	movs	r1, #0
 80035a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035a6:	6865      	ldr	r5, [r4, #4]
 80035a8:	60a5      	str	r5, [r4, #8]
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	bfa2      	ittt	ge
 80035ae:	6821      	ldrge	r1, [r4, #0]
 80035b0:	f021 0104 	bicge.w	r1, r1, #4
 80035b4:	6021      	strge	r1, [r4, #0]
 80035b6:	b90e      	cbnz	r6, 80035bc <_printf_i+0x118>
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	d04d      	beq.n	8003658 <_printf_i+0x1b4>
 80035bc:	4615      	mov	r5, r2
 80035be:	fbb6 f1f3 	udiv	r1, r6, r3
 80035c2:	fb03 6711 	mls	r7, r3, r1, r6
 80035c6:	5dc7      	ldrb	r7, [r0, r7]
 80035c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035cc:	4637      	mov	r7, r6
 80035ce:	42bb      	cmp	r3, r7
 80035d0:	460e      	mov	r6, r1
 80035d2:	d9f4      	bls.n	80035be <_printf_i+0x11a>
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d10b      	bne.n	80035f0 <_printf_i+0x14c>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	07de      	lsls	r6, r3, #31
 80035dc:	d508      	bpl.n	80035f0 <_printf_i+0x14c>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	6861      	ldr	r1, [r4, #4]
 80035e2:	4299      	cmp	r1, r3
 80035e4:	bfde      	ittt	le
 80035e6:	2330      	movle	r3, #48	; 0x30
 80035e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035f0:	1b52      	subs	r2, r2, r5
 80035f2:	6122      	str	r2, [r4, #16]
 80035f4:	f8cd a000 	str.w	sl, [sp]
 80035f8:	464b      	mov	r3, r9
 80035fa:	aa03      	add	r2, sp, #12
 80035fc:	4621      	mov	r1, r4
 80035fe:	4640      	mov	r0, r8
 8003600:	f7ff fee2 	bl	80033c8 <_printf_common>
 8003604:	3001      	adds	r0, #1
 8003606:	d14c      	bne.n	80036a2 <_printf_i+0x1fe>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	b004      	add	sp, #16
 800360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003612:	4835      	ldr	r0, [pc, #212]	; (80036e8 <_printf_i+0x244>)
 8003614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003618:	6829      	ldr	r1, [r5, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003620:	6029      	str	r1, [r5, #0]
 8003622:	061d      	lsls	r5, r3, #24
 8003624:	d514      	bpl.n	8003650 <_printf_i+0x1ac>
 8003626:	07df      	lsls	r7, r3, #31
 8003628:	bf44      	itt	mi
 800362a:	f043 0320 	orrmi.w	r3, r3, #32
 800362e:	6023      	strmi	r3, [r4, #0]
 8003630:	b91e      	cbnz	r6, 800363a <_printf_i+0x196>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f023 0320 	bic.w	r3, r3, #32
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	2310      	movs	r3, #16
 800363c:	e7b0      	b.n	80035a0 <_printf_i+0xfc>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f043 0320 	orr.w	r3, r3, #32
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	2378      	movs	r3, #120	; 0x78
 8003648:	4828      	ldr	r0, [pc, #160]	; (80036ec <_printf_i+0x248>)
 800364a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800364e:	e7e3      	b.n	8003618 <_printf_i+0x174>
 8003650:	0659      	lsls	r1, r3, #25
 8003652:	bf48      	it	mi
 8003654:	b2b6      	uxthmi	r6, r6
 8003656:	e7e6      	b.n	8003626 <_printf_i+0x182>
 8003658:	4615      	mov	r5, r2
 800365a:	e7bb      	b.n	80035d4 <_printf_i+0x130>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	6826      	ldr	r6, [r4, #0]
 8003660:	6961      	ldr	r1, [r4, #20]
 8003662:	1d18      	adds	r0, r3, #4
 8003664:	6028      	str	r0, [r5, #0]
 8003666:	0635      	lsls	r5, r6, #24
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	d501      	bpl.n	8003670 <_printf_i+0x1cc>
 800366c:	6019      	str	r1, [r3, #0]
 800366e:	e002      	b.n	8003676 <_printf_i+0x1d2>
 8003670:	0670      	lsls	r0, r6, #25
 8003672:	d5fb      	bpl.n	800366c <_printf_i+0x1c8>
 8003674:	8019      	strh	r1, [r3, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	6123      	str	r3, [r4, #16]
 800367a:	4615      	mov	r5, r2
 800367c:	e7ba      	b.n	80035f4 <_printf_i+0x150>
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	602a      	str	r2, [r5, #0]
 8003684:	681d      	ldr	r5, [r3, #0]
 8003686:	6862      	ldr	r2, [r4, #4]
 8003688:	2100      	movs	r1, #0
 800368a:	4628      	mov	r0, r5
 800368c:	f7fc fdb8 	bl	8000200 <memchr>
 8003690:	b108      	cbz	r0, 8003696 <_printf_i+0x1f2>
 8003692:	1b40      	subs	r0, r0, r5
 8003694:	6060      	str	r0, [r4, #4]
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	2300      	movs	r3, #0
 800369c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036a0:	e7a8      	b.n	80035f4 <_printf_i+0x150>
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	462a      	mov	r2, r5
 80036a6:	4649      	mov	r1, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	47d0      	blx	sl
 80036ac:	3001      	adds	r0, #1
 80036ae:	d0ab      	beq.n	8003608 <_printf_i+0x164>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	079b      	lsls	r3, r3, #30
 80036b4:	d413      	bmi.n	80036de <_printf_i+0x23a>
 80036b6:	68e0      	ldr	r0, [r4, #12]
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	4298      	cmp	r0, r3
 80036bc:	bfb8      	it	lt
 80036be:	4618      	movlt	r0, r3
 80036c0:	e7a4      	b.n	800360c <_printf_i+0x168>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4632      	mov	r2, r6
 80036c6:	4649      	mov	r1, r9
 80036c8:	4640      	mov	r0, r8
 80036ca:	47d0      	blx	sl
 80036cc:	3001      	adds	r0, #1
 80036ce:	d09b      	beq.n	8003608 <_printf_i+0x164>
 80036d0:	3501      	adds	r5, #1
 80036d2:	68e3      	ldr	r3, [r4, #12]
 80036d4:	9903      	ldr	r1, [sp, #12]
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	42ab      	cmp	r3, r5
 80036da:	dcf2      	bgt.n	80036c2 <_printf_i+0x21e>
 80036dc:	e7eb      	b.n	80036b6 <_printf_i+0x212>
 80036de:	2500      	movs	r5, #0
 80036e0:	f104 0619 	add.w	r6, r4, #25
 80036e4:	e7f5      	b.n	80036d2 <_printf_i+0x22e>
 80036e6:	bf00      	nop
 80036e8:	08003a59 	.word	0x08003a59
 80036ec:	08003a6a 	.word	0x08003a6a

080036f0 <memcpy>:
 80036f0:	440a      	add	r2, r1
 80036f2:	4291      	cmp	r1, r2
 80036f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f8:	d100      	bne.n	80036fc <memcpy+0xc>
 80036fa:	4770      	bx	lr
 80036fc:	b510      	push	{r4, lr}
 80036fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003706:	4291      	cmp	r1, r2
 8003708:	d1f9      	bne.n	80036fe <memcpy+0xe>
 800370a:	bd10      	pop	{r4, pc}

0800370c <memmove>:
 800370c:	4288      	cmp	r0, r1
 800370e:	b510      	push	{r4, lr}
 8003710:	eb01 0402 	add.w	r4, r1, r2
 8003714:	d902      	bls.n	800371c <memmove+0x10>
 8003716:	4284      	cmp	r4, r0
 8003718:	4623      	mov	r3, r4
 800371a:	d807      	bhi.n	800372c <memmove+0x20>
 800371c:	1e43      	subs	r3, r0, #1
 800371e:	42a1      	cmp	r1, r4
 8003720:	d008      	beq.n	8003734 <memmove+0x28>
 8003722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800372a:	e7f8      	b.n	800371e <memmove+0x12>
 800372c:	4402      	add	r2, r0
 800372e:	4601      	mov	r1, r0
 8003730:	428a      	cmp	r2, r1
 8003732:	d100      	bne.n	8003736 <memmove+0x2a>
 8003734:	bd10      	pop	{r4, pc}
 8003736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800373a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800373e:	e7f7      	b.n	8003730 <memmove+0x24>

08003740 <_free_r>:
 8003740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003742:	2900      	cmp	r1, #0
 8003744:	d044      	beq.n	80037d0 <_free_r+0x90>
 8003746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800374a:	9001      	str	r0, [sp, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f1a1 0404 	sub.w	r4, r1, #4
 8003752:	bfb8      	it	lt
 8003754:	18e4      	addlt	r4, r4, r3
 8003756:	f000 f913 	bl	8003980 <__malloc_lock>
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <_free_r+0x94>)
 800375c:	9801      	ldr	r0, [sp, #4]
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	b933      	cbnz	r3, 8003770 <_free_r+0x30>
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	6014      	str	r4, [r2, #0]
 8003766:	b003      	add	sp, #12
 8003768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800376c:	f000 b90e 	b.w	800398c <__malloc_unlock>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d908      	bls.n	8003786 <_free_r+0x46>
 8003774:	6825      	ldr	r5, [r4, #0]
 8003776:	1961      	adds	r1, r4, r5
 8003778:	428b      	cmp	r3, r1
 800377a:	bf01      	itttt	eq
 800377c:	6819      	ldreq	r1, [r3, #0]
 800377e:	685b      	ldreq	r3, [r3, #4]
 8003780:	1949      	addeq	r1, r1, r5
 8003782:	6021      	streq	r1, [r4, #0]
 8003784:	e7ed      	b.n	8003762 <_free_r+0x22>
 8003786:	461a      	mov	r2, r3
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b10b      	cbz	r3, 8003790 <_free_r+0x50>
 800378c:	42a3      	cmp	r3, r4
 800378e:	d9fa      	bls.n	8003786 <_free_r+0x46>
 8003790:	6811      	ldr	r1, [r2, #0]
 8003792:	1855      	adds	r5, r2, r1
 8003794:	42a5      	cmp	r5, r4
 8003796:	d10b      	bne.n	80037b0 <_free_r+0x70>
 8003798:	6824      	ldr	r4, [r4, #0]
 800379a:	4421      	add	r1, r4
 800379c:	1854      	adds	r4, r2, r1
 800379e:	42a3      	cmp	r3, r4
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	d1e0      	bne.n	8003766 <_free_r+0x26>
 80037a4:	681c      	ldr	r4, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	6053      	str	r3, [r2, #4]
 80037aa:	4421      	add	r1, r4
 80037ac:	6011      	str	r1, [r2, #0]
 80037ae:	e7da      	b.n	8003766 <_free_r+0x26>
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x78>
 80037b2:	230c      	movs	r3, #12
 80037b4:	6003      	str	r3, [r0, #0]
 80037b6:	e7d6      	b.n	8003766 <_free_r+0x26>
 80037b8:	6825      	ldr	r5, [r4, #0]
 80037ba:	1961      	adds	r1, r4, r5
 80037bc:	428b      	cmp	r3, r1
 80037be:	bf04      	itt	eq
 80037c0:	6819      	ldreq	r1, [r3, #0]
 80037c2:	685b      	ldreq	r3, [r3, #4]
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	bf04      	itt	eq
 80037c8:	1949      	addeq	r1, r1, r5
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	6054      	str	r4, [r2, #4]
 80037ce:	e7ca      	b.n	8003766 <_free_r+0x26>
 80037d0:	b003      	add	sp, #12
 80037d2:	bd30      	pop	{r4, r5, pc}
 80037d4:	200001c8 	.word	0x200001c8

080037d8 <sbrk_aligned>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4e0e      	ldr	r6, [pc, #56]	; (8003814 <sbrk_aligned+0x3c>)
 80037dc:	460c      	mov	r4, r1
 80037de:	6831      	ldr	r1, [r6, #0]
 80037e0:	4605      	mov	r5, r0
 80037e2:	b911      	cbnz	r1, 80037ea <sbrk_aligned+0x12>
 80037e4:	f000 f8bc 	bl	8003960 <_sbrk_r>
 80037e8:	6030      	str	r0, [r6, #0]
 80037ea:	4621      	mov	r1, r4
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 f8b7 	bl	8003960 <_sbrk_r>
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	d00a      	beq.n	800380c <sbrk_aligned+0x34>
 80037f6:	1cc4      	adds	r4, r0, #3
 80037f8:	f024 0403 	bic.w	r4, r4, #3
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d007      	beq.n	8003810 <sbrk_aligned+0x38>
 8003800:	1a21      	subs	r1, r4, r0
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f8ac 	bl	8003960 <_sbrk_r>
 8003808:	3001      	adds	r0, #1
 800380a:	d101      	bne.n	8003810 <sbrk_aligned+0x38>
 800380c:	f04f 34ff 	mov.w	r4, #4294967295
 8003810:	4620      	mov	r0, r4
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	200001cc 	.word	0x200001cc

08003818 <_malloc_r>:
 8003818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381c:	1ccd      	adds	r5, r1, #3
 800381e:	f025 0503 	bic.w	r5, r5, #3
 8003822:	3508      	adds	r5, #8
 8003824:	2d0c      	cmp	r5, #12
 8003826:	bf38      	it	cc
 8003828:	250c      	movcc	r5, #12
 800382a:	2d00      	cmp	r5, #0
 800382c:	4607      	mov	r7, r0
 800382e:	db01      	blt.n	8003834 <_malloc_r+0x1c>
 8003830:	42a9      	cmp	r1, r5
 8003832:	d905      	bls.n	8003840 <_malloc_r+0x28>
 8003834:	230c      	movs	r3, #12
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	2600      	movs	r6, #0
 800383a:	4630      	mov	r0, r6
 800383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003840:	4e2e      	ldr	r6, [pc, #184]	; (80038fc <_malloc_r+0xe4>)
 8003842:	f000 f89d 	bl	8003980 <__malloc_lock>
 8003846:	6833      	ldr	r3, [r6, #0]
 8003848:	461c      	mov	r4, r3
 800384a:	bb34      	cbnz	r4, 800389a <_malloc_r+0x82>
 800384c:	4629      	mov	r1, r5
 800384e:	4638      	mov	r0, r7
 8003850:	f7ff ffc2 	bl	80037d8 <sbrk_aligned>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	4604      	mov	r4, r0
 8003858:	d14d      	bne.n	80038f6 <_malloc_r+0xde>
 800385a:	6834      	ldr	r4, [r6, #0]
 800385c:	4626      	mov	r6, r4
 800385e:	2e00      	cmp	r6, #0
 8003860:	d140      	bne.n	80038e4 <_malloc_r+0xcc>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	4631      	mov	r1, r6
 8003866:	4638      	mov	r0, r7
 8003868:	eb04 0803 	add.w	r8, r4, r3
 800386c:	f000 f878 	bl	8003960 <_sbrk_r>
 8003870:	4580      	cmp	r8, r0
 8003872:	d13a      	bne.n	80038ea <_malloc_r+0xd2>
 8003874:	6821      	ldr	r1, [r4, #0]
 8003876:	3503      	adds	r5, #3
 8003878:	1a6d      	subs	r5, r5, r1
 800387a:	f025 0503 	bic.w	r5, r5, #3
 800387e:	3508      	adds	r5, #8
 8003880:	2d0c      	cmp	r5, #12
 8003882:	bf38      	it	cc
 8003884:	250c      	movcc	r5, #12
 8003886:	4629      	mov	r1, r5
 8003888:	4638      	mov	r0, r7
 800388a:	f7ff ffa5 	bl	80037d8 <sbrk_aligned>
 800388e:	3001      	adds	r0, #1
 8003890:	d02b      	beq.n	80038ea <_malloc_r+0xd2>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	442b      	add	r3, r5
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	e00e      	b.n	80038b8 <_malloc_r+0xa0>
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	1b52      	subs	r2, r2, r5
 800389e:	d41e      	bmi.n	80038de <_malloc_r+0xc6>
 80038a0:	2a0b      	cmp	r2, #11
 80038a2:	d916      	bls.n	80038d2 <_malloc_r+0xba>
 80038a4:	1961      	adds	r1, r4, r5
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	6025      	str	r5, [r4, #0]
 80038aa:	bf18      	it	ne
 80038ac:	6059      	strne	r1, [r3, #4]
 80038ae:	6863      	ldr	r3, [r4, #4]
 80038b0:	bf08      	it	eq
 80038b2:	6031      	streq	r1, [r6, #0]
 80038b4:	5162      	str	r2, [r4, r5]
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	4638      	mov	r0, r7
 80038ba:	f104 060b 	add.w	r6, r4, #11
 80038be:	f000 f865 	bl	800398c <__malloc_unlock>
 80038c2:	f026 0607 	bic.w	r6, r6, #7
 80038c6:	1d23      	adds	r3, r4, #4
 80038c8:	1af2      	subs	r2, r6, r3
 80038ca:	d0b6      	beq.n	800383a <_malloc_r+0x22>
 80038cc:	1b9b      	subs	r3, r3, r6
 80038ce:	50a3      	str	r3, [r4, r2]
 80038d0:	e7b3      	b.n	800383a <_malloc_r+0x22>
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	bf0c      	ite	eq
 80038d8:	6032      	streq	r2, [r6, #0]
 80038da:	605a      	strne	r2, [r3, #4]
 80038dc:	e7ec      	b.n	80038b8 <_malloc_r+0xa0>
 80038de:	4623      	mov	r3, r4
 80038e0:	6864      	ldr	r4, [r4, #4]
 80038e2:	e7b2      	b.n	800384a <_malloc_r+0x32>
 80038e4:	4634      	mov	r4, r6
 80038e6:	6876      	ldr	r6, [r6, #4]
 80038e8:	e7b9      	b.n	800385e <_malloc_r+0x46>
 80038ea:	230c      	movs	r3, #12
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4638      	mov	r0, r7
 80038f0:	f000 f84c 	bl	800398c <__malloc_unlock>
 80038f4:	e7a1      	b.n	800383a <_malloc_r+0x22>
 80038f6:	6025      	str	r5, [r4, #0]
 80038f8:	e7de      	b.n	80038b8 <_malloc_r+0xa0>
 80038fa:	bf00      	nop
 80038fc:	200001c8 	.word	0x200001c8

08003900 <_realloc_r>:
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4680      	mov	r8, r0
 8003906:	4614      	mov	r4, r2
 8003908:	460e      	mov	r6, r1
 800390a:	b921      	cbnz	r1, 8003916 <_realloc_r+0x16>
 800390c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003910:	4611      	mov	r1, r2
 8003912:	f7ff bf81 	b.w	8003818 <_malloc_r>
 8003916:	b92a      	cbnz	r2, 8003924 <_realloc_r+0x24>
 8003918:	f7ff ff12 	bl	8003740 <_free_r>
 800391c:	4625      	mov	r5, r4
 800391e:	4628      	mov	r0, r5
 8003920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003924:	f000 f838 	bl	8003998 <_malloc_usable_size_r>
 8003928:	4284      	cmp	r4, r0
 800392a:	4607      	mov	r7, r0
 800392c:	d802      	bhi.n	8003934 <_realloc_r+0x34>
 800392e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003932:	d812      	bhi.n	800395a <_realloc_r+0x5a>
 8003934:	4621      	mov	r1, r4
 8003936:	4640      	mov	r0, r8
 8003938:	f7ff ff6e 	bl	8003818 <_malloc_r>
 800393c:	4605      	mov	r5, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d0ed      	beq.n	800391e <_realloc_r+0x1e>
 8003942:	42bc      	cmp	r4, r7
 8003944:	4622      	mov	r2, r4
 8003946:	4631      	mov	r1, r6
 8003948:	bf28      	it	cs
 800394a:	463a      	movcs	r2, r7
 800394c:	f7ff fed0 	bl	80036f0 <memcpy>
 8003950:	4631      	mov	r1, r6
 8003952:	4640      	mov	r0, r8
 8003954:	f7ff fef4 	bl	8003740 <_free_r>
 8003958:	e7e1      	b.n	800391e <_realloc_r+0x1e>
 800395a:	4635      	mov	r5, r6
 800395c:	e7df      	b.n	800391e <_realloc_r+0x1e>
	...

08003960 <_sbrk_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4d06      	ldr	r5, [pc, #24]	; (800397c <_sbrk_r+0x1c>)
 8003964:	2300      	movs	r3, #0
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd f91e 	bl	8000bac <_sbrk>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_sbrk_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_sbrk_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	200001d0 	.word	0x200001d0

08003980 <__malloc_lock>:
 8003980:	4801      	ldr	r0, [pc, #4]	; (8003988 <__malloc_lock+0x8>)
 8003982:	f000 b811 	b.w	80039a8 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	200001d4 	.word	0x200001d4

0800398c <__malloc_unlock>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__malloc_unlock+0x8>)
 800398e:	f000 b80c 	b.w	80039aa <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	200001d4 	.word	0x200001d4

08003998 <_malloc_usable_size_r>:
 8003998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800399c:	1f18      	subs	r0, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bfbc      	itt	lt
 80039a2:	580b      	ldrlt	r3, [r1, r0]
 80039a4:	18c0      	addlt	r0, r0, r3
 80039a6:	4770      	bx	lr

080039a8 <__retarget_lock_acquire_recursive>:
 80039a8:	4770      	bx	lr

080039aa <__retarget_lock_release_recursive>:
 80039aa:	4770      	bx	lr

080039ac <_init>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr

080039b8 <_fini>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	bf00      	nop
 80039bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039be:	bc08      	pop	{r3}
 80039c0:	469e      	mov	lr, r3
 80039c2:	4770      	bx	lr
