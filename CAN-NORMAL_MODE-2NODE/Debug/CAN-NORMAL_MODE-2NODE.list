
CAN-NORMAL_MODE-2NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004120  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004388  08004388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efcd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c21  00000000  00000000  0002f06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00030c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e75  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e209  00000000  00000000  0005645d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc8a9  00000000  00000000  00064666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140f0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b54  00000000  00000000  00140f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080042b8 	.word	0x080042b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080042b8 	.word	0x080042b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SysTick_Handler>:
 */
#include "main.h"
extern TIM_HandleTypeDef htimer6;
extern CAN_HandleTypeDef hcan1;
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
   HAL_IncTick();
 80005a8:	f000 fd4e 	bl	8001048 <HAL_IncTick>
   HAL_SYSTICK_IRQHandler();
 80005ac:	f001 fcd4 	bl	8001f58 <HAL_SYSTICK_IRQHandler>

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htimer6);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <TIM6_DAC_IRQHandler+0x10>)
 80005ba:	f002 fc37 	bl	8002e2c <HAL_TIM_IRQHandler>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000f8 	.word	0x200000f8

080005c8 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <EXTI0_IRQHandler+0x14>)
 80005ce:	f002 fbbd 	bl	8002d4c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 feae 	bl	8002334 <HAL_GPIO_EXTI_IRQHandler>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000f8 	.word	0x200000f8

080005e0 <CAN1_TX_IRQHandler>:
void CAN1_TX_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <CAN1_TX_IRQHandler+0x10>)
 80005e6:	f001 f982 	bl	80018ee <HAL_CAN_IRQHandler>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000d0 	.word	0x200000d0

080005f4 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <CAN1_RX0_IRQHandler+0x10>)
 80005fa:	f001 f978 	bl	80018ee <HAL_CAN_IRQHandler>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000d0 	.word	0x200000d0

08000608 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <CAN1_RX1_IRQHandler+0x10>)
 800060e:	f001 f96e 	bl	80018ee <HAL_CAN_IRQHandler>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000d0 	.word	0x200000d0

0800061c <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <CAN1_SCE_IRQHandler+0x10>)
 8000622:	f001 f964 	bl	80018ee <HAL_CAN_IRQHandler>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000d0 	.word	0x200000d0

08000630 <main>:
TIM_HandleTypeDef htimer6;
char buff[100];
char rx_buffer[100];
uint8_t req_counter = 0;
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

	HAL_Init();
 8000634:	f000 fcb6 	bl	8000fa4 <HAL_Init>

	SystemClockConfig();
 8000638:	f000 f894 	bl	8000764 <SystemClockConfig>

	GPIO_Init();
 800063c:	f000 f81e 	bl	800067c <GPIO_Init>

	UART2_Init();
 8000640:	f000 f8e8 	bl	8000814 <UART2_Init>

	TIMER6_Init();
 8000644:	f000 f90c 	bl	8000860 <TIMER6_Init>

    CAN1_Init();
 8000648:	f000 f928 	bl	800089c <CAN1_Init>

    CAN1_Filter_Config();
 800064c:	f000 f992 	bl	8000974 <CAN1_Filter_Config>

    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY
 8000650:	f240 4103 	movw	r1, #1027	; 0x403
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x48>)
 8000656:	f001 f924 	bl	80018a2 <HAL_CAN_ActivateNotification>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x34>
    		                               |CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_BUSOFF) !=HAL_OK)
    {
    	Error_Handler();
 8000660:	f000 f8d4 	bl	800080c <Error_Handler>

    }

    if(HAL_CAN_Start(&hcan1)!= HAL_OK) // Move Can from Init -> Normal Mode
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <main+0x48>)
 8000666:	f000 feeb 	bl	8001440 <HAL_CAN_Start>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <main+0x44>
    {
    	Error_Handler();
 8000670:	f000 f8cc 	bl	800080c <Error_Handler>
    }



	while(1);
 8000674:	e7fe      	b.n	8000674 <main+0x44>
 8000676:	bf00      	nop
 8000678:	200000d0 	.word	0x200000d0

0800067c <GPIO_Init>:

	return 0;
}

void GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <GPIO_Init+0xd8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a32      	ldr	r2, [pc, #200]	; (8000754 <GPIO_Init+0xd8>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <GPIO_Init+0xd8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <GPIO_Init+0xd8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <GPIO_Init+0xd8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <GPIO_Init+0xd8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <GPIO_Init+0xd8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <GPIO_Init+0xd8>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <GPIO_Init+0xd8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006d6:	2320      	movs	r3, #32
 80006d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <GPIO_Init+0xdc>)
 80006ea:	f001 fc43 	bl	8001f74 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7350 	mov.w	r3, #832	; 0x340
 80006f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <GPIO_Init+0xe0>)
 8000704:	f001 fc36 	bl	8001f74 <HAL_GPIO_Init>
	                                              // USING LED PC6-PC8-PC-9-PB8
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <GPIO_Init+0xe4>)
 800071e:	f001 fc29 	bl	8001f74 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // USING USER BUTTER AS INTERRUPT START
 8000726:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800072a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <GPIO_Init+0xdc>)
 8000738:	f001 fc1c 	bl	8001f74 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn,15, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	210f      	movs	r1, #15
 8000740:	2006      	movs	r0, #6
 8000742:	f001 fbb6 	bl	8001eb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000746:	2006      	movs	r0, #6
 8000748:	f001 fbcf 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020800 	.word	0x40020800
 8000760:	40020400 	.word	0x40020400

08000764 <SystemClockConfig>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClockConfig(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b092      	sub	sp, #72	; 0x48
 8000768:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClockInitStruct;

	memset(&RCC_OscInitStruct,0,sizeof(RCC_OscInitStruct));
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 f92a 	bl	80039cc <memset>
	memset(&RCC_ClockInitStruct,0,sizeof(RCC_ClockInitStruct));
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2214      	movs	r2, #20
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f003 f924 	bl	80039cc <memset>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = 16; //Default
 800078c:	2310      	movs	r3, #16
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 16; // 16/16 1Mhz
 8000798:	2310      	movs	r3, #16
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	; 0xa8
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44

	if(HAL_RCC_OscConfig(&RCC_OscInitStruct)!=HAL_OK)
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fde5 	bl	800237c <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClockConfig+0x58>
	{
		Error_Handler();
 80007b8:	f000 f828 	bl	800080c <Error_Handler>
	}

	RCC_ClockInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80007bc:	230f      	movs	r3, #15
 80007be:	607b      	str	r3, [r7, #4]
			                        RCC_CLOCKTYPE_PCLK1  |RCC_CLOCKTYPE_PCLK2;
	RCC_ClockInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
	RCC_ClockInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	RCC_ClockInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	613b      	str	r3, [r7, #16]
	RCC_ClockInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

	if(HAL_RCC_ClockConfig(&RCC_ClockInitStruct, FLASH_ACR_LATENCY_2WS)!=HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 f848 	bl	800286c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClockConfig+0x82>
	{
		Error_Handler();
 80007e2:	f000 f813 	bl	800080c <Error_Handler>
	}

	// Systick config
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007e6:	f002 fa2d 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <SystemClockConfig+0xa4>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	099b      	lsrs	r3, r3, #6
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fb86 	bl	8001f06 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007fa:	2004      	movs	r0, #4
 80007fc:	f001 fb90 	bl	8001f20 <HAL_SYSTICK_CLKSourceConfig>
}
 8000800:	bf00      	nop
 8000802:	3748      	adds	r7, #72	; 0x48
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	10624dd3 	.word	0x10624dd3

0800080c <Error_Handler>:

void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  while(1);
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x4>
	...

08000814 <UART2_Init>:
}


void UART2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <UART2_Init+0x44>)
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <UART2_Init+0x48>)
 800081c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <UART2_Init+0x44>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <UART2_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <UART2_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <UART2_Init+0x44>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <UART2_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <UART2_Init+0x44>)
 8000840:	220c      	movs	r2, #12
 8000842:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <UART2_Init+0x44>)
 8000846:	f002 fcd5 	bl	80031f4 <HAL_UART_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <UART2_Init+0x40>
	{
		//There is a problem
		Error_Handler();
 8000850:	f7ff ffdc 	bl	800080c <Error_Handler>
	}


}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000008c 	.word	0x2000008c
 800085c:	40004400 	.word	0x40004400

08000860 <TIMER6_Init>:
void TIMER6_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	htimer6.Instance = TIM6;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <TIMER6_Init+0x34>)
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <TIMER6_Init+0x38>)
 8000868:	601a      	str	r2, [r3, #0]
	htimer6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <TIMER6_Init+0x34>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	htimer6.Init.Prescaler = 4199;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <TIMER6_Init+0x34>)
 8000872:	f241 0267 	movw	r2, #4199	; 0x1067
 8000876:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 9999;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <TIMER6_Init+0x34>)
 800087a:	f242 720f 	movw	r2, #9999	; 0x270f
 800087e:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer6)!= HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <TIMER6_Init+0x34>)
 8000882:	f002 fa13 	bl	8002cac <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <TIMER6_Init+0x30>
	{
		Error_Handler();
 800088c:	f7ff ffbe 	bl	800080c <Error_Handler>

	}



}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000f8 	.word	0x200000f8
 8000898:	40001000 	.word	0x40001000

0800089c <CAN1_Init>:
void CAN1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
     hcan1.Instance = CAN1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <CAN1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <CAN1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
     hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <CAN1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
     hcan1.Init.AutoBusOff = DISABLE;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <CAN1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
     hcan1.Init.AutoRetransmission = ENABLE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <CAN1_Init+0x64>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	76da      	strb	r2, [r3, #27]
     hcan1.Init.AutoWakeUp = DISABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	769a      	strb	r2, [r3, #26]
     hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	771a      	strb	r2, [r3, #28]
     hcan1.Init.TimeTriggeredMode = DISABLE;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <CAN1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	761a      	strb	r2, [r3, #24]
     hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <CAN1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	775a      	strb	r2, [r3, #29]

     // Time-Settings  125 kbps bitrate
     hcan1.Init.Prescaler = 21;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <CAN1_Init+0x64>)
 80008d2:	2215      	movs	r2, #21
 80008d4:	605a      	str	r2, [r3, #4]
     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <CAN1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
     hcan1.Init.TimeSeg1 = CAN_BS1_13TQ	;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <CAN1_Init+0x64>)
 80008de:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008e2:	611a      	str	r2, [r3, #16]
     hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <CAN1_Init+0x64>)
 80008e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ea:	615a      	str	r2, [r3, #20]

     if(HAL_CAN_Init(&hcan1)!= HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <CAN1_Init+0x64>)
 80008ee:	f000 fbcb 	bl	8001088 <HAL_CAN_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <CAN1_Init+0x60>
    	 {
    	   Error_Handler();
 80008f8:	f7ff ff88 	bl	800080c <Error_Handler>

    	 }

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000d0 	.word	0x200000d0
 8000904:	40006400 	.word	0x40006400

08000908 <CAN1_TX>:
uint8_t led_no =0;
void CAN1_TX(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
   CAN_TxHeaderTypeDef htxcan1;
   uint32_t TxMailBox;

   uint8_t message;
   htxcan1.DLC = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
   htxcan1.StdId = 0x65D;
 8000912:	f240 635d 	movw	r3, #1629	; 0x65d
 8000916:	60bb      	str	r3, [r7, #8]
   htxcan1.IDE = CAN_ID_STD;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
   htxcan1.RTR = CAN_RTR_DATA;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

   message = ++led_no;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <CAN1_TX+0x60>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <CAN1_TX+0x60>)
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <CAN1_TX+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	70fb      	strb	r3, [r7, #3]
   if(led_no == 4)
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <CAN1_TX+0x60>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d102      	bne.n	8000940 <CAN1_TX+0x38>
   {
	   led_no = 0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <CAN1_TX+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
   }

   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000940:	2120      	movs	r1, #32
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <CAN1_TX+0x64>)
 8000944:	f001 fcdb 	bl	80022fe <HAL_GPIO_TogglePin>

   if(HAL_CAN_AddTxMessage(&hcan1, &htxcan1, &message, &TxMailBox)!= HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	1cfa      	adds	r2, r7, #3
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <CAN1_TX+0x68>)
 8000952:	f000 fdb9 	bl	80014c8 <HAL_CAN_AddTxMessage>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <CAN1_TX+0x58>
   {
	   Error_Handler();
 800095c:	f7ff ff56 	bl	800080c <Error_Handler>
   }




}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001a5 	.word	0x200001a5
 800096c:	40020000 	.word	0x40020000
 8000970:	200000d0 	.word	0x200000d0

08000974 <CAN1_Filter_Config>:


void CAN1_Filter_Config()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0

    CAN_FilterTypeDef CAN_FilterInitStruct;

    CAN_FilterInitStruct.FilterActivation = ENABLE;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
    CAN_FilterInitStruct.FilterBank = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
    CAN_FilterInitStruct.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
    CAN_FilterInitStruct.FilterIdHigh = 0x0000;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
    CAN_FilterInitStruct.FilterIdLow = 0x0000;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
    CAN_FilterInitStruct.FilterMaskIdHigh = 0x01C0;
 800098e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000992:	60bb      	str	r3, [r7, #8]
    CAN_FilterInitStruct.FilterMaskIdLow = 0x0000;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
    CAN_FilterInitStruct.FilterMode = CAN_FILTERMODE_IDMASK;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    CAN_FilterInitStruct.FilterScale = CAN_FILTERSCALE_32BIT;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]

    if(HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterInitStruct)!= HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <CAN1_Filter_Config+0x48>)
 80009a6:	f000 fc6b 	bl	8001280 <HAL_CAN_ConfigFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <CAN1_Filter_Config+0x40>
  	     {
  	       	   Error_Handler();
 80009b0:	f7ff ff2c 	bl	800080c <Error_Handler>
  	     }

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000d0 	.word	0x200000d0

080009c0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted : M0\r\n");
 80009c8:	490b      	ldr	r1, [pc, #44]	; (80009f8 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009cc:	f003 f806 	bl	80039dc <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009d2:	f7ff fc0d 	bl	80001f0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	4907      	ldr	r1, [pc, #28]	; (80009fc <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80009e2:	f002 fc54 	bl	800328e <HAL_UART_Transmit>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 80009ec:	f7ff ff0e 	bl	800080c <Error_Handler>
	     	 }

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	080042d0 	.word	0x080042d0
 80009fc:	20000140 	.word	0x20000140
 8000a00:	2000008c 	.word	0x2000008c

08000a04 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted M1\r\n");
 8000a0c:	490b      	ldr	r1, [pc, #44]	; (8000a3c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a10:	f002 ffe4 	bl	80039dc <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a16:	f7ff fbeb 	bl	80001f0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	4907      	ldr	r1, [pc, #28]	; (8000a40 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8000a26:	f002 fc32 	bl	800328e <HAL_UART_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 8000a30:	f7ff feec 	bl	800080c <Error_Handler>
	     	 }
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	080042ec 	.word	0x080042ec
 8000a40:	20000140 	.word	0x20000140
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	   sprintf(buff,"Message transmitted M1\r\n");
 8000a50:	490b      	ldr	r1, [pc, #44]	; (8000a80 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a54:	f002 ffc2 	bl	80039dc <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)buff , strlen(buff), HAL_MAX_DELAY))
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a5a:	f7ff fbc9 	bl	80001f0 <strlen>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	4907      	ldr	r1, [pc, #28]	; (8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 8000a6a:	f002 fc10 	bl	800328e <HAL_UART_Transmit>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	       	 {
	       	   Error_Handler();
 8000a74:	f7ff feca 	bl	800080c <Error_Handler>
	     	 }
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	080042ec 	.word	0x080042ec
 8000a84:	20000140 	.word	0x20000140
 8000a88:	2000008c 	.word	0x2000008c

08000a8c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b098      	sub	sp, #96	; 0x60
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef hrxcan1;
	uint8_t rx_buff[8];
    char msg[50];


	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&hrxcan1,rx_buff)!= HAL_OK)
 8000a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a98:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4826      	ldr	r0, [pc, #152]	; (8000b38 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000aa0:	f000 fded 	bl	800167e <HAL_CAN_GetRxMessage>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8000aaa:	f7ff feaf 	bl	800080c <Error_Handler>
	}

	if(hrxcan1.StdId == 0x65D && hrxcan1.RTR == 0)
 8000aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ab0:	f240 625d 	movw	r2, #1629	; 0x65d
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d108      	bne.n	8000aca <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8000ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d105      	bne.n	8000aca <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	{
		//This is data frame to send N1 to N2
		LED_MANAGE_Output(rx_buff[0]);
 8000abe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f898 	bl	8000bf8 <LED_MANAGE_Output>
 8000ac8:	e020      	b.n	8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>

	}
	else if(hrxcan1.StdId == 0x651 && hrxcan1.RTR == 1)
 8000aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000acc:	f240 6251 	movw	r2, #1617	; 0x651
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d107      	bne.n	8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8000ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	{
		// This is a remote frame sent by n1 to n2
		Send_Response(hrxcan1.StdId);
 8000ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8e9 	bl	8000cb4 <Send_Response>
 8000ae2:	e026      	b.n	8000b32 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		return;

	}
	else if(hrxcan1.StdId == 0x651 && hrxcan1.RTR == 0)
 8000ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ae6:	f240 6251 	movw	r2, #1617	; 0x651
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10e      	bne.n	8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
	{
		//  Its a reply (data frame) n2 to n1
		sprintf(msg,"Reply Recieved : %#X\r\n",rx_buff[0] << 8 | rx_buff[1]);
 8000af4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000afe:	431a      	orrs	r2, r3
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	490d      	ldr	r1, [pc, #52]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 ff68 	bl	80039dc <siprintf>

	}
	 if(HAL_UART_Transmit(&huart2, (uint8_t *)msg , strlen(msg), HAL_MAX_DELAY))
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb6d 	bl	80001f0 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f107 0108 	add.w	r1, r7, #8
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000b24:	f002 fbb3 	bl	800328e <HAL_UART_Transmit>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		 {
		       	   Error_Handler();
 8000b2e:	f7ff fe6d 	bl	800080c <Error_Handler>
		 }


}
 8000b32:	3760      	adds	r7, #96	; 0x60
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000d0 	.word	0x200000d0
 8000b3c:	08004308 	.word	0x08004308
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	; 0x40
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	   char error[50];
	   sprintf(error,"Error Detected\r\n");
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	490d      	ldr	r1, [pc, #52]	; (8000b88 <HAL_CAN_ErrorCallback+0x44>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 ff42 	bl	80039dc <siprintf>
	   if(HAL_UART_Transmit(&huart2, (uint8_t *)error , strlen(error), HAL_MAX_DELAY))
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fb47 	bl	80001f0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f107 010c 	add.w	r1, r7, #12
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <HAL_CAN_ErrorCallback+0x48>)
 8000b70:	f002 fb8d 	bl	800328e <HAL_UART_Transmit>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_CAN_ErrorCallback+0x3a>
	       	 {
	       	   Error_Handler();
 8000b7a:	f7ff fe47 	bl	800080c <Error_Handler>
	     	 }
}
 8000b7e:	bf00      	nop
 8000b80:	3740      	adds	r7, #64	; 0x40
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	08004320 	.word	0x08004320
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

		 uint32_t TxMailbox;

		 uint8_t message; //no meaning for data frame

		if ( req_counter  == 4)
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d11a      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			//N1 sending Remote frame to N2
			TxHeader.DLC = 2; //N1 demanding 2 bytes of reply
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
			TxHeader.StdId = 0x651;
 8000ba4:	f240 6351 	movw	r3, #1617	; 0x651
 8000ba8:	613b      	str	r3, [r7, #16]
			TxHeader.IDE   = CAN_ID_STD;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
			TxHeader.RTR = CAN_RTR_REMOTE;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]

			if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	f107 020b 	add.w	r2, r7, #11
 8000bba:	f107 0110 	add.w	r1, r7, #16
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bc0:	f000 fc82 	bl	80014c8 <HAL_CAN_AddTxMessage>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x3e>
			{
				Error_Handler();
 8000bca:	f7ff fe1f 	bl	800080c <Error_Handler>
			}
			req_counter = 0;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		{
			CAN1_TX();
			req_counter++;
		}

}
 8000bd4:	e007      	b.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x56>
			CAN1_TX();
 8000bd6:	f7ff fe97 	bl	8000908 <CAN1_TX>
			req_counter++;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000be4:	701a      	strb	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001a4 	.word	0x200001a4
 8000bf4:	200000d0 	.word	0x200000d0

08000bf8 <LED_MANAGE_Output>:
void LED_MANAGE_Output(uint8_t data)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(data)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d84b      	bhi.n	8000ca2 <LED_MANAGE_Output+0xaa>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <LED_MANAGE_Output+0x18>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c43 	.word	0x08000c43
 8000c18:	08000c67 	.word	0x08000c67
 8000c1c:	08000c8b 	.word	0x08000c8b
	{
	case 1:
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4821      	ldr	r0, [pc, #132]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c26:	f001 fb51 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9,GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c32:	f001 fb4b 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <LED_MANAGE_Output+0xb8>)
 8000c3e:	f001 fb45 	bl	80022cc <HAL_GPIO_WritePin>
	case 2:
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c4a:	f001 fb3f 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_9,GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c56:	f001 fb39 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <LED_MANAGE_Output+0xb8>)
 8000c62:	f001 fb33 	bl	80022cc <HAL_GPIO_WritePin>
	case 3:
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c6e:	f001 fb2d 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8,GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c7a:	f001 fb27 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <LED_MANAGE_Output+0xb8>)
 8000c86:	f001 fb21 	bl	80022cc <HAL_GPIO_WritePin>
	case 4:

		    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6| GPIO_PIN_8|GPIO_PIN_9,GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <LED_MANAGE_Output+0xb4>)
 8000c92:	f001 fb1b 	bl	80022cc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <LED_MANAGE_Output+0xb8>)
 8000c9e:	f001 fb15 	bl	80022cc <HAL_GPIO_WritePin>

	}


}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <Send_Response>:

void Send_Response(uint32_t StdId)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	   CAN_TxHeaderTypeDef htxcan1;
	   uint32_t TxMailBox;

	   uint8_t response[2] = {0xAB,0xCD};
 8000cbc:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8000cc0:	813b      	strh	r3, [r7, #8]
	   htxcan1.DLC = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
	   htxcan1.StdId = StdId;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
	   htxcan1.IDE = CAN_ID_STD;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
	   htxcan1.RTR = CAN_RTR_DATA;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]


	   if(HAL_CAN_AddTxMessage(&hcan1, &htxcan1, response, &TxMailBox)!= HAL_OK)
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	f107 0208 	add.w	r2, r7, #8
 8000cda:	f107 0110 	add.w	r1, r7, #16
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <Send_Response+0x44>)
 8000ce0:	f000 fbf2 	bl	80014c8 <HAL_CAN_AddTxMessage>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <Send_Response+0x3a>
	   {
		   Error_Handler();
 8000cea:	f7ff fd8f 	bl	800080c <Error_Handler>
	   }


}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000d0 	.word	0x200000d0

08000cfc <HAL_MspInit>:
 *      Author: Mustafa
 */
#include "main.h"

void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f001 f8cb 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_MspInit+0x40>)
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_MspInit+0x40>)
 8000d0c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000d10:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	f06f 000b 	mvn.w	r0, #11
 8000d1a:	f001 f8ca 	bl	8001eb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	f06f 000a 	mvn.w	r0, #10
 8000d26:	f001 f8c4 	bl	8001eb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f06f 0009 	mvn.w	r0, #9
 8000d32:	f001 f8be 	bl	8001eb2 <HAL_NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000d80:	2304      	movs	r3, #4
 8000d82:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000d90:	2307      	movs	r3, #7
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000d9c:	f001 f8ea 	bl	8001f74 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000da0:	2308      	movs	r3, #8
 8000da2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000dac:	f001 f8e2 	bl	8001f74 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db0:	2026      	movs	r0, #38	; 0x26
 8000db2:	f001 f89a 	bl	8001eea <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	2026      	movs	r0, #38	; 0x26
 8000dbc:	f001 f879 	bl	8001eb2 <HAL_NVIC_SetPriority>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	// Enable the clock
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_CAN_MspInit+0xa8>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
	// Config Pins
	GPIO_InitTypeDef GPIO_Can;
	GPIO_Can.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e10:	2303      	movs	r3, #3
 8000e12:	617b      	str	r3, [r7, #20]
	GPIO_Can.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
	GPIO_Can.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
	GPIO_Can.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
	GPIO_Can.Alternate = GPIO_AF9_CAN1;
 8000e20:	2309      	movs	r3, #9
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_Can);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4814      	ldr	r0, [pc, #80]	; (8000e7c <HAL_CAN_MspInit+0xac>)
 8000e2c:	f001 f8a2 	bl	8001f74 <HAL_GPIO_Init>

	// ENABLE NVIC
	   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e30:	2013      	movs	r0, #19
 8000e32:	f001 f85a 	bl	8001eea <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f001 f857 	bl	8001eea <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e3c:	2015      	movs	r0, #21
 8000e3e:	f001 f854 	bl	8001eea <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e42:	2016      	movs	r0, #22
 8000e44:	f001 f851 	bl	8001eea <HAL_NVIC_EnableIRQ>

	   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15,0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	2013      	movs	r0, #19
 8000e4e:	f001 f830 	bl	8001eb2 <HAL_NVIC_SetPriority>
	   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15,0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	210f      	movs	r1, #15
 8000e56:	2014      	movs	r0, #20
 8000e58:	f001 f82b 	bl	8001eb2 <HAL_NVIC_SetPriority>
	   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15,0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	210f      	movs	r1, #15
 8000e60:	2015      	movs	r0, #21
 8000e62:	f001 f826 	bl	8001eb2 <HAL_NVIC_SetPriority>
	   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15,0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	210f      	movs	r1, #15
 8000e6a:	2016      	movs	r0, #22
 8000e6c:	f001 f821 	bl	8001eb2 <HAL_NVIC_SetPriority>


}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <HAL_TIM_Base_MspInit>:
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

	// Enable the clock for tim2 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_TIM_Base_MspInit+0x3c>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_TIM_Base_MspInit+0x3c>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_TIM_Base_MspInit+0x3c>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
	//Enable IRQ Handling
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f001 f820 	bl	8001eea <HAL_NVIC_EnableIRQ>
	// Set up Priority number;
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	210f      	movs	r1, #15
 8000eae:	2036      	movs	r0, #54	; 0x36
 8000eb0:	f000 ffff 	bl	8001eb2 <HAL_NVIC_SetPriority>



}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f002 fd42 	bl	8003978 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20030000 	.word	0x20030000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200001a8 	.word	0x200001a8
 8000f28:	200001c0 	.word	0x200001c0

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f002 fd01 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fb55 	bl	8000630 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f94:	08004390 	.word	0x08004390
  ldr r2, =_sbss
 8000f98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f9c:	200001c0 	.word	0x200001c0

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 ff65 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fe90 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 ff7d 	bl	8001f06 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 ff45 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	200001ac 	.word	0x200001ac

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200001ac 	.word	0x200001ac

08001088 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0ed      	b.n	8001276 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fe92 	bl	8000dd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff ffd8 	bl	8001070 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c2:	e012      	b.n	80010ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c4:	f7ff ffd4 	bl	8001070 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d90b      	bls.n	80010ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2205      	movs	r2, #5
 80010e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0c5      	b.n	8001276 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0e5      	beq.n	80010c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0202 	bic.w	r2, r2, #2
 8001106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff ffb2 	bl	8001070 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110e:	e012      	b.n	8001136 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001110:	f7ff ffae 	bl	8001070 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e09f      	b.n	8001276 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e5      	bne.n	8001110 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7e1b      	ldrb	r3, [r3, #24]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d108      	bne.n	800115e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e007      	b.n	800116e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7e5b      	ldrb	r3, [r3, #25]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e007      	b.n	8001198 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001196:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e9b      	ldrb	r3, [r3, #26]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0220 	bic.w	r2, r2, #32
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7edb      	ldrb	r3, [r3, #27]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0210 	bic.w	r2, r2, #16
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0210 	orr.w	r2, r2, #16
 80011ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7f1b      	ldrb	r3, [r3, #28]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0208 	orr.w	r2, r2, #8
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0208 	bic.w	r2, r2, #8
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7f5b      	ldrb	r3, [r3, #29]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	ea42 0103 	orr.w	r1, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_ConfigFilter+0x26>
 800129e:	7cfb      	ldrb	r3, [r7, #19]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f040 80be 	bne.w	8001422 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <HAL_CAN_ConfigFilter+0x1bc>)
 80012a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2201      	movs	r2, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d123      	bne.n	8001350 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800132a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3248      	adds	r2, #72	; 0x48
 8001330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001344:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001346:	6979      	ldr	r1, [r7, #20]
 8001348:	3348      	adds	r3, #72	; 0x48
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d122      	bne.n	800139e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	431a      	orrs	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001378:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3248      	adds	r2, #72	; 0x48
 800137e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001392:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	3348      	adds	r3, #72	; 0x48
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013b8:	e007      	b.n	80013ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	401a      	ands	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	431a      	orrs	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001414:	f023 0201 	bic.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40006400 	.word	0x40006400

08001440 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d12e      	bne.n	80014b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fe00 	bl	8001070 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001472:	e012      	b.n	800149a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001474:	f7ff fdfc 	bl	8001070 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d90b      	bls.n	800149a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e012      	b.n	80014c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e5      	bne.n	8001474 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e006      	b.n	80014c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_AddTxMessage+0x2c>
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 80b8 	bne.w	8001664 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10a      	bne.n	8001514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80a0 	beq.w	8001654 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	0e1b      	lsrs	r3, r3, #24
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e09e      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001534:	2201      	movs	r2, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	409a      	lsls	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	6809      	ldr	r1, [r1, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	440b      	add	r3, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e00f      	b.n	8001582 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001576:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3318      	adds	r3, #24
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3304      	adds	r3, #4
 8001594:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	7d1b      	ldrb	r3, [r3, #20]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d111      	bne.n	80015c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3318      	adds	r3, #24
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3318      	adds	r3, #24
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	440b      	add	r3, r1
 80015be:	3304      	adds	r3, #4
 80015c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3307      	adds	r3, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3306      	adds	r3, #6
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3305      	adds	r3, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	3204      	adds	r2, #4
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	4610      	mov	r0, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6811      	ldr	r1, [r2, #0]
 80015ea:	ea43 0200 	orr.w	r2, r3, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3303      	adds	r3, #3
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3302      	adds	r3, #2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	4610      	mov	r0, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	ea43 0200 	orr.w	r2, r3, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800162e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3318      	adds	r3, #24
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3318      	adds	r3, #24
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	440b      	add	r3, r1
 800164e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e00e      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e006      	b.n	8001672 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
  }
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800167e:	b480      	push	{r7}
 8001680:	b087      	sub	sp, #28
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001692:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_GetRxMessage+0x24>
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b02      	cmp	r3, #2
 800169e:	f040 80f3 	bne.w	8001888 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10e      	bne.n	80016c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0e7      	b.n	8001896 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0d8      	b.n	8001896 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	331b      	adds	r3, #27
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4413      	add	r3, r2
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0204 	and.w	r2, r3, #4
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	331b      	adds	r3, #27
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0d5b      	lsrs	r3, r3, #21
 8001712:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e00b      	b.n	8001734 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	331b      	adds	r3, #27
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0202 	and.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	331b      	adds	r3, #27
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 020f 	and.w	r2, r3, #15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	331b      	adds	r3, #27
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	331b      	adds	r3, #27
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	3304      	adds	r3, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	b29a      	uxth	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0a1a      	lsrs	r2, r3, #8
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0c1a      	lsrs	r2, r3, #16
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3302      	adds	r3, #2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0e1a      	lsrs	r2, r3, #24
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3303      	adds	r3, #3
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	3304      	adds	r3, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	4413      	add	r3, r2
 8001818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0a1a      	lsrs	r2, r3, #8
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	3305      	adds	r3, #5
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0c1a      	lsrs	r2, r3, #16
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3306      	adds	r3, #6
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0e1a      	lsrs	r2, r3, #24
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3307      	adds	r3, #7
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d108      	bne.n	8001874 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	e007      	b.n	8001884 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0220 	orr.w	r2, r2, #32
 8001882:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e006      	b.n	8001896 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d002      	beq.n	80018c0 <HAL_CAN_ActivateNotification+0x1e>
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6959      	ldr	r1, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e006      	b.n	80018e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b08a      	sub	sp, #40	; 0x28
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d07c      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d023      	beq.n	8001986 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff f835 	bl	80009c0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001956:	e016      	b.n	8001986 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e00c      	b.n	8001986 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	e002      	b.n	8001986 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f96b 	bl	8001c5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d024      	beq.n	80019da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001998:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff f82d 	bl	8000a04 <HAL_CAN_TxMailbox1CompleteCallback>
 80019aa:	e016      	b.n	80019da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e00c      	b.n	80019da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	e002      	b.n	80019da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f94b 	bl	8001c70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d024      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff f825 	bl	8000a48 <HAL_CAN_TxMailbox2CompleteCallback>
 80019fe:	e016      	b.n	8001a2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e00c      	b.n	8001a2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e002      	b.n	8001a2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f92b 	bl	8001c84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2210      	movs	r2, #16
 8001a50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f912 	bl	8001c98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7fe fffd 	bl	8000a8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2208      	movs	r2, #8
 8001ad0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8f4 	bl	8001cc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8db 	bl	8001cac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2210      	movs	r2, #16
 8001b10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8de 	bl	8001cd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2208      	movs	r2, #8
 8001b32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8d7 	bl	8001ce8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d07b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d072      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d043      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03e      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbc:	2b60      	cmp	r3, #96	; 0x60
 8001bbe:	d02b      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x32a>
 8001bc0:	2b60      	cmp	r3, #96	; 0x60
 8001bc2:	d82e      	bhi.n	8001c22 <HAL_CAN_IRQHandler+0x334>
 8001bc4:	2b50      	cmp	r3, #80	; 0x50
 8001bc6:	d022      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x320>
 8001bc8:	2b50      	cmp	r3, #80	; 0x50
 8001bca:	d82a      	bhi.n	8001c22 <HAL_CAN_IRQHandler+0x334>
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d019      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x316>
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d826      	bhi.n	8001c22 <HAL_CAN_IRQHandler+0x334>
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d010      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x30c>
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d822      	bhi.n	8001c22 <HAL_CAN_IRQHandler+0x334>
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d002      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x2f8>
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d005      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be4:	e01d      	b.n	8001c22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bee:	e019      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf8:	e014      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c02:	e00f      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0c:	e00a      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c16:	e005      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c20:	e000      	b.n	8001c24 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe ff78 	bl	8000b44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d106      	bne.n	8001f3c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f3a:	e005      	b.n	8001f48 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f5c:	f000 f802 	bl	8001f64 <HAL_SYSTICK_Callback>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e177      	b.n	8002280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 8166 	bne.w	800227a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d130      	bne.n	8002028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0201 	and.w	r2, r3, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b03      	cmp	r3, #3
 8002032:	d017      	beq.n	8002064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d123      	bne.n	80020b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80c0 	beq.w	800227a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_GPIO_Init+0x324>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_GPIO_Init+0x324>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_GPIO_Init+0x324>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002116:	4a61      	ldr	r2, [pc, #388]	; (800229c <HAL_GPIO_Init+0x328>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_GPIO_Init+0x32c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d037      	beq.n	80021b2 <HAL_GPIO_Init+0x23e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_GPIO_Init+0x330>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d031      	beq.n	80021ae <HAL_GPIO_Init+0x23a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_GPIO_Init+0x334>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d02b      	beq.n	80021aa <HAL_GPIO_Init+0x236>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_GPIO_Init+0x338>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d025      	beq.n	80021a6 <HAL_GPIO_Init+0x232>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_GPIO_Init+0x33c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_GPIO_Init+0x340>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d019      	beq.n	800219e <HAL_GPIO_Init+0x22a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x344>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	; (80022bc <HAL_GPIO_Init+0x348>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_GPIO_Init+0x34c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x21a>
 800218a:	2309      	movs	r3, #9
 800218c:	e012      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800218e:	230a      	movs	r3, #10
 8002190:	e010      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 8002192:	2308      	movs	r3, #8
 8002194:	e00e      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 8002196:	2307      	movs	r3, #7
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800219a:	2306      	movs	r3, #6
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x328>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_GPIO_Init+0x354>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae84 	bls.w	8001f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40022400 	.word	0x40022400
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e8:	e003      	b.n	80022f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43d9      	mvns	r1, r3
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	400b      	ands	r3, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f806 	bl	8002364 <HAL_GPIO_EXTI_Callback>
  }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e267      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d075      	beq.n	8002486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b85      	ldr	r3, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023be:	d10b      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05b      	beq.n	8002484 <HAL_RCC_OscConfig+0x108>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d157      	bne.n	8002484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e242      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x74>
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a75      	ldr	r2, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01d      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x98>
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6c      	ldr	r2, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 8002414:	4b69      	ldr	r3, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a68      	ldr	r2, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fe1c 	bl	8001070 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fe18 	bl	8001070 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e207      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xc0>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fe08 	bl	8001070 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fe04 	bl	8001070 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1f3      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0xe8>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d063      	beq.n	800255a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d11c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d116      	bne.n	80024e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RCC_OscConfig+0x152>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1c7      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4937      	ldr	r1, [pc, #220]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	e03a      	b.n	800255a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_RCC_OscConfig+0x244>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fdbd 	bl	8001070 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fdb9 	bl	8001070 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1a8      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4925      	ldr	r1, [pc, #148]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x244>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fd9c 	bl	8001070 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe fd98 	bl	8001070 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e187      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d036      	beq.n	80025d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0x248>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fd7c 	bl	8001070 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe fd78 	bl	8001070 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e167      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x240>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x200>
 800259a:	e01b      	b.n	80025d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_OscConfig+0x248>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fd65 	bl	8001070 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	e00e      	b.n	80025c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe fd61 	bl	8001070 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d907      	bls.n	80025c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e150      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470000 	.word	0x42470000
 80025c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ea      	bne.n	80025aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8097 	beq.w	8002710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a7c      	ldr	r2, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b7a      	ldr	r3, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a73      	ldr	r2, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe fd21 	bl	8001070 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fd1d 	bl	8001070 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e10c      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x474>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x2ea>
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a63      	ldr	r2, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x324>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x30c>
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x324>
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b55      	ldr	r3, [pc, #340]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fce2 	bl	8001070 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fcde 	bl	8001070 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0cb      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ee      	beq.n	80026b0 <HAL_RCC_OscConfig+0x334>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fe fccc 	bl	8001070 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fcc8 	bl	8001070 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0b5      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ee      	bne.n	80026dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a38      	ldr	r2, [pc, #224]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a1 	beq.w	800285c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d05c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d141      	bne.n	80027b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fc9c 	bl	8001070 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fc98 	bl	8001070 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e087      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	491b      	ldr	r1, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fc71 	bl	8001070 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fc6d 	bl	8001070 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e05c      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x416>
 80027b0:	e054      	b.n	800285c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fc5a 	bl	8001070 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fc56 	bl	8001070 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e045      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x444>
 80027de:	e03d      	b.n	800285c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e038      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d028      	beq.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d121      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11a      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	3b01      	subs	r3, #1
 8002842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0cc      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d90c      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	2b03      	cmp	r3, #3
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e067      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4934      	ldr	r1, [pc, #208]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295c:	f7fe fb88 	bl	8001070 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe fb84 	bl	8001070 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e04f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d20c      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490a      	ldr	r1, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fae8 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08004334 	.word	0x08004334
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000004 	.word	0x20000004

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b094      	sub	sp, #80	; 0x50
 8002a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
 8002a44:	2300      	movs	r3, #0
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a48:	2300      	movs	r3, #0
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a50:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d00d      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x40>
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	f200 80e1 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x34>
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6a:	e0db      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a6c:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a70:	e0db      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a76:	e0d8      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a82:	4b6d      	ldr	r3, [pc, #436]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	2200      	movs	r2, #0
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abc:	0150      	lsls	r0, r2, #5
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	1a51      	subs	r1, r2, r1
 8002ac6:	6139      	str	r1, [r7, #16]
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002adc:	4659      	mov	r1, fp
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	018a      	lsls	r2, r1, #6
 8002aea:	4651      	mov	r1, sl
 8002aec:	ebb2 0801 	subs.w	r8, r2, r1
 8002af0:	4659      	mov	r1, fp
 8002af2:	eb63 0901 	sbc.w	r9, r3, r1
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4699      	mov	r9, r3
 8002b0e:	4623      	mov	r3, r4
 8002b10:	eb18 0303 	adds.w	r3, r8, r3
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	462b      	mov	r3, r5
 8002b18:	eb49 0303 	adc.w	r3, r9, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	024b      	lsls	r3, r1, #9
 8002b2e:	4621      	mov	r1, r4
 8002b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b34:	4621      	mov	r1, r4
 8002b36:	024a      	lsls	r2, r1, #9
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b48:	f7fd fbaa 	bl	80002a0 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b54:	e058      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4611      	mov	r1, r2
 8002b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	0159      	lsls	r1, r3, #5
 8002b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b82:	0150      	lsls	r0, r2, #5
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8e:	4649      	mov	r1, r9
 8002b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bac:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	00eb      	lsls	r3, r5, #3
 8002bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bbe:	00e2      	lsls	r2, r4, #3
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	18e3      	adds	r3, r4, r3
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	464b      	mov	r3, r9
 8002bcc:	eb45 0303 	adc.w	r3, r5, r3
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	61fa      	str	r2, [r7, #28]
 8002bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfc:	f7fd fb50 	bl	80002a0 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3750      	adds	r7, #80	; 0x50
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	007a1200 	.word	0x007a1200

08002c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000000 	.word	0x20000000

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08004344 	.word	0x08004344

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffdc 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0b5b      	lsrs	r3, r3, #13
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08004344 	.word	0x08004344

08002cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e041      	b.n	8002d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe f8d4 	bl	8000e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 f9ce 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e04e      	b.n	8002e02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d01d      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_TIM_Base_Start_IT+0xcc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x80>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d111      	bne.n	8002df0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d010      	beq.n	8002e00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	e007      	b.n	8002e00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40001800 	.word	0x40001800

08002e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0202 	mvn.w	r2, #2
 8002e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8ee 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8e0 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8f1 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0204 	mvn.w	r2, #4
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8c4 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8b6 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8c7 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0208 	mvn.w	r2, #8
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f89a 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f88c 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f89d 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0210 	mvn.w	r2, #16
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f870 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f862 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f873 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0201 	mvn.w	r2, #1
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fdf0 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f902 	bl	80031e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f838 	bl	8003078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0220 	mvn.w	r2, #32
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8cc 	bl	80031cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d00f      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <TIM_Base_SetConfig+0x120>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3a      	ldr	r2, [pc, #232]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2f      	ldr	r2, [pc, #188]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d027      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d023      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <TIM_Base_SetConfig+0x120>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <TIM_Base_SetConfig+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <TIM_Base_SetConfig+0x12c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_Base_SetConfig+0x130>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_Base_SetConfig+0x134>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <TIM_Base_SetConfig+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <TIM_Base_SetConfig+0x13c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xf8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800
 80031c0:	40001800 	.word	0x40001800
 80031c4:	40001c00 	.word	0x40001c00
 80031c8:	40002000 	.word	0x40002000

080031cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e03f      	b.n	8003286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fd90 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	; 0x24
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f929 	bl	8003490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800324c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800325c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08a      	sub	sp, #40	; 0x28
 8003292:	af02      	add	r7, sp, #8
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d17c      	bne.n	80033a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_UART_Transmit+0x2c>
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e075      	b.n	80033aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Transmit+0x3e>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e06e      	b.n	80033aa <HAL_UART_Transmit+0x11c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2221      	movs	r2, #33	; 0x21
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e2:	f7fd fec5 	bl	8001070 <HAL_GetTick>
 80032e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d108      	bne.n	8003310 <HAL_UART_Transmit+0x82>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d104      	bne.n	8003310 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e003      	b.n	8003318 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003320:	e02a      	b.n	8003378 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f840 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3302      	adds	r3, #2
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e007      	b.n	800336a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1cf      	bne.n	8003322 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f810 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e006      	b.n	80033aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b090      	sub	sp, #64	; 0x40
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c2:	e050      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d04c      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d2:	f7fd fe4d 	bl	8001070 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033de:	429a      	cmp	r2, r3
 80033e0:	d241      	bcs.n	8003466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003402:	637a      	str	r2, [r7, #52]	; 0x34
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003436:	623a      	str	r2, [r7, #32]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	61bb      	str	r3, [r7, #24]
   return(result);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	429a      	cmp	r2, r3
 8003482:	d09f      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b0c0      	sub	sp, #256	; 0x100
 8003496:	af00      	add	r7, sp, #0
 8003498:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	68d9      	ldr	r1, [r3, #12]
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	ea40 0301 	orr.w	r3, r0, r1
 80034b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e8:	f021 010c 	bic.w	r1, r1, #12
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034f6:	430b      	orrs	r3, r1
 80034f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	6999      	ldr	r1, [r3, #24]
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	ea40 0301 	orr.w	r3, r0, r1
 8003516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b8f      	ldr	r3, [pc, #572]	; (800375c <UART_SetConfig+0x2cc>)
 8003520:	429a      	cmp	r2, r3
 8003522:	d005      	beq.n	8003530 <UART_SetConfig+0xa0>
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <UART_SetConfig+0x2d0>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d104      	bne.n	800353a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003530:	f7ff fba8 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8003534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003538:	e003      	b.n	8003542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff fb8f 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 800353e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	f040 810c 	bne.w	8003768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800355a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800355e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	1891      	adds	r1, r2, r2
 8003568:	65b9      	str	r1, [r7, #88]	; 0x58
 800356a:	415b      	adcs	r3, r3
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003572:	4621      	mov	r1, r4
 8003574:	eb12 0801 	adds.w	r8, r2, r1
 8003578:	4629      	mov	r1, r5
 800357a:	eb43 0901 	adc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a0:	462b      	mov	r3, r5
 80035a2:	eb49 0303 	adc.w	r3, r9, r3
 80035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035be:	460b      	mov	r3, r1
 80035c0:	18db      	adds	r3, r3, r3
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
 80035c4:	4613      	mov	r3, r2
 80035c6:	eb42 0303 	adc.w	r3, r2, r3
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035d4:	f7fc fe64 	bl	80002a0 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <UART_SetConfig+0x2d4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003600:	415b      	adcs	r3, r3
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003608:	4641      	mov	r1, r8
 800360a:	eb12 0a01 	adds.w	sl, r2, r1
 800360e:	4649      	mov	r1, r9
 8003610:	eb43 0b01 	adc.w	fp, r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003628:	4692      	mov	sl, r2
 800362a:	469b      	mov	fp, r3
 800362c:	4643      	mov	r3, r8
 800362e:	eb1a 0303 	adds.w	r3, sl, r3
 8003632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003636:	464b      	mov	r3, r9
 8003638:	eb4b 0303 	adc.w	r3, fp, r3
 800363c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800364c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003654:	460b      	mov	r3, r1
 8003656:	18db      	adds	r3, r3, r3
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
 800365a:	4613      	mov	r3, r2
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800366a:	f7fc fe19 	bl	80002a0 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <UART_SetConfig+0x2d4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <UART_SetConfig+0x2d4>)
 800368c:	fba3 2302 	umull	r2, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	441c      	add	r4, r3
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036b4:	415b      	adcs	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6339      	str	r1, [r7, #48]	; 0x30
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f0:	464b      	mov	r3, r9
 80036f2:	460a      	mov	r2, r1
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003708:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800370c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003710:	460b      	mov	r3, r1
 8003712:	18db      	adds	r3, r3, r3
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003726:	f7fc fdbb 	bl	80002a0 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <UART_SetConfig+0x2d4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <UART_SetConfig+0x2d4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4422      	add	r2, r4
 8003756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003758:	e105      	b.n	8003966 <UART_SetConfig+0x4d6>
 800375a:	bf00      	nop
 800375c:	40011000 	.word	0x40011000
 8003760:	40011400 	.word	0x40011400
 8003764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	2200      	movs	r2, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800377a:	4642      	mov	r2, r8
 800377c:	464b      	mov	r3, r9
 800377e:	1891      	adds	r1, r2, r2
 8003780:	6239      	str	r1, [r7, #32]
 8003782:	415b      	adcs	r3, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378a:	4641      	mov	r1, r8
 800378c:	1854      	adds	r4, r2, r1
 800378e:	4649      	mov	r1, r9
 8003790:	eb43 0501 	adc.w	r5, r3, r1
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	00eb      	lsls	r3, r5, #3
 800379e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a2:	00e2      	lsls	r2, r4, #3
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	4643      	mov	r3, r8
 80037aa:	18e3      	adds	r3, r4, r3
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b0:	464b      	mov	r3, r9
 80037b2:	eb45 0303 	adc.w	r3, r5, r3
 80037b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037d6:	4629      	mov	r1, r5
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e0:	4621      	mov	r1, r4
 80037e2:	008a      	lsls	r2, r1, #2
 80037e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037e8:	f7fc fd5a 	bl	80002a0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b60      	ldr	r3, [pc, #384]	; (8003974 <UART_SetConfig+0x4e4>)
 80037f2:	fba3 2302 	umull	r2, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	011c      	lsls	r4, r3, #4
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	1891      	adds	r1, r2, r2
 8003812:	61b9      	str	r1, [r7, #24]
 8003814:	415b      	adcs	r3, r3
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800381c:	4641      	mov	r1, r8
 800381e:	1851      	adds	r1, r2, r1
 8003820:	6139      	str	r1, [r7, #16]
 8003822:	4649      	mov	r1, r9
 8003824:	414b      	adcs	r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	00cb      	lsls	r3, r1, #3
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383e:	4651      	mov	r1, sl
 8003840:	00ca      	lsls	r2, r1, #3
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	4603      	mov	r3, r0
 8003848:	4642      	mov	r2, r8
 800384a:	189b      	adds	r3, r3, r2
 800384c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003850:	464b      	mov	r3, r9
 8003852:	460a      	mov	r2, r1
 8003854:	eb42 0303 	adc.w	r3, r2, r3
 8003858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	67bb      	str	r3, [r7, #120]	; 0x78
 8003866:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003874:	4649      	mov	r1, r9
 8003876:	008b      	lsls	r3, r1, #2
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387e:	4641      	mov	r1, r8
 8003880:	008a      	lsls	r2, r1, #2
 8003882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003886:	f7fc fd0b 	bl	80002a0 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <UART_SetConfig+0x4e4>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2164      	movs	r1, #100	; 0x64
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	; 0x32
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <UART_SetConfig+0x4e4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ae:	441c      	add	r4, r3
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	673b      	str	r3, [r7, #112]	; 0x70
 80038b8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	415b      	adcs	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ce:	4641      	mov	r1, r8
 80038d0:	1851      	adds	r1, r2, r1
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	4649      	mov	r1, r9
 80038d6:	414b      	adcs	r3, r1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e6:	4659      	mov	r1, fp
 80038e8:	00cb      	lsls	r3, r1, #3
 80038ea:	4651      	mov	r1, sl
 80038ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f0:	4651      	mov	r1, sl
 80038f2:	00ca      	lsls	r2, r1, #3
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	4642      	mov	r2, r8
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003900:	464b      	mov	r3, r9
 8003902:	460a      	mov	r2, r1
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	663b      	str	r3, [r7, #96]	; 0x60
 8003914:	667a      	str	r2, [r7, #100]	; 0x64
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003922:	4649      	mov	r1, r9
 8003924:	008b      	lsls	r3, r1, #2
 8003926:	4641      	mov	r1, r8
 8003928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800392c:	4641      	mov	r1, r8
 800392e:	008a      	lsls	r2, r1, #2
 8003930:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003934:	f7fc fcb4 	bl	80002a0 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <UART_SetConfig+0x4e4>)
 800393e:	fba3 1302 	umull	r1, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2164      	movs	r1, #100	; 0x64
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <UART_SetConfig+0x4e4>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4422      	add	r2, r4
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000000c 	.word	0x2000000c

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	; (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	; (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	; (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fc8e 	bl	80042b8 <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08004388 	.word	0x08004388
 80039c0:	08004388 	.word	0x08004388
 80039c4:	08004388 	.word	0x08004388
 80039c8:	0800438c 	.word	0x0800438c

080039cc <memset>:
 80039cc:	4402      	add	r2, r0
 80039ce:	4603      	mov	r3, r0
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d100      	bne.n	80039d6 <memset+0xa>
 80039d4:	4770      	bx	lr
 80039d6:	f803 1b01 	strb.w	r1, [r3], #1
 80039da:	e7f9      	b.n	80039d0 <memset+0x4>

080039dc <siprintf>:
 80039dc:	b40e      	push	{r1, r2, r3}
 80039de:	b500      	push	{lr}
 80039e0:	b09c      	sub	sp, #112	; 0x70
 80039e2:	ab1d      	add	r3, sp, #116	; 0x74
 80039e4:	9002      	str	r0, [sp, #8]
 80039e6:	9006      	str	r0, [sp, #24]
 80039e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <siprintf+0x38>)
 80039ee:	9107      	str	r1, [sp, #28]
 80039f0:	9104      	str	r1, [sp, #16]
 80039f2:	4909      	ldr	r1, [pc, #36]	; (8003a18 <siprintf+0x3c>)
 80039f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f8:	9105      	str	r1, [sp, #20]
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	a902      	add	r1, sp, #8
 8003a00:	f000 f868 	bl	8003ad4 <_svfiprintf_r>
 8003a04:	9b02      	ldr	r3, [sp, #8]
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	b01c      	add	sp, #112	; 0x70
 8003a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a10:	b003      	add	sp, #12
 8003a12:	4770      	bx	lr
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	ffff0208 	.word	0xffff0208

08003a1c <__ssputs_r>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	688e      	ldr	r6, [r1, #8]
 8003a22:	429e      	cmp	r6, r3
 8003a24:	4682      	mov	sl, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4690      	mov	r8, r2
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	d838      	bhi.n	8003aa0 <__ssputs_r+0x84>
 8003a2e:	898a      	ldrh	r2, [r1, #12]
 8003a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a34:	d032      	beq.n	8003a9c <__ssputs_r+0x80>
 8003a36:	6825      	ldr	r5, [r4, #0]
 8003a38:	6909      	ldr	r1, [r1, #16]
 8003a3a:	eba5 0901 	sub.w	r9, r5, r1
 8003a3e:	6965      	ldr	r5, [r4, #20]
 8003a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a48:	3301      	adds	r3, #1
 8003a4a:	444b      	add	r3, r9
 8003a4c:	106d      	asrs	r5, r5, #1
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	bf38      	it	cc
 8003a52:	461d      	movcc	r5, r3
 8003a54:	0553      	lsls	r3, r2, #21
 8003a56:	d531      	bpl.n	8003abc <__ssputs_r+0xa0>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f000 fb63 	bl	8004124 <_malloc_r>
 8003a5e:	4606      	mov	r6, r0
 8003a60:	b950      	cbnz	r0, 8003a78 <__ssputs_r+0x5c>
 8003a62:	230c      	movs	r3, #12
 8003a64:	f8ca 3000 	str.w	r3, [sl]
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a78:	6921      	ldr	r1, [r4, #16]
 8003a7a:	464a      	mov	r2, r9
 8003a7c:	f000 fabe 	bl	8003ffc <memcpy>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	6126      	str	r6, [r4, #16]
 8003a8e:	6165      	str	r5, [r4, #20]
 8003a90:	444e      	add	r6, r9
 8003a92:	eba5 0509 	sub.w	r5, r5, r9
 8003a96:	6026      	str	r6, [r4, #0]
 8003a98:	60a5      	str	r5, [r4, #8]
 8003a9a:	463e      	mov	r6, r7
 8003a9c:	42be      	cmp	r6, r7
 8003a9e:	d900      	bls.n	8003aa2 <__ssputs_r+0x86>
 8003aa0:	463e      	mov	r6, r7
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	f000 fab6 	bl	8004018 <memmove>
 8003aac:	68a3      	ldr	r3, [r4, #8]
 8003aae:	1b9b      	subs	r3, r3, r6
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	4433      	add	r3, r6
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7db      	b.n	8003a74 <__ssputs_r+0x58>
 8003abc:	462a      	mov	r2, r5
 8003abe:	f000 fba5 	bl	800420c <_realloc_r>
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d1e1      	bne.n	8003a8c <__ssputs_r+0x70>
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	4650      	mov	r0, sl
 8003acc:	f000 fabe 	bl	800404c <_free_r>
 8003ad0:	e7c7      	b.n	8003a62 <__ssputs_r+0x46>
	...

08003ad4 <_svfiprintf_r>:
 8003ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad8:	4698      	mov	r8, r3
 8003ada:	898b      	ldrh	r3, [r1, #12]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	b09d      	sub	sp, #116	; 0x74
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	460d      	mov	r5, r1
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	d50e      	bpl.n	8003b06 <_svfiprintf_r+0x32>
 8003ae8:	690b      	ldr	r3, [r1, #16]
 8003aea:	b963      	cbnz	r3, 8003b06 <_svfiprintf_r+0x32>
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	f000 fb19 	bl	8004124 <_malloc_r>
 8003af2:	6028      	str	r0, [r5, #0]
 8003af4:	6128      	str	r0, [r5, #16]
 8003af6:	b920      	cbnz	r0, 8003b02 <_svfiprintf_r+0x2e>
 8003af8:	230c      	movs	r3, #12
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	e0d1      	b.n	8003ca6 <_svfiprintf_r+0x1d2>
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	616b      	str	r3, [r5, #20]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b14:	2330      	movs	r3, #48	; 0x30
 8003b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003cc0 <_svfiprintf_r+0x1ec>
 8003b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b1e:	f04f 0901 	mov.w	r9, #1
 8003b22:	4623      	mov	r3, r4
 8003b24:	469a      	mov	sl, r3
 8003b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b2a:	b10a      	cbz	r2, 8003b30 <_svfiprintf_r+0x5c>
 8003b2c:	2a25      	cmp	r2, #37	; 0x25
 8003b2e:	d1f9      	bne.n	8003b24 <_svfiprintf_r+0x50>
 8003b30:	ebba 0b04 	subs.w	fp, sl, r4
 8003b34:	d00b      	beq.n	8003b4e <_svfiprintf_r+0x7a>
 8003b36:	465b      	mov	r3, fp
 8003b38:	4622      	mov	r2, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f7ff ff6d 	bl	8003a1c <__ssputs_r>
 8003b42:	3001      	adds	r0, #1
 8003b44:	f000 80aa 	beq.w	8003c9c <_svfiprintf_r+0x1c8>
 8003b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b4a:	445a      	add	r2, fp
 8003b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80a2 	beq.w	8003c9c <_svfiprintf_r+0x1c8>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b62:	f10a 0a01 	add.w	sl, sl, #1
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	9307      	str	r3, [sp, #28]
 8003b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b70:	4654      	mov	r4, sl
 8003b72:	2205      	movs	r2, #5
 8003b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b78:	4851      	ldr	r0, [pc, #324]	; (8003cc0 <_svfiprintf_r+0x1ec>)
 8003b7a:	f7fc fb41 	bl	8000200 <memchr>
 8003b7e:	9a04      	ldr	r2, [sp, #16]
 8003b80:	b9d8      	cbnz	r0, 8003bba <_svfiprintf_r+0xe6>
 8003b82:	06d0      	lsls	r0, r2, #27
 8003b84:	bf44      	itt	mi
 8003b86:	2320      	movmi	r3, #32
 8003b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8c:	0711      	lsls	r1, r2, #28
 8003b8e:	bf44      	itt	mi
 8003b90:	232b      	movmi	r3, #43	; 0x2b
 8003b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b96:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9c:	d015      	beq.n	8003bca <_svfiprintf_r+0xf6>
 8003b9e:	9a07      	ldr	r2, [sp, #28]
 8003ba0:	4654      	mov	r4, sl
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f04f 0c0a 	mov.w	ip, #10
 8003ba8:	4621      	mov	r1, r4
 8003baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bae:	3b30      	subs	r3, #48	; 0x30
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d94e      	bls.n	8003c52 <_svfiprintf_r+0x17e>
 8003bb4:	b1b0      	cbz	r0, 8003be4 <_svfiprintf_r+0x110>
 8003bb6:	9207      	str	r2, [sp, #28]
 8003bb8:	e014      	b.n	8003be4 <_svfiprintf_r+0x110>
 8003bba:	eba0 0308 	sub.w	r3, r0, r8
 8003bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	46a2      	mov	sl, r4
 8003bc8:	e7d2      	b.n	8003b70 <_svfiprintf_r+0x9c>
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	1d19      	adds	r1, r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	9103      	str	r1, [sp, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfbb      	ittet	lt
 8003bd6:	425b      	neglt	r3, r3
 8003bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bdc:	9307      	strge	r3, [sp, #28]
 8003bde:	9307      	strlt	r3, [sp, #28]
 8003be0:	bfb8      	it	lt
 8003be2:	9204      	strlt	r2, [sp, #16]
 8003be4:	7823      	ldrb	r3, [r4, #0]
 8003be6:	2b2e      	cmp	r3, #46	; 0x2e
 8003be8:	d10c      	bne.n	8003c04 <_svfiprintf_r+0x130>
 8003bea:	7863      	ldrb	r3, [r4, #1]
 8003bec:	2b2a      	cmp	r3, #42	; 0x2a
 8003bee:	d135      	bne.n	8003c5c <_svfiprintf_r+0x188>
 8003bf0:	9b03      	ldr	r3, [sp, #12]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	9203      	str	r2, [sp, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bfb8      	it	lt
 8003bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c00:	3402      	adds	r4, #2
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cd0 <_svfiprintf_r+0x1fc>
 8003c08:	7821      	ldrb	r1, [r4, #0]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	4650      	mov	r0, sl
 8003c0e:	f7fc faf7 	bl	8000200 <memchr>
 8003c12:	b140      	cbz	r0, 8003c26 <_svfiprintf_r+0x152>
 8003c14:	2340      	movs	r3, #64	; 0x40
 8003c16:	eba0 000a 	sub.w	r0, r0, sl
 8003c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	4303      	orrs	r3, r0
 8003c22:	3401      	adds	r4, #1
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2a:	4826      	ldr	r0, [pc, #152]	; (8003cc4 <_svfiprintf_r+0x1f0>)
 8003c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c30:	2206      	movs	r2, #6
 8003c32:	f7fc fae5 	bl	8000200 <memchr>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d038      	beq.n	8003cac <_svfiprintf_r+0x1d8>
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <_svfiprintf_r+0x1f4>)
 8003c3c:	bb1b      	cbnz	r3, 8003c86 <_svfiprintf_r+0x1b2>
 8003c3e:	9b03      	ldr	r3, [sp, #12]
 8003c40:	3307      	adds	r3, #7
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	3308      	adds	r3, #8
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c4c:	4433      	add	r3, r6
 8003c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c50:	e767      	b.n	8003b22 <_svfiprintf_r+0x4e>
 8003c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c56:	460c      	mov	r4, r1
 8003c58:	2001      	movs	r0, #1
 8003c5a:	e7a5      	b.n	8003ba8 <_svfiprintf_r+0xd4>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	3401      	adds	r4, #1
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	4619      	mov	r1, r3
 8003c64:	f04f 0c0a 	mov.w	ip, #10
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6e:	3a30      	subs	r2, #48	; 0x30
 8003c70:	2a09      	cmp	r2, #9
 8003c72:	d903      	bls.n	8003c7c <_svfiprintf_r+0x1a8>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0c5      	beq.n	8003c04 <_svfiprintf_r+0x130>
 8003c78:	9105      	str	r1, [sp, #20]
 8003c7a:	e7c3      	b.n	8003c04 <_svfiprintf_r+0x130>
 8003c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c80:	4604      	mov	r4, r0
 8003c82:	2301      	movs	r3, #1
 8003c84:	e7f0      	b.n	8003c68 <_svfiprintf_r+0x194>
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <_svfiprintf_r+0x1f8>)
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	4638      	mov	r0, r7
 8003c92:	f3af 8000 	nop.w
 8003c96:	1c42      	adds	r2, r0, #1
 8003c98:	4606      	mov	r6, r0
 8003c9a:	d1d6      	bne.n	8003c4a <_svfiprintf_r+0x176>
 8003c9c:	89ab      	ldrh	r3, [r5, #12]
 8003c9e:	065b      	lsls	r3, r3, #25
 8003ca0:	f53f af2c 	bmi.w	8003afc <_svfiprintf_r+0x28>
 8003ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca6:	b01d      	add	sp, #116	; 0x74
 8003ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cac:	ab03      	add	r3, sp, #12
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <_svfiprintf_r+0x1f8>)
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f000 f87a 	bl	8003db0 <_printf_i>
 8003cbc:	e7eb      	b.n	8003c96 <_svfiprintf_r+0x1c2>
 8003cbe:	bf00      	nop
 8003cc0:	0800434c 	.word	0x0800434c
 8003cc4:	08004356 	.word	0x08004356
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	08003a1d 	.word	0x08003a1d
 8003cd0:	08004352 	.word	0x08004352

08003cd4 <_printf_common>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	4616      	mov	r6, r2
 8003cda:	4699      	mov	r9, r3
 8003cdc:	688a      	ldr	r2, [r1, #8]
 8003cde:	690b      	ldr	r3, [r1, #16]
 8003ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bfb8      	it	lt
 8003ce8:	4613      	movlt	r3, r2
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	b10a      	cbz	r2, 8003cfa <_printf_common+0x26>
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	0699      	lsls	r1, r3, #26
 8003cfe:	bf42      	ittt	mi
 8003d00:	6833      	ldrmi	r3, [r6, #0]
 8003d02:	3302      	addmi	r3, #2
 8003d04:	6033      	strmi	r3, [r6, #0]
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	f015 0506 	ands.w	r5, r5, #6
 8003d0c:	d106      	bne.n	8003d1c <_printf_common+0x48>
 8003d0e:	f104 0a19 	add.w	sl, r4, #25
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	6832      	ldr	r2, [r6, #0]
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	dc26      	bgt.n	8003d6a <_printf_common+0x96>
 8003d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d20:	1e13      	subs	r3, r2, #0
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	bf18      	it	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	0692      	lsls	r2, r2, #26
 8003d2a:	d42b      	bmi.n	8003d84 <_printf_common+0xb0>
 8003d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d30:	4649      	mov	r1, r9
 8003d32:	4638      	mov	r0, r7
 8003d34:	47c0      	blx	r8
 8003d36:	3001      	adds	r0, #1
 8003d38:	d01e      	beq.n	8003d78 <_printf_common+0xa4>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	68e5      	ldr	r5, [r4, #12]
 8003d3e:	6832      	ldr	r2, [r6, #0]
 8003d40:	f003 0306 	and.w	r3, r3, #6
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	bf08      	it	eq
 8003d48:	1aad      	subeq	r5, r5, r2
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	bf0c      	ite	eq
 8003d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d54:	2500      	movne	r5, #0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	bfc4      	itt	gt
 8003d5a:	1a9b      	subgt	r3, r3, r2
 8003d5c:	18ed      	addgt	r5, r5, r3
 8003d5e:	2600      	movs	r6, #0
 8003d60:	341a      	adds	r4, #26
 8003d62:	42b5      	cmp	r5, r6
 8003d64:	d11a      	bne.n	8003d9c <_printf_common+0xc8>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e008      	b.n	8003d7c <_printf_common+0xa8>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4652      	mov	r2, sl
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4638      	mov	r0, r7
 8003d72:	47c0      	blx	r8
 8003d74:	3001      	adds	r0, #1
 8003d76:	d103      	bne.n	8003d80 <_printf_common+0xac>
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d80:	3501      	adds	r5, #1
 8003d82:	e7c6      	b.n	8003d12 <_printf_common+0x3e>
 8003d84:	18e1      	adds	r1, r4, r3
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	2030      	movs	r0, #48	; 0x30
 8003d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d8e:	4422      	add	r2, r4
 8003d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d98:	3302      	adds	r3, #2
 8003d9a:	e7c7      	b.n	8003d2c <_printf_common+0x58>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4649      	mov	r1, r9
 8003da2:	4638      	mov	r0, r7
 8003da4:	47c0      	blx	r8
 8003da6:	3001      	adds	r0, #1
 8003da8:	d0e6      	beq.n	8003d78 <_printf_common+0xa4>
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7d9      	b.n	8003d62 <_printf_common+0x8e>
	...

08003db0 <_printf_i>:
 8003db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	7e0f      	ldrb	r7, [r1, #24]
 8003db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db8:	2f78      	cmp	r7, #120	; 0x78
 8003dba:	4691      	mov	r9, r2
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	469a      	mov	sl, r3
 8003dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dc6:	d807      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dc8:	2f62      	cmp	r7, #98	; 0x62
 8003dca:	d80a      	bhi.n	8003de2 <_printf_i+0x32>
 8003dcc:	2f00      	cmp	r7, #0
 8003dce:	f000 80d8 	beq.w	8003f82 <_printf_i+0x1d2>
 8003dd2:	2f58      	cmp	r7, #88	; 0x58
 8003dd4:	f000 80a3 	beq.w	8003f1e <_printf_i+0x16e>
 8003dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003de0:	e03a      	b.n	8003e58 <_printf_i+0xa8>
 8003de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003de6:	2b15      	cmp	r3, #21
 8003de8:	d8f6      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dea:	a101      	add	r1, pc, #4	; (adr r1, 8003df0 <_printf_i+0x40>)
 8003dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df0:	08003e49 	.word	0x08003e49
 8003df4:	08003e5d 	.word	0x08003e5d
 8003df8:	08003dd9 	.word	0x08003dd9
 8003dfc:	08003dd9 	.word	0x08003dd9
 8003e00:	08003dd9 	.word	0x08003dd9
 8003e04:	08003dd9 	.word	0x08003dd9
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003dd9 	.word	0x08003dd9
 8003e10:	08003dd9 	.word	0x08003dd9
 8003e14:	08003dd9 	.word	0x08003dd9
 8003e18:	08003dd9 	.word	0x08003dd9
 8003e1c:	08003f69 	.word	0x08003f69
 8003e20:	08003e8d 	.word	0x08003e8d
 8003e24:	08003f4b 	.word	0x08003f4b
 8003e28:	08003dd9 	.word	0x08003dd9
 8003e2c:	08003dd9 	.word	0x08003dd9
 8003e30:	08003f8b 	.word	0x08003f8b
 8003e34:	08003dd9 	.word	0x08003dd9
 8003e38:	08003e8d 	.word	0x08003e8d
 8003e3c:	08003dd9 	.word	0x08003dd9
 8003e40:	08003dd9 	.word	0x08003dd9
 8003e44:	08003f53 	.word	0x08003f53
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	602a      	str	r2, [r5, #0]
 8003e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0a3      	b.n	8003fa4 <_printf_i+0x1f4>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	6829      	ldr	r1, [r5, #0]
 8003e60:	0606      	lsls	r6, r0, #24
 8003e62:	f101 0304 	add.w	r3, r1, #4
 8003e66:	d50a      	bpl.n	8003e7e <_printf_i+0xce>
 8003e68:	680e      	ldr	r6, [r1, #0]
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	2e00      	cmp	r6, #0
 8003e6e:	da03      	bge.n	8003e78 <_printf_i+0xc8>
 8003e70:	232d      	movs	r3, #45	; 0x2d
 8003e72:	4276      	negs	r6, r6
 8003e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e78:	485e      	ldr	r0, [pc, #376]	; (8003ff4 <_printf_i+0x244>)
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	e019      	b.n	8003eb2 <_printf_i+0x102>
 8003e7e:	680e      	ldr	r6, [r1, #0]
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e86:	bf18      	it	ne
 8003e88:	b236      	sxthne	r6, r6
 8003e8a:	e7ef      	b.n	8003e6c <_printf_i+0xbc>
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	6820      	ldr	r0, [r4, #0]
 8003e90:	1d19      	adds	r1, r3, #4
 8003e92:	6029      	str	r1, [r5, #0]
 8003e94:	0601      	lsls	r1, r0, #24
 8003e96:	d501      	bpl.n	8003e9c <_printf_i+0xec>
 8003e98:	681e      	ldr	r6, [r3, #0]
 8003e9a:	e002      	b.n	8003ea2 <_printf_i+0xf2>
 8003e9c:	0646      	lsls	r6, r0, #25
 8003e9e:	d5fb      	bpl.n	8003e98 <_printf_i+0xe8>
 8003ea0:	881e      	ldrh	r6, [r3, #0]
 8003ea2:	4854      	ldr	r0, [pc, #336]	; (8003ff4 <_printf_i+0x244>)
 8003ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2308      	moveq	r3, #8
 8003eaa:	230a      	movne	r3, #10
 8003eac:	2100      	movs	r1, #0
 8003eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eb2:	6865      	ldr	r5, [r4, #4]
 8003eb4:	60a5      	str	r5, [r4, #8]
 8003eb6:	2d00      	cmp	r5, #0
 8003eb8:	bfa2      	ittt	ge
 8003eba:	6821      	ldrge	r1, [r4, #0]
 8003ebc:	f021 0104 	bicge.w	r1, r1, #4
 8003ec0:	6021      	strge	r1, [r4, #0]
 8003ec2:	b90e      	cbnz	r6, 8003ec8 <_printf_i+0x118>
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	d04d      	beq.n	8003f64 <_printf_i+0x1b4>
 8003ec8:	4615      	mov	r5, r2
 8003eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ece:	fb03 6711 	mls	r7, r3, r1, r6
 8003ed2:	5dc7      	ldrb	r7, [r0, r7]
 8003ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ed8:	4637      	mov	r7, r6
 8003eda:	42bb      	cmp	r3, r7
 8003edc:	460e      	mov	r6, r1
 8003ede:	d9f4      	bls.n	8003eca <_printf_i+0x11a>
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d10b      	bne.n	8003efc <_printf_i+0x14c>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	07de      	lsls	r6, r3, #31
 8003ee8:	d508      	bpl.n	8003efc <_printf_i+0x14c>
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	6861      	ldr	r1, [r4, #4]
 8003eee:	4299      	cmp	r1, r3
 8003ef0:	bfde      	ittt	le
 8003ef2:	2330      	movle	r3, #48	; 0x30
 8003ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003efc:	1b52      	subs	r2, r2, r5
 8003efe:	6122      	str	r2, [r4, #16]
 8003f00:	f8cd a000 	str.w	sl, [sp]
 8003f04:	464b      	mov	r3, r9
 8003f06:	aa03      	add	r2, sp, #12
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	f7ff fee2 	bl	8003cd4 <_printf_common>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d14c      	bne.n	8003fae <_printf_i+0x1fe>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	b004      	add	sp, #16
 8003f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1e:	4835      	ldr	r0, [pc, #212]	; (8003ff4 <_printf_i+0x244>)
 8003f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f24:	6829      	ldr	r1, [r5, #0]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f2c:	6029      	str	r1, [r5, #0]
 8003f2e:	061d      	lsls	r5, r3, #24
 8003f30:	d514      	bpl.n	8003f5c <_printf_i+0x1ac>
 8003f32:	07df      	lsls	r7, r3, #31
 8003f34:	bf44      	itt	mi
 8003f36:	f043 0320 	orrmi.w	r3, r3, #32
 8003f3a:	6023      	strmi	r3, [r4, #0]
 8003f3c:	b91e      	cbnz	r6, 8003f46 <_printf_i+0x196>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f023 0320 	bic.w	r3, r3, #32
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	2310      	movs	r3, #16
 8003f48:	e7b0      	b.n	8003eac <_printf_i+0xfc>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	2378      	movs	r3, #120	; 0x78
 8003f54:	4828      	ldr	r0, [pc, #160]	; (8003ff8 <_printf_i+0x248>)
 8003f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f5a:	e7e3      	b.n	8003f24 <_printf_i+0x174>
 8003f5c:	0659      	lsls	r1, r3, #25
 8003f5e:	bf48      	it	mi
 8003f60:	b2b6      	uxthmi	r6, r6
 8003f62:	e7e6      	b.n	8003f32 <_printf_i+0x182>
 8003f64:	4615      	mov	r5, r2
 8003f66:	e7bb      	b.n	8003ee0 <_printf_i+0x130>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	6826      	ldr	r6, [r4, #0]
 8003f6c:	6961      	ldr	r1, [r4, #20]
 8003f6e:	1d18      	adds	r0, r3, #4
 8003f70:	6028      	str	r0, [r5, #0]
 8003f72:	0635      	lsls	r5, r6, #24
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0x1cc>
 8003f78:	6019      	str	r1, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <_printf_i+0x1d2>
 8003f7c:	0670      	lsls	r0, r6, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0x1c8>
 8003f80:	8019      	strh	r1, [r3, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	4615      	mov	r5, r2
 8003f88:	e7ba      	b.n	8003f00 <_printf_i+0x150>
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	1d1a      	adds	r2, r3, #4
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	681d      	ldr	r5, [r3, #0]
 8003f92:	6862      	ldr	r2, [r4, #4]
 8003f94:	2100      	movs	r1, #0
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc f932 	bl	8000200 <memchr>
 8003f9c:	b108      	cbz	r0, 8003fa2 <_printf_i+0x1f2>
 8003f9e:	1b40      	subs	r0, r0, r5
 8003fa0:	6060      	str	r0, [r4, #4]
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	6123      	str	r3, [r4, #16]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fac:	e7a8      	b.n	8003f00 <_printf_i+0x150>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	47d0      	blx	sl
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d0ab      	beq.n	8003f14 <_printf_i+0x164>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	079b      	lsls	r3, r3, #30
 8003fc0:	d413      	bmi.n	8003fea <_printf_i+0x23a>
 8003fc2:	68e0      	ldr	r0, [r4, #12]
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	4298      	cmp	r0, r3
 8003fc8:	bfb8      	it	lt
 8003fca:	4618      	movlt	r0, r3
 8003fcc:	e7a4      	b.n	8003f18 <_printf_i+0x168>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	47d0      	blx	sl
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d09b      	beq.n	8003f14 <_printf_i+0x164>
 8003fdc:	3501      	adds	r5, #1
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	9903      	ldr	r1, [sp, #12]
 8003fe2:	1a5b      	subs	r3, r3, r1
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dcf2      	bgt.n	8003fce <_printf_i+0x21e>
 8003fe8:	e7eb      	b.n	8003fc2 <_printf_i+0x212>
 8003fea:	2500      	movs	r5, #0
 8003fec:	f104 0619 	add.w	r6, r4, #25
 8003ff0:	e7f5      	b.n	8003fde <_printf_i+0x22e>
 8003ff2:	bf00      	nop
 8003ff4:	0800435d 	.word	0x0800435d
 8003ff8:	0800436e 	.word	0x0800436e

08003ffc <memcpy>:
 8003ffc:	440a      	add	r2, r1
 8003ffe:	4291      	cmp	r1, r2
 8004000:	f100 33ff 	add.w	r3, r0, #4294967295
 8004004:	d100      	bne.n	8004008 <memcpy+0xc>
 8004006:	4770      	bx	lr
 8004008:	b510      	push	{r4, lr}
 800400a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800400e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004012:	4291      	cmp	r1, r2
 8004014:	d1f9      	bne.n	800400a <memcpy+0xe>
 8004016:	bd10      	pop	{r4, pc}

08004018 <memmove>:
 8004018:	4288      	cmp	r0, r1
 800401a:	b510      	push	{r4, lr}
 800401c:	eb01 0402 	add.w	r4, r1, r2
 8004020:	d902      	bls.n	8004028 <memmove+0x10>
 8004022:	4284      	cmp	r4, r0
 8004024:	4623      	mov	r3, r4
 8004026:	d807      	bhi.n	8004038 <memmove+0x20>
 8004028:	1e43      	subs	r3, r0, #1
 800402a:	42a1      	cmp	r1, r4
 800402c:	d008      	beq.n	8004040 <memmove+0x28>
 800402e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004036:	e7f8      	b.n	800402a <memmove+0x12>
 8004038:	4402      	add	r2, r0
 800403a:	4601      	mov	r1, r0
 800403c:	428a      	cmp	r2, r1
 800403e:	d100      	bne.n	8004042 <memmove+0x2a>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800404a:	e7f7      	b.n	800403c <memmove+0x24>

0800404c <_free_r>:
 800404c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800404e:	2900      	cmp	r1, #0
 8004050:	d044      	beq.n	80040dc <_free_r+0x90>
 8004052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004056:	9001      	str	r0, [sp, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f1a1 0404 	sub.w	r4, r1, #4
 800405e:	bfb8      	it	lt
 8004060:	18e4      	addlt	r4, r4, r3
 8004062:	f000 f913 	bl	800428c <__malloc_lock>
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <_free_r+0x94>)
 8004068:	9801      	ldr	r0, [sp, #4]
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	b933      	cbnz	r3, 800407c <_free_r+0x30>
 800406e:	6063      	str	r3, [r4, #4]
 8004070:	6014      	str	r4, [r2, #0]
 8004072:	b003      	add	sp, #12
 8004074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004078:	f000 b90e 	b.w	8004298 <__malloc_unlock>
 800407c:	42a3      	cmp	r3, r4
 800407e:	d908      	bls.n	8004092 <_free_r+0x46>
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	1961      	adds	r1, r4, r5
 8004084:	428b      	cmp	r3, r1
 8004086:	bf01      	itttt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	1949      	addeq	r1, r1, r5
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	e7ed      	b.n	800406e <_free_r+0x22>
 8004092:	461a      	mov	r2, r3
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b10b      	cbz	r3, 800409c <_free_r+0x50>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d9fa      	bls.n	8004092 <_free_r+0x46>
 800409c:	6811      	ldr	r1, [r2, #0]
 800409e:	1855      	adds	r5, r2, r1
 80040a0:	42a5      	cmp	r5, r4
 80040a2:	d10b      	bne.n	80040bc <_free_r+0x70>
 80040a4:	6824      	ldr	r4, [r4, #0]
 80040a6:	4421      	add	r1, r4
 80040a8:	1854      	adds	r4, r2, r1
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	d1e0      	bne.n	8004072 <_free_r+0x26>
 80040b0:	681c      	ldr	r4, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	6053      	str	r3, [r2, #4]
 80040b6:	4421      	add	r1, r4
 80040b8:	6011      	str	r1, [r2, #0]
 80040ba:	e7da      	b.n	8004072 <_free_r+0x26>
 80040bc:	d902      	bls.n	80040c4 <_free_r+0x78>
 80040be:	230c      	movs	r3, #12
 80040c0:	6003      	str	r3, [r0, #0]
 80040c2:	e7d6      	b.n	8004072 <_free_r+0x26>
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	1961      	adds	r1, r4, r5
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf04      	itt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	6063      	str	r3, [r4, #4]
 80040d2:	bf04      	itt	eq
 80040d4:	1949      	addeq	r1, r1, r5
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	6054      	str	r4, [r2, #4]
 80040da:	e7ca      	b.n	8004072 <_free_r+0x26>
 80040dc:	b003      	add	sp, #12
 80040de:	bd30      	pop	{r4, r5, pc}
 80040e0:	200001b0 	.word	0x200001b0

080040e4 <sbrk_aligned>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4e0e      	ldr	r6, [pc, #56]	; (8004120 <sbrk_aligned+0x3c>)
 80040e8:	460c      	mov	r4, r1
 80040ea:	6831      	ldr	r1, [r6, #0]
 80040ec:	4605      	mov	r5, r0
 80040ee:	b911      	cbnz	r1, 80040f6 <sbrk_aligned+0x12>
 80040f0:	f000 f8bc 	bl	800426c <_sbrk_r>
 80040f4:	6030      	str	r0, [r6, #0]
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	f000 f8b7 	bl	800426c <_sbrk_r>
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	d00a      	beq.n	8004118 <sbrk_aligned+0x34>
 8004102:	1cc4      	adds	r4, r0, #3
 8004104:	f024 0403 	bic.w	r4, r4, #3
 8004108:	42a0      	cmp	r0, r4
 800410a:	d007      	beq.n	800411c <sbrk_aligned+0x38>
 800410c:	1a21      	subs	r1, r4, r0
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f8ac 	bl	800426c <_sbrk_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d101      	bne.n	800411c <sbrk_aligned+0x38>
 8004118:	f04f 34ff 	mov.w	r4, #4294967295
 800411c:	4620      	mov	r0, r4
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	200001b4 	.word	0x200001b4

08004124 <_malloc_r>:
 8004124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004128:	1ccd      	adds	r5, r1, #3
 800412a:	f025 0503 	bic.w	r5, r5, #3
 800412e:	3508      	adds	r5, #8
 8004130:	2d0c      	cmp	r5, #12
 8004132:	bf38      	it	cc
 8004134:	250c      	movcc	r5, #12
 8004136:	2d00      	cmp	r5, #0
 8004138:	4607      	mov	r7, r0
 800413a:	db01      	blt.n	8004140 <_malloc_r+0x1c>
 800413c:	42a9      	cmp	r1, r5
 800413e:	d905      	bls.n	800414c <_malloc_r+0x28>
 8004140:	230c      	movs	r3, #12
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	2600      	movs	r6, #0
 8004146:	4630      	mov	r0, r6
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414c:	4e2e      	ldr	r6, [pc, #184]	; (8004208 <_malloc_r+0xe4>)
 800414e:	f000 f89d 	bl	800428c <__malloc_lock>
 8004152:	6833      	ldr	r3, [r6, #0]
 8004154:	461c      	mov	r4, r3
 8004156:	bb34      	cbnz	r4, 80041a6 <_malloc_r+0x82>
 8004158:	4629      	mov	r1, r5
 800415a:	4638      	mov	r0, r7
 800415c:	f7ff ffc2 	bl	80040e4 <sbrk_aligned>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	4604      	mov	r4, r0
 8004164:	d14d      	bne.n	8004202 <_malloc_r+0xde>
 8004166:	6834      	ldr	r4, [r6, #0]
 8004168:	4626      	mov	r6, r4
 800416a:	2e00      	cmp	r6, #0
 800416c:	d140      	bne.n	80041f0 <_malloc_r+0xcc>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	4631      	mov	r1, r6
 8004172:	4638      	mov	r0, r7
 8004174:	eb04 0803 	add.w	r8, r4, r3
 8004178:	f000 f878 	bl	800426c <_sbrk_r>
 800417c:	4580      	cmp	r8, r0
 800417e:	d13a      	bne.n	80041f6 <_malloc_r+0xd2>
 8004180:	6821      	ldr	r1, [r4, #0]
 8004182:	3503      	adds	r5, #3
 8004184:	1a6d      	subs	r5, r5, r1
 8004186:	f025 0503 	bic.w	r5, r5, #3
 800418a:	3508      	adds	r5, #8
 800418c:	2d0c      	cmp	r5, #12
 800418e:	bf38      	it	cc
 8004190:	250c      	movcc	r5, #12
 8004192:	4629      	mov	r1, r5
 8004194:	4638      	mov	r0, r7
 8004196:	f7ff ffa5 	bl	80040e4 <sbrk_aligned>
 800419a:	3001      	adds	r0, #1
 800419c:	d02b      	beq.n	80041f6 <_malloc_r+0xd2>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	442b      	add	r3, r5
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	e00e      	b.n	80041c4 <_malloc_r+0xa0>
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	1b52      	subs	r2, r2, r5
 80041aa:	d41e      	bmi.n	80041ea <_malloc_r+0xc6>
 80041ac:	2a0b      	cmp	r2, #11
 80041ae:	d916      	bls.n	80041de <_malloc_r+0xba>
 80041b0:	1961      	adds	r1, r4, r5
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	6025      	str	r5, [r4, #0]
 80041b6:	bf18      	it	ne
 80041b8:	6059      	strne	r1, [r3, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	bf08      	it	eq
 80041be:	6031      	streq	r1, [r6, #0]
 80041c0:	5162      	str	r2, [r4, r5]
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	4638      	mov	r0, r7
 80041c6:	f104 060b 	add.w	r6, r4, #11
 80041ca:	f000 f865 	bl	8004298 <__malloc_unlock>
 80041ce:	f026 0607 	bic.w	r6, r6, #7
 80041d2:	1d23      	adds	r3, r4, #4
 80041d4:	1af2      	subs	r2, r6, r3
 80041d6:	d0b6      	beq.n	8004146 <_malloc_r+0x22>
 80041d8:	1b9b      	subs	r3, r3, r6
 80041da:	50a3      	str	r3, [r4, r2]
 80041dc:	e7b3      	b.n	8004146 <_malloc_r+0x22>
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	bf0c      	ite	eq
 80041e4:	6032      	streq	r2, [r6, #0]
 80041e6:	605a      	strne	r2, [r3, #4]
 80041e8:	e7ec      	b.n	80041c4 <_malloc_r+0xa0>
 80041ea:	4623      	mov	r3, r4
 80041ec:	6864      	ldr	r4, [r4, #4]
 80041ee:	e7b2      	b.n	8004156 <_malloc_r+0x32>
 80041f0:	4634      	mov	r4, r6
 80041f2:	6876      	ldr	r6, [r6, #4]
 80041f4:	e7b9      	b.n	800416a <_malloc_r+0x46>
 80041f6:	230c      	movs	r3, #12
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4638      	mov	r0, r7
 80041fc:	f000 f84c 	bl	8004298 <__malloc_unlock>
 8004200:	e7a1      	b.n	8004146 <_malloc_r+0x22>
 8004202:	6025      	str	r5, [r4, #0]
 8004204:	e7de      	b.n	80041c4 <_malloc_r+0xa0>
 8004206:	bf00      	nop
 8004208:	200001b0 	.word	0x200001b0

0800420c <_realloc_r>:
 800420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004210:	4680      	mov	r8, r0
 8004212:	4614      	mov	r4, r2
 8004214:	460e      	mov	r6, r1
 8004216:	b921      	cbnz	r1, 8004222 <_realloc_r+0x16>
 8004218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4611      	mov	r1, r2
 800421e:	f7ff bf81 	b.w	8004124 <_malloc_r>
 8004222:	b92a      	cbnz	r2, 8004230 <_realloc_r+0x24>
 8004224:	f7ff ff12 	bl	800404c <_free_r>
 8004228:	4625      	mov	r5, r4
 800422a:	4628      	mov	r0, r5
 800422c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004230:	f000 f838 	bl	80042a4 <_malloc_usable_size_r>
 8004234:	4284      	cmp	r4, r0
 8004236:	4607      	mov	r7, r0
 8004238:	d802      	bhi.n	8004240 <_realloc_r+0x34>
 800423a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800423e:	d812      	bhi.n	8004266 <_realloc_r+0x5a>
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff ff6e 	bl	8004124 <_malloc_r>
 8004248:	4605      	mov	r5, r0
 800424a:	2800      	cmp	r0, #0
 800424c:	d0ed      	beq.n	800422a <_realloc_r+0x1e>
 800424e:	42bc      	cmp	r4, r7
 8004250:	4622      	mov	r2, r4
 8004252:	4631      	mov	r1, r6
 8004254:	bf28      	it	cs
 8004256:	463a      	movcs	r2, r7
 8004258:	f7ff fed0 	bl	8003ffc <memcpy>
 800425c:	4631      	mov	r1, r6
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fef4 	bl	800404c <_free_r>
 8004264:	e7e1      	b.n	800422a <_realloc_r+0x1e>
 8004266:	4635      	mov	r5, r6
 8004268:	e7df      	b.n	800422a <_realloc_r+0x1e>
	...

0800426c <_sbrk_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d06      	ldr	r5, [pc, #24]	; (8004288 <_sbrk_r+0x1c>)
 8004270:	2300      	movs	r3, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7fc fe22 	bl	8000ec0 <_sbrk>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_sbrk_r+0x1a>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_sbrk_r+0x1a>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	200001b8 	.word	0x200001b8

0800428c <__malloc_lock>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__malloc_lock+0x8>)
 800428e:	f000 b811 	b.w	80042b4 <__retarget_lock_acquire_recursive>
 8004292:	bf00      	nop
 8004294:	200001bc 	.word	0x200001bc

08004298 <__malloc_unlock>:
 8004298:	4801      	ldr	r0, [pc, #4]	; (80042a0 <__malloc_unlock+0x8>)
 800429a:	f000 b80c 	b.w	80042b6 <__retarget_lock_release_recursive>
 800429e:	bf00      	nop
 80042a0:	200001bc 	.word	0x200001bc

080042a4 <_malloc_usable_size_r>:
 80042a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a8:	1f18      	subs	r0, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbc      	itt	lt
 80042ae:	580b      	ldrlt	r3, [r1, r0]
 80042b0:	18c0      	addlt	r0, r0, r3
 80042b2:	4770      	bx	lr

080042b4 <__retarget_lock_acquire_recursive>:
 80042b4:	4770      	bx	lr

080042b6 <__retarget_lock_release_recursive>:
 80042b6:	4770      	bx	lr

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
